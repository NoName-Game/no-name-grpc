// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

package schema

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlayerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerRequest) Reset()         { *m = PlayerRequest{} }
func (m *PlayerRequest) String() string { return proto.CompactTextString(m) }
func (*PlayerRequest) ProtoMessage()    {}
func (*PlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{0}
}

func (m *PlayerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerRequest.Unmarshal(m, b)
}
func (m *PlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerRequest.Marshal(b, m, deterministic)
}
func (m *PlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRequest.Merge(m, src)
}
func (m *PlayerRequest) XXX_Size() int {
	return xxx_messageInfo_PlayerRequest.Size(m)
}
func (m *PlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRequest proto.InternalMessageInfo

type PlayerResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerResponse) Reset()         { *m = PlayerResponse{} }
func (m *PlayerResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerResponse) ProtoMessage()    {}
func (*PlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{1}
}

func (m *PlayerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerResponse.Unmarshal(m, b)
}
func (m *PlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerResponse.Marshal(b, m, deterministic)
}
func (m *PlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerResponse.Merge(m, src)
}
func (m *PlayerResponse) XXX_Size() int {
	return xxx_messageInfo_PlayerResponse.Size(m)
}
func (m *PlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerResponse proto.InternalMessageInfo

func (m *PlayerResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*PlayerRequest)(nil), "player.PlayerRequest")
	proto.RegisterType((*PlayerResponse)(nil), "player.PlayerResponse")
}

func init() {
	proto.RegisterFile("player.proto", fileDescriptor_41d803d1b635d5c6)
}

var fileDescriptor_41d803d1b635d5c6 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xc8, 0x49, 0xac,
	0x4c, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xf8, 0xb9, 0x78,
	0x03, 0xc0, 0xac, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x1b, 0x2e, 0x3e, 0x98, 0x40,
	0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x6b, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x14, 0x17, 0x47, 0x69, 0x71, 0x6a, 0x51, 0x5e, 0x62,
	0x6e, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x6f, 0x54, 0xcd, 0xc5, 0xe6, 0x97,
	0xef, 0x97, 0x98, 0x9b, 0x2a, 0x64, 0xce, 0xc5, 0x12, 0x9c, 0x91, 0x5f, 0x2e, 0x24, 0xaa, 0x07,
	0xb5, 0x17, 0xc5, 0x1a, 0x29, 0x31, 0x74, 0x61, 0x88, 0x65, 0x4a, 0x0c, 0x42, 0x16, 0x5c, 0xcc,
	0x8e, 0x39, 0x39, 0x24, 0xeb, 0x33, 0x60, 0x74, 0xe2, 0x88, 0x62, 0x2b, 0x4e, 0xce, 0x48, 0xcd,
	0x4d, 0x4c, 0x62, 0x03, 0x7b, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x67, 0x7b, 0x6a, 0xe7,
	0xf4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoNameClient is the client API for NoName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoNameClient interface {
	// Unary
	Show(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*PlayerResponse, error)
	// Server streaming
	All(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (NoName_AllClient, error)
}

type noNameClient struct {
	cc grpc.ClientConnInterface
}

func NewNoNameClient(cc grpc.ClientConnInterface) NoNameClient {
	return &noNameClient{cc}
}

func (c *noNameClient) Show(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*PlayerResponse, error) {
	out := new(PlayerResponse)
	err := c.cc.Invoke(ctx, "/player.NoName/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) All(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (NoName_AllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NoName_serviceDesc.Streams[0], "/player.NoName/All", opts...)
	if err != nil {
		return nil, err
	}
	x := &noNameAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NoName_AllClient interface {
	Recv() (*PlayerResponse, error)
	grpc.ClientStream
}

type noNameAllClient struct {
	grpc.ClientStream
}

func (x *noNameAllClient) Recv() (*PlayerResponse, error) {
	m := new(PlayerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoNameServer is the server API for NoName service.
type NoNameServer interface {
	// Unary
	Show(context.Context, *PlayerRequest) (*PlayerResponse, error)
	// Server streaming
	All(*PlayerRequest, NoName_AllServer) error
}

// UnimplementedNoNameServer can be embedded to have forward compatible implementations.
type UnimplementedNoNameServer struct {
}

func (*UnimplementedNoNameServer) Show(ctx context.Context, req *PlayerRequest) (*PlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (*UnimplementedNoNameServer) All(req *PlayerRequest, srv NoName_AllServer) error {
	return status.Errorf(codes.Unimplemented, "method All not implemented")
}

func RegisterNoNameServer(s *grpc.Server, srv NoNameServer) {
	s.RegisterService(&_NoName_serviceDesc, srv)
}

func _NoName_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.NoName/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).Show(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_All_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoNameServer).All(m, &noNameAllServer{stream})
}

type NoName_AllServer interface {
	Send(*PlayerResponse) error
	grpc.ServerStream
}

type noNameAllServer struct {
	grpc.ServerStream
}

func (x *noNameAllServer) Send(m *PlayerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NoName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player.NoName",
	HandlerType: (*NoNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _NoName_Show_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "All",
			Handler:       _NoName_All_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "player.proto",
}
