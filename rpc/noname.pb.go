// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/noname.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc/noname.proto", fileDescriptor_5f9649581b23721b) }

var fileDescriptor_5f9649581b23721b = []byte{
	// 1535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x6d, 0x73, 0x1b, 0x35,
	0x17, 0x7d, 0x3e, 0xf5, 0x01, 0x25, 0x7d, 0x13, 0x4d, 0xd2, 0xe6, 0xa5, 0x4d, 0xd3, 0xb4, 0x65,
	0xda, 0xb2, 0x9d, 0x81, 0x2f, 0x30, 0x03, 0xc3, 0x34, 0x76, 0x1a, 0x0c, 0xc4, 0x84, 0x38, 0x6d,
	0x61, 0x18, 0x28, 0xaa, 0xad, 0x38, 0x3b, 0xb5, 0x77, 0xb7, 0x2b, 0x39, 0x1d, 0x0f, 0xff, 0x8f,
	0xdf, 0xc5, 0xac, 0xa4, 0x7b, 0xa5, 0x95, 0xb4, 0x6b, 0x7f, 0xdc, 0x73, 0xce, 0x3d, 0x57, 0xbb,
	0xd2, 0x5e, 0xe9, 0x8a, 0xdc, 0x28, 0x8b, 0xe1, 0xf3, 0x2c, 0xcf, 0xd8, 0x94, 0x27, 0x45, 0x99,
	0xcb, 0x7c, 0xf3, 0x7a, 0x85, 0xb0, 0x72, 0x9a, 0x97, 0x06, 0xb8, 0x8d, 0xc0, 0xdb, 0x21, 0x93,
	0x7c, 0x9c, 0x97, 0x73, 0xc3, 0xa8, 0xe0, 0x8f, 0x9c, 0x15, 0x79, 0x66, 0x90, 0x3b, 0x16, 0x89,
	0x8a, 0x8b, 0x09, 0x9b, 0x73, 0x30, 0x5e, 0xb7, 0xc8, 0x5b, 0x21, 0x99, 0xe4, 0xae, 0x89, 0xc1,
	0x8b, 0x5c, 0xa4, 0x32, 0x45, 0x7f, 0x35, 0x38, 0x9e, 0xf1, 0x29, 0xb8, 0x5e, 0xab, 0x80, 0x54,
	0xf2, 0xa9, 0x79, 0xde, 0x80, 0x67, 0x3f, 0x3d, 0xad, 0x88, 0x09, 0xcb, 0xc6, 0x33, 0x36, 0xe6,
	0x6e, 0xf0, 0x94, 0x15, 0xc2, 0x3c, 0x5f, 0x55, 0x1f, 0xa3, 0x18, 0x7a, 0x23, 0xce, 0xb8, 0x74,
	0x4d, 0x4a, 0x2e, 0xf2, 0x59, 0x39, 0xac, 0x99, 0x88, 0x8b, 0xb4, 0x30, 0xcf, 0x6b, 0xd5, 0xb3,
	0x2c, 0x59, 0x26, 0xd8, 0xd0, 0x19, 0xf9, 0x4d, 0x0d, 0x73, 0x31, 0x2b, 0xb9, 0x0b, 0x4d, 0x53,
	0x21, 0xbc, 0xf7, 0x93, 0xa9, 0x64, 0x06, 0xf8, 0xf2, 0xdf, 0xe7, 0xe4, 0x4a, 0x3f, 0xef, 0xb3,
	0x29, 0xa7, 0x3d, 0xb2, 0x7a, 0xc4, 0xe5, 0x8b, 0x6a, 0x22, 0x0e, 0xe6, 0xbd, 0x2e, 0xdd, 0x4c,
	0xf4, 0x2c, 0xb9, 0xe0, 0x29, 0xff, 0x30, 0xe3, 0x42, 0x6e, 0x6e, 0x45, 0x39, 0x51, 0xe4, 0x99,
	0xe0, 0x7b, 0xff, 0xa3, 0xa7, 0xe4, 0xfa, 0xcb, 0x34, 0x1b, 0x19, 0x4a, 0xb9, 0xef, 0x98, 0x08,
	0x0f, 0x07, 0xc3, 0xbb, 0x4d, 0x34, 0x7a, 0xbe, 0x24, 0x2b, 0xaf, 0x8a, 0x11, 0x93, 0x5c, 0xd1,
	0xf4, 0x8e, 0x09, 0x70, 0x30, 0xf0, 0xda, 0x8c, 0x51, 0xee, 0xd8, 0x8e, 0xb8, 0x3c, 0x51, 0xd3,
	0xaf, 0x38, 0x81, 0x63, 0xf3, 0x70, 0x7f, 0x6c, 0x01, 0x8d, 0x9e, 0x05, 0xf9, 0xac, 0xfa, 0x12,
	0x93, 0x89, 0x62, 0x3a, 0x66, 0x65, 0xd0, 0x27, 0x89, 0xb7, 0xac, 0x23, 0x22, 0x48, 0xf2, 0x74,
	0x29, 0x2d, 0x66, 0xec, 0x93, 0xab, 0x47, 0x5c, 0xbe, 0x51, 0x7f, 0x82, 0x9a, 0xad, 0xed, 0xc4,
	0xfc, 0x28, 0x35, 0x18, 0xdc, 0x77, 0x1a, 0x58, 0xf4, 0x7b, 0x43, 0x6e, 0x54, 0x9f, 0x1e, 0x38,
	0x35, 0x65, 0xf7, 0x20, 0xc8, 0x67, 0xc0, 0x75, 0xb7, 0x59, 0x80, 0xc6, 0x3f, 0x91, 0x55, 0x3d,
	0x0f, 0x9a, 0xa7, 0x5b, 0x10, 0xe3, 0xa2, 0x60, 0xb8, 0x1d, 0x27, 0xdd, 0x51, 0xe2, 0x24, 0x68,
	0x52, 0xd8, 0x51, 0xfa, 0x4c, 0x30, 0xca, 0x50, 0x80, 0xc6, 0x13, 0xb2, 0xe1, 0xb1, 0x87, 0x1f,
	0x66, 0x69, 0x51, 0xf0, 0x11, 0x7d, 0xd4, 0x10, 0x0e, 0x02, 0x48, 0xf3, 0x78, 0xa1, 0x0e, 0xb3,
	0xcd, 0xc8, 0x2d, 0x3d, 0xbb, 0x5a, 0x81, 0xeb, 0xe5, 0x59, 0xe2, 0x97, 0xb6, 0x98, 0x0c, 0x12,
	0x7e, 0xb1, 0xa4, 0xda, 0x5b, 0x33, 0x7a, 0x6c, 0x66, 0xcd, 0x98, 0x7a, 0x59, 0x83, 0xed, 0x9a,
	0x89, 0xb3, 0xe8, 0xf7, 0xb7, 0x5a, 0xf5, 0x40, 0xbd, 0x12, 0xbc, 0xac, 0xca, 0x3c, 0xdd, 0x8b,
	0xc4, 0x01, 0x09, 0xde, 0x0f, 0x5a, 0x35, 0x98, 0xe1, 0x57, 0x72, 0x0d, 0x05, 0x03, 0xc9, 0x64,
	0xf5, 0xab, 0xfa, 0x81, 0x0a, 0xb7, 0xbf, 0x6a, 0x03, 0x8d, 0x96, 0x7f, 0x12, 0x8a, 0xdc, 0xa9,
	0xa9, 0xb4, 0x82, 0xde, 0x0f, 0xe2, 0x90, 0x03, 0xeb, 0xbd, 0x36, 0x49, 0x74, 0xc4, 0x3d, 0xc9,
	0xa7, 0xb1, 0x11, 0x2b, 0xbc, 0x79, 0xc4, 0x86, 0x8e, 0x2e, 0xfa, 0xc3, 0x61, 0x9e, 0xe5, 0xd3,
	0x39, 0xbd, 0x17, 0x44, 0x19, 0xc6, 0x2e, 0xfa, 0x46, 0x01, 0x1a, 0x9f, 0x93, 0xb5, 0x63, 0x96,
	0xb1, 0x31, 0x37, 0x79, 0xb3, 0x4b, 0x9e, 0xc9, 0x6a, 0x1d, 0xee, 0x43, 0x70, 0x94, 0x86, 0x14,
	0x0f, 0x17, 0xa8, 0xdc, 0xe5, 0xde, 0x29, 0x39, 0x93, 0x46, 0x72, 0x62, 0xb6, 0x5c, 0xfa, 0x2c,
	0xf1, 0x37, 0xe1, 0x98, 0xcc, 0x2e, 0xf7, 0xe5, 0xd4, 0x98, 0xf6, 0x1f, 0xb2, 0x8e, 0x2f, 0xdf,
	0x99, 0x95, 0x25, 0xcf, 0xaa, 0x87, 0x8c, 0x4b, 0x9a, 0x04, 0x56, 0x71, 0x21, 0xa4, 0x7e, 0xbe,
	0xb4, 0x1e, 0x93, 0xe7, 0x84, 0x76, 0xf2, 0x19, 0x10, 0xaf, 0x53, 0x91, 0x4a, 0x3e, 0xa2, 0x4f,
	0xc2, 0x77, 0x08, 0x44, 0x76, 0x43, 0x58, 0x46, 0x1b, 0x24, 0x1c, 0xcc, 0x85, 0xe4, 0xd3, 0x05,
	0x09, 0x6b, 0xa2, 0x05, 0x09, 0x3d, 0xad, 0x5b, 0xd8, 0x8f, 0xd4, 0x2b, 0x4b, 0xd1, 0xcb, 0xce,
	0x73, 0xba, 0xe5, 0xac, 0x38, 0x44, 0x6d, 0x61, 0x8f, 0x92, 0x6e, 0x69, 0x3a, 0xcc, 0x46, 0xf8,
	0x5b, 0x49, 0x5b, 0x9a, 0x6a, 0x70, 0x50, 0x9a, 0x3c, 0x16, 0xfd, 0xbe, 0x21, 0x57, 0x06, 0xe9,
	0x38, 0xeb, 0x65, 0x74, 0x0d, 0xa4, 0xfa, 0x19, 0x1c, 0xd6, 0x7d, 0x18, 0x43, 0x53, 0xa7, 0x40,
	0x54, 0xc5, 0x83, 0xab, 0x52, 0xf9, 0x38, 0xa9, 0x1d, 0x24, 0x43, 0x05, 0x18, 0x7f, 0xbe, 0x58,
	0x88, 0xa9, 0x4a, 0xb2, 0x56, 0x95, 0xec, 0xa1, 0x4c, 0x2f, 0xb9, 0xa3, 0x12, 0x76, 0xda, 0xd0,
	0x24, 0x14, 0x05, 0xd3, 0xd6, 0xaa, 0x75, 0x7e, 0xc6, 0xf5, 0xfa, 0x98, 0xce, 0xf2, 0x7e, 0x2e,
	0xd3, 0xf3, 0x39, 0x7d, 0xda, 0x36, 0x72, 0x50, 0x41, 0xd6, 0x67, 0xcb, 0x89, 0x9d, 0x5a, 0x73,
	0xd3, 0xfd, 0x5d, 0x95, 0x8c, 0x3e, 0xaa, 0x9b, 0x04, 0x02, 0xbb, 0xb5, 0x2e, 0xd2, 0xb9, 0x79,
	0xf4, 0xd9, 0xa1, 0x25, 0x4f, 0x20, 0x68, 0xc8, 0x13, 0xd1, 0xb9, 0x79, 0xba, 0x7c, 0xc2, 0x5b,
	0xf3, 0x04, 0x82, 0x86, 0x3c, 0x11, 0x1d, 0xe6, 0xd1, 0x87, 0xf2, 0xc3, 0xaa, 0x23, 0x31, 0x87,
	0x72, 0xdd, 0x9d, 0xb8, 0xa0, 0x3d, 0x94, 0xc7, 0x38, 0xb4, 0xfa, 0x8e, 0x7c, 0xf2, 0x43, 0xaa,
	0x19, 0xba, 0x6e, 0xa4, 0x00, 0x80, 0xc5, 0x46, 0x80, 0x7b, 0x23, 0x39, 0xab, 0x7a, 0x07, 0x33,
	0x12, 0xdd, 0x47, 0xb8, 0xa0, 0x1d, 0x49, 0x8c, 0x43, 0xab, 0x5f, 0xd4, 0x26, 0x69, 0x18, 0x75,
	0xd4, 0xdc, 0x0e, 0x02, 0xdc, 0x73, 0xe6, 0x4e, 0x03, 0x8b, 0x86, 0x7f, 0xa8, 0x7f, 0xd6, 0x70,
	0xba, 0x42, 0xf6, 0xba, 0x74, 0x37, 0x08, 0x03, 0x0a, 0x8c, 0xef, 0xb7, 0x28, 0xbc, 0xef, 0xa6,
	0x78, 0xba, 0x6e, 0x02, 0x00, 0xb0, 0xdf, 0xcd, 0xc7, 0xdd, 0x7e, 0x43, 0x41, 0xdd, 0x54, 0x0c,
	0xf3, 0x4b, 0x5e, 0xf2, 0x11, 0x85, 0xf7, 0xf1, 0x70, 0x7b, 0x24, 0x68, 0xa0, 0xd1, 0x93, 0x11,
	0x5a, 0x1d, 0xb9, 0x7f, 0x36, 0xed, 0xe6, 0xc1, 0x7c, 0x30, 0x99, 0x8d, 0xe9, 0x83, 0x04, 0xfb,
	0xcf, 0x90, 0x05, 0xf3, 0xfd, 0x76, 0x51, 0x73, 0x0a, 0x35, 0x4f, 0x8d, 0x29, 0xdc, 0xe9, 0xda,
	0x6f, 0x17, 0x61, 0x8a, 0xdf, 0x54, 0x27, 0xf6, 0x62, 0x32, 0x01, 0x85, 0xa0, 0xbb, 0x36, 0xd4,
	0xa3, 0xec, 0x94, 0x35, 0x2b, 0xd0, 0xf9, 0x5b, 0xf2, 0xa9, 0x26, 0xfb, 0x27, 0x1d, 0xba, 0x96,
	0x54, 0x2d, 0x37, 0x3e, 0xdb, 0x1d, 0xc0, 0x83, 0x31, 0xfa, 0x7b, 0x42, 0x3a, 0x25, 0x3b, 0xd7,
	0x9d, 0x2d, 0xd5, 0x3a, 0x0b, 0xd8, 0x29, 0xf7, 0x71, 0x34, 0x38, 0x20, 0x2b, 0x0a, 0x37, 0x2d,
	0x8f, 0xa3, 0xac, 0xb7, 0x3b, 0xb7, 0x43, 0xc2, 0xf5, 0x38, 0x60, 0xd9, 0xfb, 0x2e, 0x57, 0xbb,
	0xb1, 0xf1, 0x70, 0x90, 0xba, 0x47, 0x8d, 0x40, 0x8f, 0x43, 0xb2, 0x5a, 0x11, 0x6f, 0x52, 0x79,
	0x31, 0x2a, 0xd9, 0x47, 0x6a, 0xb5, 0x00, 0x81, 0xcb, 0x9d, 0x08, 0x13, 0xf6, 0x0d, 0x19, 0x97,
	0xb6, 0x6f, 0xc8, 0xb8, 0x4c, 0x6a, 0x70, 0x6d, 0x73, 0x8e, 0xb0, 0xee, 0xb9, 0xd3, 0xa1, 0x3a,
	0x79, 0x5e, 0x8e, 0xd2, 0xac, 0xaa, 0x9f, 0xfb, 0x91, 0x48, 0x4b, 0xd7, 0xce, 0x9d, 0x2d, 0xaa,
	0xf0, 0xe0, 0xac, 0x24, 0xc7, 0xac, 0xe8, 0x75, 0xf5, 0xc1, 0xd9, 0x0b, 0x56, 0x4c, 0xed, 0xe0,
	0x1c, 0x17, 0xa0, 0xf1, 0x0b, 0x42, 0x8e, 0xb8, 0x3c, 0x66, 0x85, 0xfa, 0x1a, 0x1b, 0x89, 0xba,
	0xe2, 0xb1, 0x88, 0x9d, 0x9a, 0x80, 0xf0, 0xd6, 0x3e, 0x74, 0x10, 0xca, 0x67, 0x37, 0xc1, 0x9b,
	0x1f, 0x8f, 0xb2, 0x6b, 0xbf, 0x59, 0x81, 0xce, 0x7f, 0x91, 0x9b, 0x35, 0xb2, 0xaf, 0x7b, 0xb2,
	0x78, 0x64, 0xbf, 0xd6, 0x93, 0xb5, 0x69, 0x9c, 0xe2, 0xbd, 0xda, 0x2d, 0xf3, 0x02, 0x78, 0xba,
	0x63, 0xc3, 0x5c, 0xdc, 0x16, 0xb3, 0x06, 0x1a, 0x0d, 0xbb, 0x64, 0x45, 0xff, 0x85, 0xba, 0x5f,
	0xba, 0x9d, 0xa8, 0xeb, 0x36, 0x07, 0xb2, 0x8b, 0x34, 0x64, 0xd0, 0xe5, 0xad, 0xea, 0xa9, 0x15,
	0x7a, 0x30, 0x87, 0xe6, 0xb7, 0xd7, 0xa5, 0xf7, 0x31, 0x28, 0xe0, 0x6c, 0x67, 0xd7, 0x22, 0xc1,
	0x04, 0x5f, 0x93, 0xff, 0xbf, 0x12, 0xbc, 0x52, 0xd0, 0x5b, 0x3a, 0xc0, 0x3c, 0x82, 0xcd, 0x9a,
	0x87, 0x62, 0xe4, 0x07, 0x68, 0xf7, 0x2b, 0xdc, 0x78, 0xa7, 0xea, 0x94, 0x57, 0xbf, 0x48, 0x8c,
	0x89, 0xec, 0x29, 0x6f, 0x19, 0x2d, 0xa6, 0x7c, 0xad, 0x16, 0xc1, 0xe0, 0x22, 0x2d, 0x4e, 0x79,
	0xc1, 0xd2, 0x52, 0x9d, 0xd0, 0xef, 0x26, 0xea, 0x1a, 0x31, 0x20, 0x20, 0xc7, 0xbd, 0x46, 0x1e,
	0x7d, 0x4f, 0xc8, 0xf5, 0x81, 0x64, 0xa5, 0x23, 0xa0, 0xdb, 0x3a, 0xca, 0x83, 0x6d, 0x31, 0x88,
	0xb3, 0xe8, 0xf8, 0xa3, 0x3a, 0xf9, 0x3b, 0x7e, 0x9b, 0x3a, 0xa2, 0x06, 0xda, 0x73, 0x45, 0x8c,
	0x8b, 0xbc, 0xf5, 0x59, 0xc9, 0x2e, 0xf9, 0x24, 0xf2, 0xd6, 0x96, 0x88, 0xbf, 0xb5, 0xcb, 0x47,
	0xc6, 0xa8, 0x69, 0x6f, 0x8c, 0x1a, 0x8c, 0x8f, 0x11, 0x38, 0xf4, 0x3a, 0x76, 0xaf, 0x34, 0x2e,
	0xd2, 0x42, 0xd0, 0x2d, 0x1c, 0x80, 0x83, 0xda, 0xc6, 0x29, 0x4a, 0xa2, 0xdd, 0x3b, 0xa8, 0xa5,
	0x86, 0xc3, 0x6b, 0xab, 0xbd, 0x48, 0xa0, 0x7f, 0x65, 0xf5, 0xa0, 0x55, 0x83, 0x39, 0x46, 0x70,
	0x76, 0x3f, 0xb3, 0xb7, 0xce, 0xf4, 0x61, 0xe2, 0xde, 0x41, 0x07, 0x3c, 0xa4, 0x78, 0xb4, 0x48,
	0xe6, 0x7c, 0xe4, 0x95, 0xaa, 0x40, 0x9c, 0xe9, 0x2b, 0x6c, 0xba, 0x95, 0xc0, 0x65, 0xb6, 0x83,
	0xda, 0xaf, 0x12, 0x25, 0xd1, 0xeb, 0x48, 0x17, 0x68, 0x7d, 0xf5, 0x4d, 0x37, 0x13, 0xb8, 0x04,
	0xb7, 0xa0, 0x9d, 0xad, 0x18, 0xe7, 0xcc, 0xd6, 0x6a, 0xe7, 0x82, 0x0f, 0xdf, 0x83, 0xd5, 0x36,
	0xca, 0x5d, 0xd8, 0x2e, 0xf6, 0x38, 0x8b, 0x76, 0xbf, 0xab, 0x1d, 0x09, 0xf1, 0x8f, 0xac, 0x1c,
	0xd1, 0xdd, 0xe8, 0x08, 0x2a, 0xca, 0x96, 0xfd, 0x66, 0x05, 0x58, 0xbf, 0xbb, 0xa2, 0xee, 0xf3,
	0xbf, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xfc, 0x49, 0x9e, 0x71, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoNameClient is the client API for NoName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoNameClient interface {
	// Armor
	GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error)
	FindArmorByName(ctx context.Context, in *FindArmorByNameRequest, opts ...grpc.CallOption) (*FindArmorByNameResponse, error)
	UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error)
	GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error)
	// ArmorCategory
	GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error)
	// Weapon
	GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error)
	FindWeaponByName(ctx context.Context, in *FindWeaponByNameRequest, opts ...grpc.CallOption) (*FindWeaponByNameResponse, error)
	UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponResponse, error)
	GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error)
	// WeaponCategory
	GetAllWeaponCategory(ctx context.Context, in *GetAllWeaponCategoryRequest, opts ...grpc.CallOption) (*GetAllWeaponCategoryResponse, error)
	// Player
	GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error)
	GetPlayerStats(ctx context.Context, in *GetPlayerStatsRequest, opts ...grpc.CallOption) (*GetPlayerStatsResponse, error)
	GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error)
	GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error)
	ManagePlayerInventory(ctx context.Context, in *ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*ManagePlayerInventoryResponse, error)
	// PlayerPosition
	CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error)
	// Rests
	GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error)
	EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error)
	// SignIn
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(ctx context.Context, in *GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(ctx context.Context, in *GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(ctx context.Context, in *GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(ctx context.Context, in *CreatePlayerStateRequest, opts ...grpc.CallOption) (*CreatePlayerStateResponse, error)
	UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateRequest, opts ...grpc.CallOption) (*UpdatePlayerStateResponse, error)
	DeletePlayerState(ctx context.Context, in *DeletePlayerStateRequest, opts ...grpc.CallOption) (*DeletePlayerStateResponse, error)
	// Enemy
	GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error)
	HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error)
	GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error)
	HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error)
	TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error)
	// Language
	FindLanguageBySlug(ctx context.Context, in *FindLanguageBySlugRequest, opts ...grpc.CallOption) (*FindLanguageBySlugResponse, error)
	FindLanguageByName(ctx context.Context, in *FindLanguageByNameRequest, opts ...grpc.CallOption) (*FindLanguageByNameResponse, error)
	GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error)
	// NPC - Crafter
	CraftArmor(ctx context.Context, in *CraftArmorRequest, opts ...grpc.CallOption) (*CraftArmorResponse, error)
	CraftWeapon(ctx context.Context, in *CraftWeaponRequest, opts ...grpc.CallOption) (*CraftWeaponResponse, error)
	// NPC - Banck
	BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error)
	BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error)
	GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error)
	// Map
	GetMapByID(ctx context.Context, in *GetMapByIDRequest, opts ...grpc.CallOption) (*GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error)
	GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error)
	DropResource(ctx context.Context, in *DropResourceRequest, opts ...grpc.CallOption) (*DropResourceResponse, error)
	// Item
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error)
	UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error)
	StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error)
	EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error)
	GetShipTravelInfo(ctx context.Context, in *GetShipTravelInfoRequest, opts ...grpc.CallOption) (*GetShipTravelInfoResponse, error)
	EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error)
	GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// Tresure
	DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error)
	// Mission
	GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error)
	CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error)
	GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error)
}

type noNameClient struct {
	cc *grpc.ClientConn
}

func NewNoNameClient(cc *grpc.ClientConn) NoNameClient {
	return &noNameClient{cc}
}

func (c *noNameClient) GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error) {
	out := new(GetArmorByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindArmorByName(ctx context.Context, in *FindArmorByNameRequest, opts ...grpc.CallOption) (*FindArmorByNameResponse, error) {
	out := new(FindArmorByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindArmorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error) {
	out := new(UpdateArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error) {
	out := new(GetPlayerArmorsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error) {
	out := new(GetAllArmorCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllArmorCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error) {
	out := new(GetWeaponByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetWeaponByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindWeaponByName(ctx context.Context, in *FindWeaponByNameRequest, opts ...grpc.CallOption) (*FindWeaponByNameResponse, error) {
	out := new(FindWeaponByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindWeaponByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponResponse, error) {
	out := new(UpdateWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error) {
	out := new(GetPlayerWeaponsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeapons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error) {
	out := new(GetPlayerWeaponEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeaponEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllWeaponCategory(ctx context.Context, in *GetAllWeaponCategoryRequest, opts ...grpc.CallOption) (*GetAllWeaponCategoryResponse, error) {
	out := new(GetAllWeaponCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllWeaponCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error) {
	out := new(GetPlayerByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error) {
	out := new(GetPlayerByUsernameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStats(ctx context.Context, in *GetPlayerStatsRequest, opts ...grpc.CallOption) (*GetPlayerStatsResponse, error) {
	out := new(GetPlayerStatsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error) {
	out := new(GetPlayerResourcesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error) {
	out := new(GetPlayerItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error) {
	out := new(GetPlayerEconomyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerEconomy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ManagePlayerInventory(ctx context.Context, in *ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*ManagePlayerInventoryResponse, error) {
	out := new(ManagePlayerInventoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/ManagePlayerInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error) {
	out := new(CreatePlayerPositionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error) {
	out := new(GetPlayerCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error) {
	out := new(CountPlanetVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlanetVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error) {
	out := new(CountSystemVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountSystemVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error) {
	out := new(GetRestsInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRestsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error) {
	out := new(EndPlayerRestResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndPlayerRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/NoName/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateByID(ctx context.Context, in *GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*GetPlayerStateByIDResponse, error) {
	out := new(GetPlayerStateByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetActivePlayerStates(ctx context.Context, in *GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*GetActivePlayerStatesResponse, error) {
	out := new(GetActivePlayerStatesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetActivePlayerStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateToNotify(ctx context.Context, in *GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerStateToNotifyResponse, error) {
	out := new(GetPlayerStateToNotifyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerState(ctx context.Context, in *CreatePlayerStateRequest, opts ...grpc.CallOption) (*CreatePlayerStateResponse, error) {
	out := new(CreatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateRequest, opts ...grpc.CallOption) (*UpdatePlayerStateResponse, error) {
	out := new(UpdatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeletePlayerState(ctx context.Context, in *DeletePlayerStateRequest, opts ...grpc.CallOption) (*DeletePlayerStateResponse, error) {
	out := new(DeletePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeletePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error) {
	out := new(GetEnemyByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetEnemyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error) {
	out := new(HitEnemyResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error) {
	out := new(GetTitanByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error) {
	out := new(GetTitanByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error) {
	out := new(GetTitanByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error) {
	out := new(HitTitanResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitTitan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error) {
	out := new(TitanDiscoveredResponse)
	err := c.cc.Invoke(ctx, "/NoName/TitanDiscovered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindLanguageBySlug(ctx context.Context, in *FindLanguageBySlugRequest, opts ...grpc.CallOption) (*FindLanguageBySlugResponse, error) {
	out := new(FindLanguageBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindLanguageBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindLanguageByName(ctx context.Context, in *FindLanguageByNameRequest, opts ...grpc.CallOption) (*FindLanguageByNameResponse, error) {
	out := new(FindLanguageByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindLanguageByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error) {
	out := new(GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error) {
	out := new(GetAllNPCResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllNPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CraftArmor(ctx context.Context, in *CraftArmorRequest, opts ...grpc.CallOption) (*CraftArmorResponse, error) {
	out := new(CraftArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/CraftArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CraftWeapon(ctx context.Context, in *CraftWeaponRequest, opts ...grpc.CallOption) (*CraftWeaponResponse, error) {
	out := new(CraftWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/CraftWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error) {
	out := new(BankDepositResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error) {
	out := new(BankWithdrawResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error) {
	out := new(GetPlanetByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error) {
	out := new(GetPlanetByCoordinateResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error) {
	out := new(GetPlanetByMapIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByMapID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMapByID(ctx context.Context, in *GetMapByIDRequest, opts ...grpc.CallOption) (*GetMapByIDResponse, error) {
	out := new(GetMapByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error) {
	out := new(GetResourceByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error) {
	out := new(GetResourceByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropResource(ctx context.Context, in *DropResourceRequest, opts ...grpc.CallOption) (*DropResourceResponse, error) {
	out := new(DropResourceResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error) {
	out := new(GetItemsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetItemsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error) {
	out := new(UseItemResponse)
	err := c.cc.Invoke(ctx, "/NoName/UseItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error) {
	out := new(GetAllItemCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItemCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error) {
	out := new(GetShipRepairInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipRepairInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error) {
	out := new(StartShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error) {
	out := new(EndShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipTravelInfo(ctx context.Context, in *GetShipTravelInfoRequest, opts ...grpc.CallOption) (*GetShipTravelInfoResponse, error) {
	out := new(GetShipTravelInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipTravelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error) {
	out := new(EndShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error) {
	out := new(GetPlayerShipsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error) {
	out := new(GetPlayerShipEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShipEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error) {
	out := new(DropTresureResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropTresure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error) {
	out := new(GetMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error) {
	out := new(CheckMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error) {
	out := new(GetMissionRewardResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMissionReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoNameServer is the server API for NoName service.
type NoNameServer interface {
	// Armor
	GetArmorByID(context.Context, *GetArmorByIDRequest) (*GetArmorByIDResponse, error)
	FindArmorByName(context.Context, *FindArmorByNameRequest) (*FindArmorByNameResponse, error)
	UpdateArmor(context.Context, *UpdateArmorRequest) (*UpdateArmorResponse, error)
	GetPlayerArmors(context.Context, *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error)
	// ArmorCategory
	GetAllArmorCategory(context.Context, *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error)
	// Weapon
	GetWeaponByID(context.Context, *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error)
	FindWeaponByName(context.Context, *FindWeaponByNameRequest) (*FindWeaponByNameResponse, error)
	UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponResponse, error)
	GetPlayerWeapons(context.Context, *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(context.Context, *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error)
	// WeaponCategory
	GetAllWeaponCategory(context.Context, *GetAllWeaponCategoryRequest) (*GetAllWeaponCategoryResponse, error)
	// Player
	GetPlayerByID(context.Context, *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(context.Context, *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error)
	GetPlayerStats(context.Context, *GetPlayerStatsRequest) (*GetPlayerStatsResponse, error)
	GetPlayerResources(context.Context, *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(context.Context, *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error)
	GetPlayerEconomy(context.Context, *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error)
	ManagePlayerInventory(context.Context, *ManagePlayerInventoryRequest) (*ManagePlayerInventoryResponse, error)
	// PlayerPosition
	CreatePlayerPosition(context.Context, *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(context.Context, *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(context.Context, *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(context.Context, *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error)
	// Rests
	GetRestsInfo(context.Context, *GetRestsInfoRequest) (*GetRestsInfoResponse, error)
	EndPlayerRest(context.Context, *EndPlayerRestRequest) (*EndPlayerRestResponse, error)
	// SignIn
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(context.Context, *GetPlayerStateByIDRequest) (*GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(context.Context, *GetActivePlayerStatesRequest) (*GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(context.Context, *GetPlayerStateToNotifyRequest) (*GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(context.Context, *CreatePlayerStateRequest) (*CreatePlayerStateResponse, error)
	UpdatePlayerState(context.Context, *UpdatePlayerStateRequest) (*UpdatePlayerStateResponse, error)
	DeletePlayerState(context.Context, *DeletePlayerStateRequest) (*DeletePlayerStateResponse, error)
	// Enemy
	GetEnemyByID(context.Context, *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error)
	HitEnemy(context.Context, *HitEnemyRequest) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(context.Context, *GetTitanByIDRequest) (*GetTitanByIDResponse, error)
	GetTitanByName(context.Context, *GetTitanByNameRequest) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(context.Context, *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error)
	HitTitan(context.Context, *HitTitanRequest) (*HitTitanResponse, error)
	TitanDiscovered(context.Context, *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error)
	// Language
	FindLanguageBySlug(context.Context, *FindLanguageBySlugRequest) (*FindLanguageBySlugResponse, error)
	FindLanguageByName(context.Context, *FindLanguageByNameRequest) (*FindLanguageByNameResponse, error)
	GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(context.Context, *GetAllNPCRequest) (*GetAllNPCResponse, error)
	// NPC - Crafter
	CraftArmor(context.Context, *CraftArmorRequest) (*CraftArmorResponse, error)
	CraftWeapon(context.Context, *CraftWeaponRequest) (*CraftWeaponResponse, error)
	// NPC - Banck
	BankDeposit(context.Context, *BankDepositRequest) (*BankDepositResponse, error)
	BankWithdraw(context.Context, *BankWithdrawRequest) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(context.Context, *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error)
	GetPlanetByCoordinate(context.Context, *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(context.Context, *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error)
	// Map
	GetMapByID(context.Context, *GetMapByIDRequest) (*GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(context.Context, *GetResourceByIDRequest) (*GetResourceByIDResponse, error)
	GetResourceByName(context.Context, *GetResourceByNameRequest) (*GetResourceByNameResponse, error)
	DropResource(context.Context, *DropResourceRequest) (*DropResourceResponse, error)
	// Item
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	GetItemsByCategoryID(context.Context, *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error)
	UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(context.Context, *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(context.Context, *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error)
	StartShipRepair(context.Context, *StartShipRepairRequest) (*StartShipRepairResponse, error)
	EndShipRepair(context.Context, *EndShipRepairRequest) (*EndShipRepairResponse, error)
	GetShipTravelInfo(context.Context, *GetShipTravelInfoRequest) (*GetShipTravelInfoResponse, error)
	EndShipTravel(context.Context, *EndShipTravelRequest) (*EndShipTravelResponse, error)
	GetPlayerShips(context.Context, *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(context.Context, *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// Tresure
	DropTresure(context.Context, *DropTresureRequest) (*DropTresureResponse, error)
	// Mission
	GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error)
	CheckMission(context.Context, *CheckMissionRequest) (*CheckMissionResponse, error)
	GetMissionReward(context.Context, *GetMissionRewardRequest) (*GetMissionRewardResponse, error)
}

// UnimplementedNoNameServer can be embedded to have forward compatible implementations.
type UnimplementedNoNameServer struct {
}

func (*UnimplementedNoNameServer) GetArmorByID(ctx context.Context, req *GetArmorByIDRequest) (*GetArmorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByID not implemented")
}
func (*UnimplementedNoNameServer) FindArmorByName(ctx context.Context, req *FindArmorByNameRequest) (*FindArmorByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArmorByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateArmor(ctx context.Context, req *UpdateArmorRequest) (*UpdateArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArmor not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmors(ctx context.Context, req *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmors not implemented")
}
func (*UnimplementedNoNameServer) GetAllArmorCategory(ctx context.Context, req *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArmorCategory not implemented")
}
func (*UnimplementedNoNameServer) GetWeaponByID(ctx context.Context, req *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByID not implemented")
}
func (*UnimplementedNoNameServer) FindWeaponByName(ctx context.Context, req *FindWeaponByNameRequest) (*FindWeaponByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWeaponByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateWeapon(ctx context.Context, req *UpdateWeaponRequest) (*UpdateWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeapon not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeapons(ctx context.Context, req *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeapons not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeaponEquipped(ctx context.Context, req *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeaponEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetAllWeaponCategory(ctx context.Context, req *GetAllWeaponCategoryRequest) (*GetAllWeaponCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWeaponCategory not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByID(ctx context.Context, req *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByUsername(ctx context.Context, req *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByUsername not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStats(ctx context.Context, req *GetPlayerStatsRequest) (*GetPlayerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStats not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerResources(ctx context.Context, req *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerResources not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerItems(ctx context.Context, req *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItems not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerEconomy(ctx context.Context, req *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEconomy not implemented")
}
func (*UnimplementedNoNameServer) ManagePlayerInventory(ctx context.Context, req *ManagePlayerInventoryRequest) (*ManagePlayerInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagePlayerInventory not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerPosition(ctx context.Context, req *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerPosition not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerCurrentPlanet(ctx context.Context, req *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) CountPlanetVisited(ctx context.Context, req *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlanetVisited not implemented")
}
func (*UnimplementedNoNameServer) CountSystemVisited(ctx context.Context, req *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSystemVisited not implemented")
}
func (*UnimplementedNoNameServer) GetRestsInfo(ctx context.Context, req *GetRestsInfoRequest) (*GetRestsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestsInfo not implemented")
}
func (*UnimplementedNoNameServer) EndPlayerRest(ctx context.Context, req *EndPlayerRestRequest) (*EndPlayerRestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPlayerRest not implemented")
}
func (*UnimplementedNoNameServer) SignIn(ctx context.Context, req *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateByID(ctx context.Context, req *GetPlayerStateByIDRequest) (*GetPlayerStateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateByID not implemented")
}
func (*UnimplementedNoNameServer) GetActivePlayerStates(ctx context.Context, req *GetActivePlayerStatesRequest) (*GetActivePlayerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlayerStates not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateToNotify(ctx context.Context, req *GetPlayerStateToNotifyRequest) (*GetPlayerStateToNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateToNotify not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerState(ctx context.Context, req *CreatePlayerStateRequest) (*CreatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) UpdatePlayerState(ctx context.Context, req *UpdatePlayerStateRequest) (*UpdatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) DeletePlayerState(ctx context.Context, req *DeletePlayerStateRequest) (*DeletePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerState not implemented")
}
func (*UnimplementedNoNameServer) GetEnemyByID(ctx context.Context, req *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemyByID not implemented")
}
func (*UnimplementedNoNameServer) HitEnemy(ctx context.Context, req *HitEnemyRequest) (*HitEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitEnemy not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByID(ctx context.Context, req *GetTitanByIDRequest) (*GetTitanByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByID not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByName(ctx context.Context, req *GetTitanByNameRequest) (*GetTitanByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByName not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByPlanetID(ctx context.Context, req *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) HitTitan(ctx context.Context, req *HitTitanRequest) (*HitTitanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitTitan not implemented")
}
func (*UnimplementedNoNameServer) TitanDiscovered(ctx context.Context, req *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitanDiscovered not implemented")
}
func (*UnimplementedNoNameServer) FindLanguageBySlug(ctx context.Context, req *FindLanguageBySlugRequest) (*FindLanguageBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLanguageBySlug not implemented")
}
func (*UnimplementedNoNameServer) FindLanguageByName(ctx context.Context, req *FindLanguageByNameRequest) (*FindLanguageByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLanguageByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllLanguages(ctx context.Context, req *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (*UnimplementedNoNameServer) GetAllNPC(ctx context.Context, req *GetAllNPCRequest) (*GetAllNPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNPC not implemented")
}
func (*UnimplementedNoNameServer) CraftArmor(ctx context.Context, req *CraftArmorRequest) (*CraftArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CraftArmor not implemented")
}
func (*UnimplementedNoNameServer) CraftWeapon(ctx context.Context, req *CraftWeaponRequest) (*CraftWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CraftWeapon not implemented")
}
func (*UnimplementedNoNameServer) BankDeposit(ctx context.Context, req *BankDepositRequest) (*BankDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankDeposit not implemented")
}
func (*UnimplementedNoNameServer) BankWithdraw(ctx context.Context, req *BankWithdrawRequest) (*BankWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankWithdraw not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByID(ctx context.Context, req *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByCoordinate(ctx context.Context, req *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByCoordinate not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByMapID(ctx context.Context, req *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByMapID not implemented")
}
func (*UnimplementedNoNameServer) GetMapByID(ctx context.Context, req *GetMapByIDRequest) (*GetMapByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByID(ctx context.Context, req *GetResourceByIDRequest) (*GetResourceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByName(ctx context.Context, req *GetResourceByNameRequest) (*GetResourceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByName not implemented")
}
func (*UnimplementedNoNameServer) DropResource(ctx context.Context, req *DropResourceRequest) (*DropResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropResource not implemented")
}
func (*UnimplementedNoNameServer) GetAllItems(ctx context.Context, req *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (*UnimplementedNoNameServer) GetItemsByCategoryID(ctx context.Context, req *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) UseItem(ctx context.Context, req *UseItemRequest) (*UseItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (*UnimplementedNoNameServer) GetAllItemCategories(ctx context.Context, req *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemCategories not implemented")
}
func (*UnimplementedNoNameServer) GetShipRepairInfo(ctx context.Context, req *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipRepairInfo not implemented")
}
func (*UnimplementedNoNameServer) StartShipRepair(ctx context.Context, req *StartShipRepairRequest) (*StartShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartShipRepair not implemented")
}
func (*UnimplementedNoNameServer) EndShipRepair(ctx context.Context, req *EndShipRepairRequest) (*EndShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipRepair not implemented")
}
func (*UnimplementedNoNameServer) GetShipTravelInfo(ctx context.Context, req *GetShipTravelInfoRequest) (*GetShipTravelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipTravelInfo not implemented")
}
func (*UnimplementedNoNameServer) EndShipTravel(ctx context.Context, req *EndShipTravelRequest) (*EndShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipTravel not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShips(ctx context.Context, req *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShips not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShipEquipped(ctx context.Context, req *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShipEquipped not implemented")
}
func (*UnimplementedNoNameServer) CreateTransaction(ctx context.Context, req *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedNoNameServer) DropTresure(ctx context.Context, req *DropTresureRequest) (*DropTresureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTresure not implemented")
}
func (*UnimplementedNoNameServer) GetMission(ctx context.Context, req *GetMissionRequest) (*GetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (*UnimplementedNoNameServer) CheckMission(ctx context.Context, req *CheckMissionRequest) (*CheckMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMission not implemented")
}
func (*UnimplementedNoNameServer) GetMissionReward(ctx context.Context, req *GetMissionRewardRequest) (*GetMissionRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionReward not implemented")
}

func RegisterNoNameServer(s *grpc.Server, srv NoNameServer) {
	s.RegisterService(&_NoName_serviceDesc, srv)
}

func _NoName_GetArmorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByID(ctx, req.(*GetArmorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindArmorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArmorByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindArmorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindArmorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindArmorByName(ctx, req.(*FindArmorByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateArmor(ctx, req.(*UpdateArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmors(ctx, req.(*GetPlayerArmorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllArmorCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllArmorCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllArmorCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, req.(*GetAllArmorCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetWeaponByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetWeaponByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetWeaponByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetWeaponByID(ctx, req.(*GetWeaponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindWeaponByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWeaponByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindWeaponByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindWeaponByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindWeaponByName(ctx, req.(*FindWeaponByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateWeapon(ctx, req.(*UpdateWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeapons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeapons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, req.(*GetPlayerWeaponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeaponEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeaponEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, req.(*GetPlayerWeaponEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllWeaponCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWeaponCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllWeaponCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllWeaponCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllWeaponCategory(ctx, req.(*GetAllWeaponCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByID(ctx, req.(*GetPlayerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, req.(*GetPlayerByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStats(ctx, req.(*GetPlayerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerResources(ctx, req.(*GetPlayerResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerItems(ctx, req.(*GetPlayerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerEconomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEconomyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerEconomy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, req.(*GetPlayerEconomyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ManagePlayerInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagePlayerInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ManagePlayerInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, req.(*ManagePlayerInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, req.(*CreatePlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, req.(*GetPlayerCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlanetVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlanetVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlanetVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlanetVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlanetVisited(ctx, req.(*CountPlanetVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountSystemVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSystemVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountSystemVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountSystemVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountSystemVisited(ctx, req.(*CountSystemVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRestsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRestsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRestsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRestsInfo(ctx, req.(*GetRestsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndPlayerRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPlayerRestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndPlayerRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndPlayerRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndPlayerRest(ctx, req.(*EndPlayerRestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, req.(*GetPlayerStateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetActivePlayerStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePlayerStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetActivePlayerStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, req.(*GetActivePlayerStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateToNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, req.(*GetPlayerStateToNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerState(ctx, req.(*CreatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdatePlayerState(ctx, req.(*UpdatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeletePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeletePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeletePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeletePlayerState(ctx, req.(*DeletePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetEnemyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnemyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetEnemyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetEnemyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetEnemyByID(ctx, req.(*GetEnemyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitEnemy(ctx, req.(*HitEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByID(ctx, req.(*GetTitanByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByName(ctx, req.(*GetTitanByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, req.(*GetTitanByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitTitan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitTitanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitTitan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitTitan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitTitan(ctx, req.(*HitTitanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_TitanDiscovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitanDiscoveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).TitanDiscovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/TitanDiscovered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).TitanDiscovered(ctx, req.(*TitanDiscoveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindLanguageBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLanguageBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindLanguageBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindLanguageBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindLanguageBySlug(ctx, req.(*FindLanguageBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindLanguageByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLanguageByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindLanguageByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindLanguageByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindLanguageByName(ctx, req.(*FindLanguageByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllLanguages(ctx, req.(*GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllNPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllNPC(ctx, req.(*GetAllNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CraftArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CraftArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CraftArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CraftArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CraftArmor(ctx, req.(*CraftArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CraftWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CraftWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CraftWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CraftWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CraftWeapon(ctx, req.(*CraftWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankDeposit(ctx, req.(*BankDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankWithdraw(ctx, req.(*BankWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByID(ctx, req.(*GetPlanetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByCoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, req.(*GetPlanetByCoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByMapID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByMapIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByMapID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, req.(*GetPlanetByMapIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMapByID(ctx, req.(*GetMapByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByID(ctx, req.(*GetResourceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByName(ctx, req.(*GetResourceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropResource(ctx, req.(*DropResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetItemsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetItemsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, req.(*GetItemsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UseItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UseItem(ctx, req.(*UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItemCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItemCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItemCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItemCategories(ctx, req.(*GetAllItemCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipRepairInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipRepairInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipRepairInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, req.(*GetShipRepairInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartShipRepair(ctx, req.(*StartShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipRepair(ctx, req.(*EndShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipTravelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipTravelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipTravelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, req.(*GetShipTravelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipTravel(ctx, req.(*EndShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShips(ctx, req.(*GetPlayerShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShipEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShipEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, req.(*GetPlayerShipEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropTresure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTresureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropTresure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropTresure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropTresure(ctx, req.(*DropTresureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMission(ctx, req.(*GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckMission(ctx, req.(*CheckMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMissionReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMissionReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMissionReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMissionReward(ctx, req.(*GetMissionRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NoName",
	HandlerType: (*NoNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArmorByID",
			Handler:    _NoName_GetArmorByID_Handler,
		},
		{
			MethodName: "FindArmorByName",
			Handler:    _NoName_FindArmorByName_Handler,
		},
		{
			MethodName: "UpdateArmor",
			Handler:    _NoName_UpdateArmor_Handler,
		},
		{
			MethodName: "GetPlayerArmors",
			Handler:    _NoName_GetPlayerArmors_Handler,
		},
		{
			MethodName: "GetAllArmorCategory",
			Handler:    _NoName_GetAllArmorCategory_Handler,
		},
		{
			MethodName: "GetWeaponByID",
			Handler:    _NoName_GetWeaponByID_Handler,
		},
		{
			MethodName: "FindWeaponByName",
			Handler:    _NoName_FindWeaponByName_Handler,
		},
		{
			MethodName: "UpdateWeapon",
			Handler:    _NoName_UpdateWeapon_Handler,
		},
		{
			MethodName: "GetPlayerWeapons",
			Handler:    _NoName_GetPlayerWeapons_Handler,
		},
		{
			MethodName: "GetPlayerWeaponEquipped",
			Handler:    _NoName_GetPlayerWeaponEquipped_Handler,
		},
		{
			MethodName: "GetAllWeaponCategory",
			Handler:    _NoName_GetAllWeaponCategory_Handler,
		},
		{
			MethodName: "GetPlayerByID",
			Handler:    _NoName_GetPlayerByID_Handler,
		},
		{
			MethodName: "GetPlayerByUsername",
			Handler:    _NoName_GetPlayerByUsername_Handler,
		},
		{
			MethodName: "GetPlayerStats",
			Handler:    _NoName_GetPlayerStats_Handler,
		},
		{
			MethodName: "GetPlayerResources",
			Handler:    _NoName_GetPlayerResources_Handler,
		},
		{
			MethodName: "GetPlayerItems",
			Handler:    _NoName_GetPlayerItems_Handler,
		},
		{
			MethodName: "GetPlayerEconomy",
			Handler:    _NoName_GetPlayerEconomy_Handler,
		},
		{
			MethodName: "ManagePlayerInventory",
			Handler:    _NoName_ManagePlayerInventory_Handler,
		},
		{
			MethodName: "CreatePlayerPosition",
			Handler:    _NoName_CreatePlayerPosition_Handler,
		},
		{
			MethodName: "GetPlayerCurrentPlanet",
			Handler:    _NoName_GetPlayerCurrentPlanet_Handler,
		},
		{
			MethodName: "CountPlanetVisited",
			Handler:    _NoName_CountPlanetVisited_Handler,
		},
		{
			MethodName: "CountSystemVisited",
			Handler:    _NoName_CountSystemVisited_Handler,
		},
		{
			MethodName: "GetRestsInfo",
			Handler:    _NoName_GetRestsInfo_Handler,
		},
		{
			MethodName: "EndPlayerRest",
			Handler:    _NoName_EndPlayerRest_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _NoName_SignIn_Handler,
		},
		{
			MethodName: "GetPlayerStateByID",
			Handler:    _NoName_GetPlayerStateByID_Handler,
		},
		{
			MethodName: "GetActivePlayerStates",
			Handler:    _NoName_GetActivePlayerStates_Handler,
		},
		{
			MethodName: "GetPlayerStateToNotify",
			Handler:    _NoName_GetPlayerStateToNotify_Handler,
		},
		{
			MethodName: "CreatePlayerState",
			Handler:    _NoName_CreatePlayerState_Handler,
		},
		{
			MethodName: "UpdatePlayerState",
			Handler:    _NoName_UpdatePlayerState_Handler,
		},
		{
			MethodName: "DeletePlayerState",
			Handler:    _NoName_DeletePlayerState_Handler,
		},
		{
			MethodName: "GetEnemyByID",
			Handler:    _NoName_GetEnemyByID_Handler,
		},
		{
			MethodName: "HitEnemy",
			Handler:    _NoName_HitEnemy_Handler,
		},
		{
			MethodName: "GetTitanByID",
			Handler:    _NoName_GetTitanByID_Handler,
		},
		{
			MethodName: "GetTitanByName",
			Handler:    _NoName_GetTitanByName_Handler,
		},
		{
			MethodName: "GetTitanByPlanetID",
			Handler:    _NoName_GetTitanByPlanetID_Handler,
		},
		{
			MethodName: "HitTitan",
			Handler:    _NoName_HitTitan_Handler,
		},
		{
			MethodName: "TitanDiscovered",
			Handler:    _NoName_TitanDiscovered_Handler,
		},
		{
			MethodName: "FindLanguageBySlug",
			Handler:    _NoName_FindLanguageBySlug_Handler,
		},
		{
			MethodName: "FindLanguageByName",
			Handler:    _NoName_FindLanguageByName_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _NoName_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetAllNPC",
			Handler:    _NoName_GetAllNPC_Handler,
		},
		{
			MethodName: "CraftArmor",
			Handler:    _NoName_CraftArmor_Handler,
		},
		{
			MethodName: "CraftWeapon",
			Handler:    _NoName_CraftWeapon_Handler,
		},
		{
			MethodName: "BankDeposit",
			Handler:    _NoName_BankDeposit_Handler,
		},
		{
			MethodName: "BankWithdraw",
			Handler:    _NoName_BankWithdraw_Handler,
		},
		{
			MethodName: "GetPlanetByID",
			Handler:    _NoName_GetPlanetByID_Handler,
		},
		{
			MethodName: "GetPlanetByCoordinate",
			Handler:    _NoName_GetPlanetByCoordinate_Handler,
		},
		{
			MethodName: "GetPlanetByMapID",
			Handler:    _NoName_GetPlanetByMapID_Handler,
		},
		{
			MethodName: "GetMapByID",
			Handler:    _NoName_GetMapByID_Handler,
		},
		{
			MethodName: "GetResourceByID",
			Handler:    _NoName_GetResourceByID_Handler,
		},
		{
			MethodName: "GetResourceByName",
			Handler:    _NoName_GetResourceByName_Handler,
		},
		{
			MethodName: "DropResource",
			Handler:    _NoName_DropResource_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _NoName_GetAllItems_Handler,
		},
		{
			MethodName: "GetItemsByCategoryID",
			Handler:    _NoName_GetItemsByCategoryID_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _NoName_UseItem_Handler,
		},
		{
			MethodName: "GetAllItemCategories",
			Handler:    _NoName_GetAllItemCategories_Handler,
		},
		{
			MethodName: "GetShipRepairInfo",
			Handler:    _NoName_GetShipRepairInfo_Handler,
		},
		{
			MethodName: "StartShipRepair",
			Handler:    _NoName_StartShipRepair_Handler,
		},
		{
			MethodName: "EndShipRepair",
			Handler:    _NoName_EndShipRepair_Handler,
		},
		{
			MethodName: "GetShipTravelInfo",
			Handler:    _NoName_GetShipTravelInfo_Handler,
		},
		{
			MethodName: "EndShipTravel",
			Handler:    _NoName_EndShipTravel_Handler,
		},
		{
			MethodName: "GetPlayerShips",
			Handler:    _NoName_GetPlayerShips_Handler,
		},
		{
			MethodName: "GetPlayerShipEquipped",
			Handler:    _NoName_GetPlayerShipEquipped_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _NoName_CreateTransaction_Handler,
		},
		{
			MethodName: "DropTresure",
			Handler:    _NoName_DropTresure_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _NoName_GetMission_Handler,
		},
		{
			MethodName: "CheckMission",
			Handler:    _NoName_CheckMission_Handler,
		},
		{
			MethodName: "GetMissionReward",
			Handler:    _NoName_GetMissionReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/noname.proto",
}
