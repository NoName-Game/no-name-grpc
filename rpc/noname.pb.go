// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/noname.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("rpc/noname.proto", fileDescriptor_5f9649581b23721b)
}

var fileDescriptor_5f9649581b23721b = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x2a, 0x48, 0xd6,
	0xcf, 0xcb, 0xcf, 0x4b, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0x07, 0x89,
	0x24, 0x16, 0xe5, 0xe6, 0x17, 0x41, 0x05, 0xc0, 0x4a, 0x0a, 0x72, 0x12, 0x2b, 0x53, 0xa1, 0x22,
	0x46, 0x1b, 0x98, 0xb8, 0xd8, 0xfc, 0xf2, 0xfd, 0x12, 0x73, 0x53, 0x85, 0x3c, 0xb9, 0x78, 0xdc,
	0x53, 0x4b, 0x1c, 0x41, 0xca, 0x9d, 0x2a, 0x3d, 0x5d, 0x84, 0xa4, 0xf4, 0x20, 0x5a, 0x91, 0x05,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0xa4, 0xb1, 0xca, 0x15, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0x2a, 0x31, 0x08, 0x05, 0x71, 0xf1, 0xbb, 0x65, 0xe6, 0xa5, 0x40, 0xa5, 0xc0, 0xa6, 0xcb,
	0x42, 0x75, 0xa0, 0x89, 0xc3, 0x0c, 0x94, 0xc3, 0x25, 0x0d, 0x37, 0xd3, 0x8d, 0x8b, 0x3b, 0xb4,
	0x20, 0x25, 0xb1, 0x24, 0x15, 0x2c, 0x2d, 0x24, 0x09, 0xd5, 0x80, 0x24, 0x06, 0x33, 0x4b, 0x0a,
	0x9b, 0x14, 0xdc, 0x1c, 0x7b, 0x2e, 0x0e, 0xf7, 0xd4, 0x12, 0xdf, 0xfc, 0xbc, 0xd4, 0x4a, 0x21,
	0x71, 0x3d, 0x68, 0x60, 0xc0, 0x44, 0x60, 0x46, 0x48, 0x60, 0x4a, 0xc0, 0x0c, 0x08, 0x60, 0x08,
	0x60, 0x4c, 0x62, 0x03, 0x87, 0x9e, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x97, 0x46, 0x39,
	0x74, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoNameClient is the client API for NoName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoNameClient interface {
	// Armor
	GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error)
	FindArmorByName(ctx context.Context, in *FindArmorByNameRequest, opts ...grpc.CallOption) (*FindArmorByNameResponse, error)
	UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error)
	// Player
	GetMoney(ctx context.Context, in *GetMoneyRequest, opts ...grpc.CallOption) (*GetMoneyResponse, error)
}

type noNameClient struct {
	cc grpc.ClientConnInterface
}

func NewNoNameClient(cc grpc.ClientConnInterface) NoNameClient {
	return &noNameClient{cc}
}

func (c *noNameClient) GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error) {
	out := new(GetArmorByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindArmorByName(ctx context.Context, in *FindArmorByNameRequest, opts ...grpc.CallOption) (*FindArmorByNameResponse, error) {
	out := new(FindArmorByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindArmorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error) {
	out := new(UpdateArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMoney(ctx context.Context, in *GetMoneyRequest, opts ...grpc.CallOption) (*GetMoneyResponse, error) {
	out := new(GetMoneyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoNameServer is the server API for NoName service.
type NoNameServer interface {
	// Armor
	GetArmorByID(context.Context, *GetArmorByIDRequest) (*GetArmorByIDResponse, error)
	FindArmorByName(context.Context, *FindArmorByNameRequest) (*FindArmorByNameResponse, error)
	UpdateArmor(context.Context, *UpdateArmorRequest) (*UpdateArmorResponse, error)
	// Player
	GetMoney(context.Context, *GetMoneyRequest) (*GetMoneyResponse, error)
}

// UnimplementedNoNameServer can be embedded to have forward compatible implementations.
type UnimplementedNoNameServer struct {
}

func (*UnimplementedNoNameServer) GetArmorByID(ctx context.Context, req *GetArmorByIDRequest) (*GetArmorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByID not implemented")
}
func (*UnimplementedNoNameServer) FindArmorByName(ctx context.Context, req *FindArmorByNameRequest) (*FindArmorByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArmorByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateArmor(ctx context.Context, req *UpdateArmorRequest) (*UpdateArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArmor not implemented")
}
func (*UnimplementedNoNameServer) GetMoney(ctx context.Context, req *GetMoneyRequest) (*GetMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoney not implemented")
}

func RegisterNoNameServer(s *grpc.Server, srv NoNameServer) {
	s.RegisterService(&_NoName_serviceDesc, srv)
}

func _NoName_GetArmorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByID(ctx, req.(*GetArmorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindArmorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArmorByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindArmorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindArmorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindArmorByName(ctx, req.(*FindArmorByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateArmor(ctx, req.(*UpdateArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMoney(ctx, req.(*GetMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NoName",
	HandlerType: (*NoNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArmorByID",
			Handler:    _NoName_GetArmorByID_Handler,
		},
		{
			MethodName: "FindArmorByName",
			Handler:    _NoName_FindArmorByName_Handler,
		},
		{
			MethodName: "UpdateArmor",
			Handler:    _NoName_UpdateArmor_Handler,
		},
		{
			MethodName: "GetMoney",
			Handler:    _NoName_GetMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/noname.proto",
}
