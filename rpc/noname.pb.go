// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: rpc/noname.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_rpc_noname_proto protoreflect.FileDescriptor

var file_rpc_noname_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x70, 0x63, 0x2f, 0x6e, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x72,
	0x70, 0x63, 0x2f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x72, 0x70, 0x63, 0x2f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72,
	0x70, 0x63, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72,
	0x70, 0x63, 0x2f, 0x6e, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x74,
	0x72, 0x65, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x72, 0x70,
	0x63, 0x2f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xcb, 0x31, 0x0a, 0x06, 0x4e, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x61, 0x72,
	0x6d, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72,
	0x6d, 0x6f, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x72, 0x6d, 0x6f,
	0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x72, 0x6d, 0x6f,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x72, 0x6d, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x73,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x6d, 0x6f,
	0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x6d, 0x6f,
	0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x1b, 0x2e,
	0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x1f,
	0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x26,
	0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x12, 0x2e, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d,
	0x45, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x16, 0x2e, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x2e, 0x48, 0x69, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x2e, 0x48, 0x69, 0x74,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x74, 0x61, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x74,
	0x61, 0x6e, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x74, 0x61, 0x6e, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x54,
	0x69, 0x74, 0x61, 0x6e, 0x12, 0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x48, 0x69, 0x74,
	0x54, 0x69, 0x74, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x2e, 0x48, 0x69, 0x74, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x54, 0x69, 0x74, 0x61, 0x6e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x2e, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x2e, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x46,
	0x69, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75,
	0x67, 0x12, 0x23, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x50, 0x43, 0x12, 0x15, 0x2e, 0x6e, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6e, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x50, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x6e, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x6e, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6e, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x17, 0x2e,
	0x6e, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x18, 0x2e, 0x6e, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79,
	0x4d, 0x61, 0x70, 0x49, 0x44, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x2e, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2a, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45,
	0x6e, 0x64, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x45, 0x6e,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45,
	0x6e, 0x64, 0x53, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x22,
	0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x72, 0x65, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1b,
	0x2e, 0x74, 0x72, 0x65, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x72, 0x65,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x72,
	0x65, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x72, 0x65, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_rpc_noname_proto_goTypes = []interface{}{
	(*GetArmorByIDRequest)(nil),                     // 0: armor.GetArmorByIDRequest
	(*FindArmorByNameRequest)(nil),                  // 1: armor.FindArmorByNameRequest
	(*UpdateArmorRequest)(nil),                      // 2: armor.UpdateArmorRequest
	(*GetPlayerArmorsRequest)(nil),                  // 3: armor.GetPlayerArmorsRequest
	(*GetPlayerArmorsEquippedRequest)(nil),          // 4: armor.GetPlayerArmorsEquippedRequest
	(*GetAllArmorCategoryRequest)(nil),              // 5: armor_category.GetAllArmorCategoryRequest
	(*GetWeaponByIDRequest)(nil),                    // 6: weapon.GetWeaponByIDRequest
	(*FindWeaponByNameRequest)(nil),                 // 7: weapon.FindWeaponByNameRequest
	(*UpdateWeaponRequest)(nil),                     // 8: weapon.UpdateWeaponRequest
	(*GetPlayerWeaponsRequest)(nil),                 // 9: weapon.GetPlayerWeaponsRequest
	(*GetPlayerWeaponEquippedRequest)(nil),          // 10: weapon.GetPlayerWeaponEquippedRequest
	(*GetAllWeaponCategoryRequest)(nil),             // 11: weapon_category.GetAllWeaponCategoryRequest
	(*GetPlayerByIDRequest)(nil),                    // 12: player.GetPlayerByIDRequest
	(*GetPlayerByUsernameRequest)(nil),              // 13: player.GetPlayerByUsernameRequest
	(*GetPlayerStatsRequest)(nil),                   // 14: player.GetPlayerStatsRequest
	(*GetPlayerResourcesRequest)(nil),               // 15: player.GetPlayerResourcesRequest
	(*GetPlayerItemsRequest)(nil),                   // 16: player.GetPlayerItemsRequest
	(*GetPlayerEconomyRequest)(nil),                 // 17: player.GetPlayerEconomyRequest
	(*ManagePlayerInventoryRequest)(nil),            // 18: player.ManagePlayerInventoryRequest
	(*CreatePlayerPositionRequest)(nil),             // 19: player_position.CreatePlayerPositionRequest
	(*GetPlayerCurrentPlanetRequest)(nil),           // 20: player_position.GetPlayerCurrentPlanetRequest
	(*CountPlanetVisitedRequest)(nil),               // 21: player_position.CountPlanetVisitedRequest
	(*CountSystemVisitedRequest)(nil),               // 22: player_position.CountSystemVisitedRequest
	(*CountPlayerVisitedCurrentPlanetRequest)(nil),  // 23: player_position.CountPlayerVisitedCurrentPlanetRequest
	(*GetRestsInfoRequest)(nil),                     // 24: player.GetRestsInfoRequest
	(*EndPlayerRestRequest)(nil),                    // 25: player.EndPlayerRestRequest
	(*SignInRequest)(nil),                           // 26: player.SignInRequest
	(*GetPlayerStateByIDRequest)(nil),               // 27: player_state.GetPlayerStateByIDRequest
	(*GetActivePlayerStatesRequest)(nil),            // 28: player_state.GetActivePlayerStatesRequest
	(*GetPlayerStateToNotifyRequest)(nil),           // 29: player_state.GetPlayerStateToNotifyRequest
	(*CreatePlayerStateRequest)(nil),                // 30: player_state.CreatePlayerStateRequest
	(*UpdatePlayerStateRequest)(nil),                // 31: player_state.UpdatePlayerStateRequest
	(*DeletePlayerStateRequest)(nil),                // 32: player_state.DeletePlayerStateRequest
	(*GetEnemyByIDRequest)(nil),                     // 33: enemy.GetEnemyByIDRequest
	(*HitEnemyRequest)(nil),                         // 34: enemy.HitEnemyRequest
	(*GetTitanByIDRequest)(nil),                     // 35: titan.GetTitanByIDRequest
	(*GetTitanByNameRequest)(nil),                   // 36: titan.GetTitanByNameRequest
	(*GetTitanByPlanetIDRequest)(nil),               // 37: titan.GetTitanByPlanetIDRequest
	(*HitTitanRequest)(nil),                         // 38: titan.HitTitanRequest
	(*TitanDiscoveredRequest)(nil),                  // 39: titan.TitanDiscoveredRequest
	(*FindLanguageBySlugRequest)(nil),               // 40: language.FindLanguageBySlugRequest
	(*FindLanguageByNameRequest)(nil),               // 41: language.FindLanguageByNameRequest
	(*GetAllLanguagesRequest)(nil),                  // 42: language.GetAllLanguagesRequest
	(*GetAllNPCRequest)(nil),                        // 43: npc.GetAllNPCRequest
	(*CraftArmorRequest)(nil),                       // 44: npc.CraftArmorRequest
	(*CraftWeaponRequest)(nil),                      // 45: npc.CraftWeaponRequest
	(*BankDepositRequest)(nil),                      // 46: npc.BankDepositRequest
	(*BankWithdrawRequest)(nil),                     // 47: npc.BankWithdrawRequest
	(*GetPlanetByIDRequest)(nil),                    // 48: planet.GetPlanetByIDRequest
	(*GetPlanetByCoordinateRequest)(nil),            // 49: planet.GetPlanetByCoordinateRequest
	(*GetPlanetByMapIDRequest)(nil),                 // 50: planet.GetPlanetByMapIDRequest
	(*GetMapByIDRequest)(nil),                       // 51: maps.GetMapByIDRequest
	(*GetResourceByIDRequest)(nil),                  // 52: resource.GetResourceByIDRequest
	(*GetResourceByNameRequest)(nil),                // 53: resource.GetResourceByNameRequest
	(*DropResourceRequest)(nil),                     // 54: resource.DropResourceRequest
	(*GetAllItemsRequest)(nil),                      // 55: item.GetAllItemsRequest
	(*GetItemsByCategoryIDRequest)(nil),             // 56: item.GetItemsByCategoryIDRequest
	(*UseItemRequest)(nil),                          // 57: item.UseItemRequest
	(*GetAllItemCategoriesRequest)(nil),             // 58: item_category.GetAllItemCategoriesRequest
	(*GetShipRepairInfoRequest)(nil),                // 59: ship.GetShipRepairInfoRequest
	(*StartShipRepairRequest)(nil),                  // 60: ship.StartShipRepairRequest
	(*EndShipRepairRequest)(nil),                    // 61: ship.EndShipRepairRequest
	(*GetShipTravelInfoRequest)(nil),                // 62: ship.GetShipTravelInfoRequest
	(*EndShipTravelRequest)(nil),                    // 63: ship.EndShipTravelRequest
	(*GetPlayerShipsRequest)(nil),                   // 64: ship.GetPlayerShipsRequest
	(*GetPlayerShipEquippedRequest)(nil),            // 65: ship.GetPlayerShipEquippedRequest
	(*CreateTransactionRequest)(nil),                // 66: transaction.CreateTransactionRequest
	(*DropTresureRequest)(nil),                      // 67: tresure.DropTresureRequest
	(*GetMissionRequest)(nil),                       // 68: mission.GetMissionRequest
	(*CheckMissionRequest)(nil),                     // 69: mission.CheckMissionRequest
	(*GetMissionRewardRequest)(nil),                 // 70: mission.GetMissionRewardRequest
	(*GetArmorByIDResponse)(nil),                    // 71: armor.GetArmorByIDResponse
	(*FindArmorByNameResponse)(nil),                 // 72: armor.FindArmorByNameResponse
	(*UpdateArmorResponse)(nil),                     // 73: armor.UpdateArmorResponse
	(*GetPlayerArmorsResponse)(nil),                 // 74: armor.GetPlayerArmorsResponse
	(*GetPlayerArmorsEquippedResponse)(nil),         // 75: armor.GetPlayerArmorsEquippedResponse
	(*GetAllArmorCategoryResponse)(nil),             // 76: armor_category.GetAllArmorCategoryResponse
	(*GetWeaponByIDResponse)(nil),                   // 77: weapon.GetWeaponByIDResponse
	(*FindWeaponByNameResponse)(nil),                // 78: weapon.FindWeaponByNameResponse
	(*UpdateWeaponResponse)(nil),                    // 79: weapon.UpdateWeaponResponse
	(*GetPlayerWeaponsResponse)(nil),                // 80: weapon.GetPlayerWeaponsResponse
	(*GetPlayerWeaponEquippedResponse)(nil),         // 81: weapon.GetPlayerWeaponEquippedResponse
	(*GetAllWeaponCategoryResponse)(nil),            // 82: weapon_category.GetAllWeaponCategoryResponse
	(*GetPlayerByIDResponse)(nil),                   // 83: player.GetPlayerByIDResponse
	(*GetPlayerByUsernameResponse)(nil),             // 84: player.GetPlayerByUsernameResponse
	(*GetPlayerStatsResponse)(nil),                  // 85: player.GetPlayerStatsResponse
	(*GetPlayerResourcesResponse)(nil),              // 86: player.GetPlayerResourcesResponse
	(*GetPlayerItemsResponse)(nil),                  // 87: player.GetPlayerItemsResponse
	(*GetPlayerEconomyResponse)(nil),                // 88: player.GetPlayerEconomyResponse
	(*ManagePlayerInventoryResponse)(nil),           // 89: player.ManagePlayerInventoryResponse
	(*CreatePlayerPositionResponse)(nil),            // 90: player_position.CreatePlayerPositionResponse
	(*GetPlayerCurrentPlanetResponse)(nil),          // 91: player_position.GetPlayerCurrentPlanetResponse
	(*CountPlanetVisitedResponse)(nil),              // 92: player_position.CountPlanetVisitedResponse
	(*CountSystemVisitedResponse)(nil),              // 93: player_position.CountSystemVisitedResponse
	(*CountPlayerVisitedCurrentPlanetResponse)(nil), // 94: player_position.CountPlayerVisitedCurrentPlanetResponse
	(*GetRestsInfoResponse)(nil),                    // 95: player.GetRestsInfoResponse
	(*EndPlayerRestResponse)(nil),                   // 96: player.EndPlayerRestResponse
	(*SignInResponse)(nil),                          // 97: player.SignInResponse
	(*GetPlayerStateByIDResponse)(nil),              // 98: player_state.GetPlayerStateByIDResponse
	(*GetActivePlayerStatesResponse)(nil),           // 99: player_state.GetActivePlayerStatesResponse
	(*GetPlayerStateToNotifyResponse)(nil),          // 100: player_state.GetPlayerStateToNotifyResponse
	(*CreatePlayerStateResponse)(nil),               // 101: player_state.CreatePlayerStateResponse
	(*UpdatePlayerStateResponse)(nil),               // 102: player_state.UpdatePlayerStateResponse
	(*DeletePlayerStateResponse)(nil),               // 103: player_state.DeletePlayerStateResponse
	(*GetEnemyByIDResponse)(nil),                    // 104: enemy.GetEnemyByIDResponse
	(*HitEnemyResponse)(nil),                        // 105: enemy.HitEnemyResponse
	(*GetTitanByIDResponse)(nil),                    // 106: titan.GetTitanByIDResponse
	(*GetTitanByNameResponse)(nil),                  // 107: titan.GetTitanByNameResponse
	(*GetTitanByPlanetIDResponse)(nil),              // 108: titan.GetTitanByPlanetIDResponse
	(*HitTitanResponse)(nil),                        // 109: titan.HitTitanResponse
	(*TitanDiscoveredResponse)(nil),                 // 110: titan.TitanDiscoveredResponse
	(*FindLanguageBySlugResponse)(nil),              // 111: language.FindLanguageBySlugResponse
	(*FindLanguageByNameResponse)(nil),              // 112: language.FindLanguageByNameResponse
	(*GetAllLanguagesResponse)(nil),                 // 113: language.GetAllLanguagesResponse
	(*GetAllNPCResponse)(nil),                       // 114: npc.GetAllNPCResponse
	(*CraftArmorResponse)(nil),                      // 115: npc.CraftArmorResponse
	(*CraftWeaponResponse)(nil),                     // 116: npc.CraftWeaponResponse
	(*BankDepositResponse)(nil),                     // 117: npc.BankDepositResponse
	(*BankWithdrawResponse)(nil),                    // 118: npc.BankWithdrawResponse
	(*GetPlanetByIDResponse)(nil),                   // 119: planet.GetPlanetByIDResponse
	(*GetPlanetByCoordinateResponse)(nil),           // 120: planet.GetPlanetByCoordinateResponse
	(*GetPlanetByMapIDResponse)(nil),                // 121: planet.GetPlanetByMapIDResponse
	(*GetMapByIDResponse)(nil),                      // 122: maps.GetMapByIDResponse
	(*GetResourceByIDResponse)(nil),                 // 123: resource.GetResourceByIDResponse
	(*GetResourceByNameResponse)(nil),               // 124: resource.GetResourceByNameResponse
	(*DropResourceResponse)(nil),                    // 125: resource.DropResourceResponse
	(*GetAllItemsResponse)(nil),                     // 126: item.GetAllItemsResponse
	(*GetItemsByCategoryIDResponse)(nil),            // 127: item.GetItemsByCategoryIDResponse
	(*UseItemResponse)(nil),                         // 128: item.UseItemResponse
	(*GetAllItemCategoriesResponse)(nil),            // 129: item_category.GetAllItemCategoriesResponse
	(*GetShipRepairInfoResponse)(nil),               // 130: ship.GetShipRepairInfoResponse
	(*StartShipRepairResponse)(nil),                 // 131: ship.StartShipRepairResponse
	(*EndShipRepairResponse)(nil),                   // 132: ship.EndShipRepairResponse
	(*GetShipTravelInfoResponse)(nil),               // 133: ship.GetShipTravelInfoResponse
	(*EndShipTravelResponse)(nil),                   // 134: ship.EndShipTravelResponse
	(*GetPlayerShipsResponse)(nil),                  // 135: ship.GetPlayerShipsResponse
	(*GetPlayerShipEquippedResponse)(nil),           // 136: ship.GetPlayerShipEquippedResponse
	(*CreateTransactionResponse)(nil),               // 137: transaction.CreateTransactionResponse
	(*DropTresureResponse)(nil),                     // 138: tresure.DropTresureResponse
	(*GetMissionResponse)(nil),                      // 139: mission.GetMissionResponse
	(*CheckMissionResponse)(nil),                    // 140: mission.CheckMissionResponse
	(*GetMissionRewardResponse)(nil),                // 141: mission.GetMissionRewardResponse
}
var file_rpc_noname_proto_depIdxs = []int32{
	0,   // 0: NoName.GetArmorByID:input_type -> armor.GetArmorByIDRequest
	1,   // 1: NoName.FindArmorByName:input_type -> armor.FindArmorByNameRequest
	2,   // 2: NoName.UpdateArmor:input_type -> armor.UpdateArmorRequest
	3,   // 3: NoName.GetPlayerArmors:input_type -> armor.GetPlayerArmorsRequest
	4,   // 4: NoName.GetPlayerArmorsEquipped:input_type -> armor.GetPlayerArmorsEquippedRequest
	5,   // 5: NoName.GetAllArmorCategory:input_type -> armor_category.GetAllArmorCategoryRequest
	6,   // 6: NoName.GetWeaponByID:input_type -> weapon.GetWeaponByIDRequest
	7,   // 7: NoName.FindWeaponByName:input_type -> weapon.FindWeaponByNameRequest
	8,   // 8: NoName.UpdateWeapon:input_type -> weapon.UpdateWeaponRequest
	9,   // 9: NoName.GetPlayerWeapons:input_type -> weapon.GetPlayerWeaponsRequest
	10,  // 10: NoName.GetPlayerWeaponEquipped:input_type -> weapon.GetPlayerWeaponEquippedRequest
	11,  // 11: NoName.GetAllWeaponCategory:input_type -> weapon_category.GetAllWeaponCategoryRequest
	12,  // 12: NoName.GetPlayerByID:input_type -> player.GetPlayerByIDRequest
	13,  // 13: NoName.GetPlayerByUsername:input_type -> player.GetPlayerByUsernameRequest
	14,  // 14: NoName.GetPlayerStats:input_type -> player.GetPlayerStatsRequest
	15,  // 15: NoName.GetPlayerResources:input_type -> player.GetPlayerResourcesRequest
	16,  // 16: NoName.GetPlayerItems:input_type -> player.GetPlayerItemsRequest
	17,  // 17: NoName.GetPlayerEconomy:input_type -> player.GetPlayerEconomyRequest
	18,  // 18: NoName.ManagePlayerInventory:input_type -> player.ManagePlayerInventoryRequest
	19,  // 19: NoName.CreatePlayerPosition:input_type -> player_position.CreatePlayerPositionRequest
	20,  // 20: NoName.GetPlayerCurrentPlanet:input_type -> player_position.GetPlayerCurrentPlanetRequest
	21,  // 21: NoName.CountPlanetVisited:input_type -> player_position.CountPlanetVisitedRequest
	22,  // 22: NoName.CountSystemVisited:input_type -> player_position.CountSystemVisitedRequest
	23,  // 23: NoName.CountPlayerVisitedCurrentPlanet:input_type -> player_position.CountPlayerVisitedCurrentPlanetRequest
	24,  // 24: NoName.GetRestsInfo:input_type -> player.GetRestsInfoRequest
	25,  // 25: NoName.EndPlayerRest:input_type -> player.EndPlayerRestRequest
	26,  // 26: NoName.SignIn:input_type -> player.SignInRequest
	27,  // 27: NoName.GetPlayerStateByID:input_type -> player_state.GetPlayerStateByIDRequest
	28,  // 28: NoName.GetActivePlayerStates:input_type -> player_state.GetActivePlayerStatesRequest
	29,  // 29: NoName.GetPlayerStateToNotify:input_type -> player_state.GetPlayerStateToNotifyRequest
	30,  // 30: NoName.CreatePlayerState:input_type -> player_state.CreatePlayerStateRequest
	31,  // 31: NoName.UpdatePlayerState:input_type -> player_state.UpdatePlayerStateRequest
	32,  // 32: NoName.DeletePlayerState:input_type -> player_state.DeletePlayerStateRequest
	33,  // 33: NoName.GetEnemyByID:input_type -> enemy.GetEnemyByIDRequest
	34,  // 34: NoName.HitEnemy:input_type -> enemy.HitEnemyRequest
	35,  // 35: NoName.GetTitanByID:input_type -> titan.GetTitanByIDRequest
	36,  // 36: NoName.GetTitanByName:input_type -> titan.GetTitanByNameRequest
	37,  // 37: NoName.GetTitanByPlanetID:input_type -> titan.GetTitanByPlanetIDRequest
	38,  // 38: NoName.HitTitan:input_type -> titan.HitTitanRequest
	39,  // 39: NoName.TitanDiscovered:input_type -> titan.TitanDiscoveredRequest
	40,  // 40: NoName.FindLanguageBySlug:input_type -> language.FindLanguageBySlugRequest
	41,  // 41: NoName.FindLanguageByName:input_type -> language.FindLanguageByNameRequest
	42,  // 42: NoName.GetAllLanguages:input_type -> language.GetAllLanguagesRequest
	43,  // 43: NoName.GetAllNPC:input_type -> npc.GetAllNPCRequest
	44,  // 44: NoName.CraftArmor:input_type -> npc.CraftArmorRequest
	45,  // 45: NoName.CraftWeapon:input_type -> npc.CraftWeaponRequest
	46,  // 46: NoName.BankDeposit:input_type -> npc.BankDepositRequest
	47,  // 47: NoName.BankWithdraw:input_type -> npc.BankWithdrawRequest
	48,  // 48: NoName.GetPlanetByID:input_type -> planet.GetPlanetByIDRequest
	49,  // 49: NoName.GetPlanetByCoordinate:input_type -> planet.GetPlanetByCoordinateRequest
	50,  // 50: NoName.GetPlanetByMapID:input_type -> planet.GetPlanetByMapIDRequest
	51,  // 51: NoName.GetMapByID:input_type -> maps.GetMapByIDRequest
	52,  // 52: NoName.GetResourceByID:input_type -> resource.GetResourceByIDRequest
	53,  // 53: NoName.GetResourceByName:input_type -> resource.GetResourceByNameRequest
	54,  // 54: NoName.DropResource:input_type -> resource.DropResourceRequest
	55,  // 55: NoName.GetAllItems:input_type -> item.GetAllItemsRequest
	56,  // 56: NoName.GetItemsByCategoryID:input_type -> item.GetItemsByCategoryIDRequest
	57,  // 57: NoName.UseItem:input_type -> item.UseItemRequest
	58,  // 58: NoName.GetAllItemCategories:input_type -> item_category.GetAllItemCategoriesRequest
	59,  // 59: NoName.GetShipRepairInfo:input_type -> ship.GetShipRepairInfoRequest
	60,  // 60: NoName.StartShipRepair:input_type -> ship.StartShipRepairRequest
	61,  // 61: NoName.EndShipRepair:input_type -> ship.EndShipRepairRequest
	62,  // 62: NoName.GetShipTravelInfo:input_type -> ship.GetShipTravelInfoRequest
	63,  // 63: NoName.EndShipTravel:input_type -> ship.EndShipTravelRequest
	64,  // 64: NoName.GetPlayerShips:input_type -> ship.GetPlayerShipsRequest
	65,  // 65: NoName.GetPlayerShipEquipped:input_type -> ship.GetPlayerShipEquippedRequest
	66,  // 66: NoName.CreateTransaction:input_type -> transaction.CreateTransactionRequest
	67,  // 67: NoName.DropTresure:input_type -> tresure.DropTresureRequest
	68,  // 68: NoName.GetMission:input_type -> mission.GetMissionRequest
	69,  // 69: NoName.CheckMission:input_type -> mission.CheckMissionRequest
	70,  // 70: NoName.GetMissionReward:input_type -> mission.GetMissionRewardRequest
	71,  // 71: NoName.GetArmorByID:output_type -> armor.GetArmorByIDResponse
	72,  // 72: NoName.FindArmorByName:output_type -> armor.FindArmorByNameResponse
	73,  // 73: NoName.UpdateArmor:output_type -> armor.UpdateArmorResponse
	74,  // 74: NoName.GetPlayerArmors:output_type -> armor.GetPlayerArmorsResponse
	75,  // 75: NoName.GetPlayerArmorsEquipped:output_type -> armor.GetPlayerArmorsEquippedResponse
	76,  // 76: NoName.GetAllArmorCategory:output_type -> armor_category.GetAllArmorCategoryResponse
	77,  // 77: NoName.GetWeaponByID:output_type -> weapon.GetWeaponByIDResponse
	78,  // 78: NoName.FindWeaponByName:output_type -> weapon.FindWeaponByNameResponse
	79,  // 79: NoName.UpdateWeapon:output_type -> weapon.UpdateWeaponResponse
	80,  // 80: NoName.GetPlayerWeapons:output_type -> weapon.GetPlayerWeaponsResponse
	81,  // 81: NoName.GetPlayerWeaponEquipped:output_type -> weapon.GetPlayerWeaponEquippedResponse
	82,  // 82: NoName.GetAllWeaponCategory:output_type -> weapon_category.GetAllWeaponCategoryResponse
	83,  // 83: NoName.GetPlayerByID:output_type -> player.GetPlayerByIDResponse
	84,  // 84: NoName.GetPlayerByUsername:output_type -> player.GetPlayerByUsernameResponse
	85,  // 85: NoName.GetPlayerStats:output_type -> player.GetPlayerStatsResponse
	86,  // 86: NoName.GetPlayerResources:output_type -> player.GetPlayerResourcesResponse
	87,  // 87: NoName.GetPlayerItems:output_type -> player.GetPlayerItemsResponse
	88,  // 88: NoName.GetPlayerEconomy:output_type -> player.GetPlayerEconomyResponse
	89,  // 89: NoName.ManagePlayerInventory:output_type -> player.ManagePlayerInventoryResponse
	90,  // 90: NoName.CreatePlayerPosition:output_type -> player_position.CreatePlayerPositionResponse
	91,  // 91: NoName.GetPlayerCurrentPlanet:output_type -> player_position.GetPlayerCurrentPlanetResponse
	92,  // 92: NoName.CountPlanetVisited:output_type -> player_position.CountPlanetVisitedResponse
	93,  // 93: NoName.CountSystemVisited:output_type -> player_position.CountSystemVisitedResponse
	94,  // 94: NoName.CountPlayerVisitedCurrentPlanet:output_type -> player_position.CountPlayerVisitedCurrentPlanetResponse
	95,  // 95: NoName.GetRestsInfo:output_type -> player.GetRestsInfoResponse
	96,  // 96: NoName.EndPlayerRest:output_type -> player.EndPlayerRestResponse
	97,  // 97: NoName.SignIn:output_type -> player.SignInResponse
	98,  // 98: NoName.GetPlayerStateByID:output_type -> player_state.GetPlayerStateByIDResponse
	99,  // 99: NoName.GetActivePlayerStates:output_type -> player_state.GetActivePlayerStatesResponse
	100, // 100: NoName.GetPlayerStateToNotify:output_type -> player_state.GetPlayerStateToNotifyResponse
	101, // 101: NoName.CreatePlayerState:output_type -> player_state.CreatePlayerStateResponse
	102, // 102: NoName.UpdatePlayerState:output_type -> player_state.UpdatePlayerStateResponse
	103, // 103: NoName.DeletePlayerState:output_type -> player_state.DeletePlayerStateResponse
	104, // 104: NoName.GetEnemyByID:output_type -> enemy.GetEnemyByIDResponse
	105, // 105: NoName.HitEnemy:output_type -> enemy.HitEnemyResponse
	106, // 106: NoName.GetTitanByID:output_type -> titan.GetTitanByIDResponse
	107, // 107: NoName.GetTitanByName:output_type -> titan.GetTitanByNameResponse
	108, // 108: NoName.GetTitanByPlanetID:output_type -> titan.GetTitanByPlanetIDResponse
	109, // 109: NoName.HitTitan:output_type -> titan.HitTitanResponse
	110, // 110: NoName.TitanDiscovered:output_type -> titan.TitanDiscoveredResponse
	111, // 111: NoName.FindLanguageBySlug:output_type -> language.FindLanguageBySlugResponse
	112, // 112: NoName.FindLanguageByName:output_type -> language.FindLanguageByNameResponse
	113, // 113: NoName.GetAllLanguages:output_type -> language.GetAllLanguagesResponse
	114, // 114: NoName.GetAllNPC:output_type -> npc.GetAllNPCResponse
	115, // 115: NoName.CraftArmor:output_type -> npc.CraftArmorResponse
	116, // 116: NoName.CraftWeapon:output_type -> npc.CraftWeaponResponse
	117, // 117: NoName.BankDeposit:output_type -> npc.BankDepositResponse
	118, // 118: NoName.BankWithdraw:output_type -> npc.BankWithdrawResponse
	119, // 119: NoName.GetPlanetByID:output_type -> planet.GetPlanetByIDResponse
	120, // 120: NoName.GetPlanetByCoordinate:output_type -> planet.GetPlanetByCoordinateResponse
	121, // 121: NoName.GetPlanetByMapID:output_type -> planet.GetPlanetByMapIDResponse
	122, // 122: NoName.GetMapByID:output_type -> maps.GetMapByIDResponse
	123, // 123: NoName.GetResourceByID:output_type -> resource.GetResourceByIDResponse
	124, // 124: NoName.GetResourceByName:output_type -> resource.GetResourceByNameResponse
	125, // 125: NoName.DropResource:output_type -> resource.DropResourceResponse
	126, // 126: NoName.GetAllItems:output_type -> item.GetAllItemsResponse
	127, // 127: NoName.GetItemsByCategoryID:output_type -> item.GetItemsByCategoryIDResponse
	128, // 128: NoName.UseItem:output_type -> item.UseItemResponse
	129, // 129: NoName.GetAllItemCategories:output_type -> item_category.GetAllItemCategoriesResponse
	130, // 130: NoName.GetShipRepairInfo:output_type -> ship.GetShipRepairInfoResponse
	131, // 131: NoName.StartShipRepair:output_type -> ship.StartShipRepairResponse
	132, // 132: NoName.EndShipRepair:output_type -> ship.EndShipRepairResponse
	133, // 133: NoName.GetShipTravelInfo:output_type -> ship.GetShipTravelInfoResponse
	134, // 134: NoName.EndShipTravel:output_type -> ship.EndShipTravelResponse
	135, // 135: NoName.GetPlayerShips:output_type -> ship.GetPlayerShipsResponse
	136, // 136: NoName.GetPlayerShipEquipped:output_type -> ship.GetPlayerShipEquippedResponse
	137, // 137: NoName.CreateTransaction:output_type -> transaction.CreateTransactionResponse
	138, // 138: NoName.DropTresure:output_type -> tresure.DropTresureResponse
	139, // 139: NoName.GetMission:output_type -> mission.GetMissionResponse
	140, // 140: NoName.CheckMission:output_type -> mission.CheckMissionResponse
	141, // 141: NoName.GetMissionReward:output_type -> mission.GetMissionRewardResponse
	71,  // [71:142] is the sub-list for method output_type
	0,   // [0:71] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_noname_proto_init() }
func file_rpc_noname_proto_init() {
	if File_rpc_noname_proto != nil {
		return
	}
	file_rpc_armor_proto_init()
	file_rpc_armor_category_proto_init()
	file_rpc_weapon_proto_init()
	file_rpc_weapon_category_proto_init()
	file_rpc_player_proto_init()
	file_rpc_player_state_proto_init()
	file_rpc_player_position_proto_init()
	file_rpc_enemy_proto_init()
	file_rpc_item_proto_init()
	file_rpc_item_category_proto_init()
	file_rpc_language_proto_init()
	file_rpc_maps_proto_init()
	file_rpc_npc_proto_init()
	file_rpc_planet_proto_init()
	file_rpc_resource_proto_init()
	file_rpc_ship_proto_init()
	file_rpc_transaction_proto_init()
	file_rpc_tresure_proto_init()
	file_rpc_mission_proto_init()
	file_rpc_titan_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_noname_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_noname_proto_goTypes,
		DependencyIndexes: file_rpc_noname_proto_depIdxs,
	}.Build()
	File_rpc_noname_proto = out.File
	file_rpc_noname_proto_rawDesc = nil
	file_rpc_noname_proto_goTypes = nil
	file_rpc_noname_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoNameClient is the client API for NoName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoNameClient interface {
	// Armor
	GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error)
	FindArmorByName(ctx context.Context, in *FindArmorByNameRequest, opts ...grpc.CallOption) (*FindArmorByNameResponse, error)
	UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error)
	GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error)
	GetPlayerArmorsEquipped(ctx context.Context, in *GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*GetPlayerArmorsEquippedResponse, error)
	// ArmorCategory
	GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error)
	// Weapon
	GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error)
	FindWeaponByName(ctx context.Context, in *FindWeaponByNameRequest, opts ...grpc.CallOption) (*FindWeaponByNameResponse, error)
	UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponResponse, error)
	GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error)
	// WeaponCategory
	GetAllWeaponCategory(ctx context.Context, in *GetAllWeaponCategoryRequest, opts ...grpc.CallOption) (*GetAllWeaponCategoryResponse, error)
	// Player
	GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error)
	GetPlayerStats(ctx context.Context, in *GetPlayerStatsRequest, opts ...grpc.CallOption) (*GetPlayerStatsResponse, error)
	GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error)
	GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error)
	ManagePlayerInventory(ctx context.Context, in *ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*ManagePlayerInventoryResponse, error)
	// PlayerPosition
	CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(ctx context.Context, in *CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*CountPlayerVisitedCurrentPlanetResponse, error)
	// Rests
	GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error)
	EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error)
	// SignIn
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(ctx context.Context, in *GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(ctx context.Context, in *GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(ctx context.Context, in *GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(ctx context.Context, in *CreatePlayerStateRequest, opts ...grpc.CallOption) (*CreatePlayerStateResponse, error)
	UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateRequest, opts ...grpc.CallOption) (*UpdatePlayerStateResponse, error)
	DeletePlayerState(ctx context.Context, in *DeletePlayerStateRequest, opts ...grpc.CallOption) (*DeletePlayerStateResponse, error)
	// Enemy
	GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error)
	HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error)
	GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error)
	HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error)
	TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error)
	// Language
	FindLanguageBySlug(ctx context.Context, in *FindLanguageBySlugRequest, opts ...grpc.CallOption) (*FindLanguageBySlugResponse, error)
	FindLanguageByName(ctx context.Context, in *FindLanguageByNameRequest, opts ...grpc.CallOption) (*FindLanguageByNameResponse, error)
	GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error)
	// NPC - Crafter
	CraftArmor(ctx context.Context, in *CraftArmorRequest, opts ...grpc.CallOption) (*CraftArmorResponse, error)
	CraftWeapon(ctx context.Context, in *CraftWeaponRequest, opts ...grpc.CallOption) (*CraftWeaponResponse, error)
	// NPC - Banck
	BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error)
	BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error)
	GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error)
	// Map
	GetMapByID(ctx context.Context, in *GetMapByIDRequest, opts ...grpc.CallOption) (*GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error)
	GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error)
	DropResource(ctx context.Context, in *DropResourceRequest, opts ...grpc.CallOption) (*DropResourceResponse, error)
	// Item
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error)
	UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error)
	StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error)
	EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error)
	GetShipTravelInfo(ctx context.Context, in *GetShipTravelInfoRequest, opts ...grpc.CallOption) (*GetShipTravelInfoResponse, error)
	EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error)
	GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// Tresure
	DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error)
	// Mission
	GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error)
	CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error)
	GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error)
}

type noNameClient struct {
	cc grpc.ClientConnInterface
}

func NewNoNameClient(cc grpc.ClientConnInterface) NoNameClient {
	return &noNameClient{cc}
}

func (c *noNameClient) GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error) {
	out := new(GetArmorByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindArmorByName(ctx context.Context, in *FindArmorByNameRequest, opts ...grpc.CallOption) (*FindArmorByNameResponse, error) {
	out := new(FindArmorByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindArmorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error) {
	out := new(UpdateArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error) {
	out := new(GetPlayerArmorsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorsEquipped(ctx context.Context, in *GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*GetPlayerArmorsEquippedResponse, error) {
	out := new(GetPlayerArmorsEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorsEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error) {
	out := new(GetAllArmorCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllArmorCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error) {
	out := new(GetWeaponByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetWeaponByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindWeaponByName(ctx context.Context, in *FindWeaponByNameRequest, opts ...grpc.CallOption) (*FindWeaponByNameResponse, error) {
	out := new(FindWeaponByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindWeaponByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponResponse, error) {
	out := new(UpdateWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error) {
	out := new(GetPlayerWeaponsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeapons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error) {
	out := new(GetPlayerWeaponEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeaponEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllWeaponCategory(ctx context.Context, in *GetAllWeaponCategoryRequest, opts ...grpc.CallOption) (*GetAllWeaponCategoryResponse, error) {
	out := new(GetAllWeaponCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllWeaponCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error) {
	out := new(GetPlayerByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error) {
	out := new(GetPlayerByUsernameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStats(ctx context.Context, in *GetPlayerStatsRequest, opts ...grpc.CallOption) (*GetPlayerStatsResponse, error) {
	out := new(GetPlayerStatsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error) {
	out := new(GetPlayerResourcesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error) {
	out := new(GetPlayerItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error) {
	out := new(GetPlayerEconomyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerEconomy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ManagePlayerInventory(ctx context.Context, in *ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*ManagePlayerInventoryResponse, error) {
	out := new(ManagePlayerInventoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/ManagePlayerInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error) {
	out := new(CreatePlayerPositionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error) {
	out := new(GetPlayerCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error) {
	out := new(CountPlanetVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlanetVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error) {
	out := new(CountSystemVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountSystemVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlayerVisitedCurrentPlanet(ctx context.Context, in *CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*CountPlayerVisitedCurrentPlanetResponse, error) {
	out := new(CountPlayerVisitedCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlayerVisitedCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error) {
	out := new(GetRestsInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRestsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error) {
	out := new(EndPlayerRestResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndPlayerRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/NoName/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateByID(ctx context.Context, in *GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*GetPlayerStateByIDResponse, error) {
	out := new(GetPlayerStateByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetActivePlayerStates(ctx context.Context, in *GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*GetActivePlayerStatesResponse, error) {
	out := new(GetActivePlayerStatesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetActivePlayerStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateToNotify(ctx context.Context, in *GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerStateToNotifyResponse, error) {
	out := new(GetPlayerStateToNotifyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerState(ctx context.Context, in *CreatePlayerStateRequest, opts ...grpc.CallOption) (*CreatePlayerStateResponse, error) {
	out := new(CreatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateRequest, opts ...grpc.CallOption) (*UpdatePlayerStateResponse, error) {
	out := new(UpdatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeletePlayerState(ctx context.Context, in *DeletePlayerStateRequest, opts ...grpc.CallOption) (*DeletePlayerStateResponse, error) {
	out := new(DeletePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeletePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error) {
	out := new(GetEnemyByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetEnemyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error) {
	out := new(HitEnemyResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error) {
	out := new(GetTitanByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error) {
	out := new(GetTitanByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error) {
	out := new(GetTitanByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error) {
	out := new(HitTitanResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitTitan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error) {
	out := new(TitanDiscoveredResponse)
	err := c.cc.Invoke(ctx, "/NoName/TitanDiscovered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindLanguageBySlug(ctx context.Context, in *FindLanguageBySlugRequest, opts ...grpc.CallOption) (*FindLanguageBySlugResponse, error) {
	out := new(FindLanguageBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindLanguageBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindLanguageByName(ctx context.Context, in *FindLanguageByNameRequest, opts ...grpc.CallOption) (*FindLanguageByNameResponse, error) {
	out := new(FindLanguageByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindLanguageByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error) {
	out := new(GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error) {
	out := new(GetAllNPCResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllNPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CraftArmor(ctx context.Context, in *CraftArmorRequest, opts ...grpc.CallOption) (*CraftArmorResponse, error) {
	out := new(CraftArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/CraftArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CraftWeapon(ctx context.Context, in *CraftWeaponRequest, opts ...grpc.CallOption) (*CraftWeaponResponse, error) {
	out := new(CraftWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/CraftWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error) {
	out := new(BankDepositResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error) {
	out := new(BankWithdrawResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error) {
	out := new(GetPlanetByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error) {
	out := new(GetPlanetByCoordinateResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error) {
	out := new(GetPlanetByMapIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByMapID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMapByID(ctx context.Context, in *GetMapByIDRequest, opts ...grpc.CallOption) (*GetMapByIDResponse, error) {
	out := new(GetMapByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error) {
	out := new(GetResourceByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error) {
	out := new(GetResourceByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropResource(ctx context.Context, in *DropResourceRequest, opts ...grpc.CallOption) (*DropResourceResponse, error) {
	out := new(DropResourceResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error) {
	out := new(GetItemsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetItemsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error) {
	out := new(UseItemResponse)
	err := c.cc.Invoke(ctx, "/NoName/UseItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error) {
	out := new(GetAllItemCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItemCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error) {
	out := new(GetShipRepairInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipRepairInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error) {
	out := new(StartShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error) {
	out := new(EndShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipTravelInfo(ctx context.Context, in *GetShipTravelInfoRequest, opts ...grpc.CallOption) (*GetShipTravelInfoResponse, error) {
	out := new(GetShipTravelInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipTravelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error) {
	out := new(EndShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error) {
	out := new(GetPlayerShipsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error) {
	out := new(GetPlayerShipEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShipEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error) {
	out := new(DropTresureResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropTresure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error) {
	out := new(GetMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error) {
	out := new(CheckMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error) {
	out := new(GetMissionRewardResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMissionReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoNameServer is the server API for NoName service.
type NoNameServer interface {
	// Armor
	GetArmorByID(context.Context, *GetArmorByIDRequest) (*GetArmorByIDResponse, error)
	FindArmorByName(context.Context, *FindArmorByNameRequest) (*FindArmorByNameResponse, error)
	UpdateArmor(context.Context, *UpdateArmorRequest) (*UpdateArmorResponse, error)
	GetPlayerArmors(context.Context, *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error)
	GetPlayerArmorsEquipped(context.Context, *GetPlayerArmorsEquippedRequest) (*GetPlayerArmorsEquippedResponse, error)
	// ArmorCategory
	GetAllArmorCategory(context.Context, *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error)
	// Weapon
	GetWeaponByID(context.Context, *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error)
	FindWeaponByName(context.Context, *FindWeaponByNameRequest) (*FindWeaponByNameResponse, error)
	UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponResponse, error)
	GetPlayerWeapons(context.Context, *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(context.Context, *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error)
	// WeaponCategory
	GetAllWeaponCategory(context.Context, *GetAllWeaponCategoryRequest) (*GetAllWeaponCategoryResponse, error)
	// Player
	GetPlayerByID(context.Context, *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(context.Context, *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error)
	GetPlayerStats(context.Context, *GetPlayerStatsRequest) (*GetPlayerStatsResponse, error)
	GetPlayerResources(context.Context, *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(context.Context, *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error)
	GetPlayerEconomy(context.Context, *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error)
	ManagePlayerInventory(context.Context, *ManagePlayerInventoryRequest) (*ManagePlayerInventoryResponse, error)
	// PlayerPosition
	CreatePlayerPosition(context.Context, *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(context.Context, *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(context.Context, *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(context.Context, *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(context.Context, *CountPlayerVisitedCurrentPlanetRequest) (*CountPlayerVisitedCurrentPlanetResponse, error)
	// Rests
	GetRestsInfo(context.Context, *GetRestsInfoRequest) (*GetRestsInfoResponse, error)
	EndPlayerRest(context.Context, *EndPlayerRestRequest) (*EndPlayerRestResponse, error)
	// SignIn
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(context.Context, *GetPlayerStateByIDRequest) (*GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(context.Context, *GetActivePlayerStatesRequest) (*GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(context.Context, *GetPlayerStateToNotifyRequest) (*GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(context.Context, *CreatePlayerStateRequest) (*CreatePlayerStateResponse, error)
	UpdatePlayerState(context.Context, *UpdatePlayerStateRequest) (*UpdatePlayerStateResponse, error)
	DeletePlayerState(context.Context, *DeletePlayerStateRequest) (*DeletePlayerStateResponse, error)
	// Enemy
	GetEnemyByID(context.Context, *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error)
	HitEnemy(context.Context, *HitEnemyRequest) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(context.Context, *GetTitanByIDRequest) (*GetTitanByIDResponse, error)
	GetTitanByName(context.Context, *GetTitanByNameRequest) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(context.Context, *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error)
	HitTitan(context.Context, *HitTitanRequest) (*HitTitanResponse, error)
	TitanDiscovered(context.Context, *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error)
	// Language
	FindLanguageBySlug(context.Context, *FindLanguageBySlugRequest) (*FindLanguageBySlugResponse, error)
	FindLanguageByName(context.Context, *FindLanguageByNameRequest) (*FindLanguageByNameResponse, error)
	GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(context.Context, *GetAllNPCRequest) (*GetAllNPCResponse, error)
	// NPC - Crafter
	CraftArmor(context.Context, *CraftArmorRequest) (*CraftArmorResponse, error)
	CraftWeapon(context.Context, *CraftWeaponRequest) (*CraftWeaponResponse, error)
	// NPC - Banck
	BankDeposit(context.Context, *BankDepositRequest) (*BankDepositResponse, error)
	BankWithdraw(context.Context, *BankWithdrawRequest) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(context.Context, *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error)
	GetPlanetByCoordinate(context.Context, *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(context.Context, *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error)
	// Map
	GetMapByID(context.Context, *GetMapByIDRequest) (*GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(context.Context, *GetResourceByIDRequest) (*GetResourceByIDResponse, error)
	GetResourceByName(context.Context, *GetResourceByNameRequest) (*GetResourceByNameResponse, error)
	DropResource(context.Context, *DropResourceRequest) (*DropResourceResponse, error)
	// Item
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	GetItemsByCategoryID(context.Context, *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error)
	UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(context.Context, *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(context.Context, *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error)
	StartShipRepair(context.Context, *StartShipRepairRequest) (*StartShipRepairResponse, error)
	EndShipRepair(context.Context, *EndShipRepairRequest) (*EndShipRepairResponse, error)
	GetShipTravelInfo(context.Context, *GetShipTravelInfoRequest) (*GetShipTravelInfoResponse, error)
	EndShipTravel(context.Context, *EndShipTravelRequest) (*EndShipTravelResponse, error)
	GetPlayerShips(context.Context, *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(context.Context, *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// Tresure
	DropTresure(context.Context, *DropTresureRequest) (*DropTresureResponse, error)
	// Mission
	GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error)
	CheckMission(context.Context, *CheckMissionRequest) (*CheckMissionResponse, error)
	GetMissionReward(context.Context, *GetMissionRewardRequest) (*GetMissionRewardResponse, error)
}

// UnimplementedNoNameServer can be embedded to have forward compatible implementations.
type UnimplementedNoNameServer struct {
}

func (*UnimplementedNoNameServer) GetArmorByID(context.Context, *GetArmorByIDRequest) (*GetArmorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByID not implemented")
}
func (*UnimplementedNoNameServer) FindArmorByName(context.Context, *FindArmorByNameRequest) (*FindArmorByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArmorByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateArmor(context.Context, *UpdateArmorRequest) (*UpdateArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArmor not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmors(context.Context, *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmors not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorsEquipped(context.Context, *GetPlayerArmorsEquippedRequest) (*GetPlayerArmorsEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorsEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetAllArmorCategory(context.Context, *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArmorCategory not implemented")
}
func (*UnimplementedNoNameServer) GetWeaponByID(context.Context, *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByID not implemented")
}
func (*UnimplementedNoNameServer) FindWeaponByName(context.Context, *FindWeaponByNameRequest) (*FindWeaponByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWeaponByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeapon not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeapons(context.Context, *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeapons not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeaponEquipped(context.Context, *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeaponEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetAllWeaponCategory(context.Context, *GetAllWeaponCategoryRequest) (*GetAllWeaponCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWeaponCategory not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByID(context.Context, *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByUsername(context.Context, *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByUsername not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStats(context.Context, *GetPlayerStatsRequest) (*GetPlayerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStats not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerResources(context.Context, *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerResources not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerItems(context.Context, *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItems not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerEconomy(context.Context, *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEconomy not implemented")
}
func (*UnimplementedNoNameServer) ManagePlayerInventory(context.Context, *ManagePlayerInventoryRequest) (*ManagePlayerInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagePlayerInventory not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerPosition(context.Context, *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerPosition not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerCurrentPlanet(context.Context, *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) CountPlanetVisited(context.Context, *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlanetVisited not implemented")
}
func (*UnimplementedNoNameServer) CountSystemVisited(context.Context, *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSystemVisited not implemented")
}
func (*UnimplementedNoNameServer) CountPlayerVisitedCurrentPlanet(context.Context, *CountPlayerVisitedCurrentPlanetRequest) (*CountPlayerVisitedCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlayerVisitedCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) GetRestsInfo(context.Context, *GetRestsInfoRequest) (*GetRestsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestsInfo not implemented")
}
func (*UnimplementedNoNameServer) EndPlayerRest(context.Context, *EndPlayerRestRequest) (*EndPlayerRestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPlayerRest not implemented")
}
func (*UnimplementedNoNameServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateByID(context.Context, *GetPlayerStateByIDRequest) (*GetPlayerStateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateByID not implemented")
}
func (*UnimplementedNoNameServer) GetActivePlayerStates(context.Context, *GetActivePlayerStatesRequest) (*GetActivePlayerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlayerStates not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateToNotify(context.Context, *GetPlayerStateToNotifyRequest) (*GetPlayerStateToNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateToNotify not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerState(context.Context, *CreatePlayerStateRequest) (*CreatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) UpdatePlayerState(context.Context, *UpdatePlayerStateRequest) (*UpdatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) DeletePlayerState(context.Context, *DeletePlayerStateRequest) (*DeletePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerState not implemented")
}
func (*UnimplementedNoNameServer) GetEnemyByID(context.Context, *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemyByID not implemented")
}
func (*UnimplementedNoNameServer) HitEnemy(context.Context, *HitEnemyRequest) (*HitEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitEnemy not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByID(context.Context, *GetTitanByIDRequest) (*GetTitanByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByID not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByName(context.Context, *GetTitanByNameRequest) (*GetTitanByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByName not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByPlanetID(context.Context, *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) HitTitan(context.Context, *HitTitanRequest) (*HitTitanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitTitan not implemented")
}
func (*UnimplementedNoNameServer) TitanDiscovered(context.Context, *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitanDiscovered not implemented")
}
func (*UnimplementedNoNameServer) FindLanguageBySlug(context.Context, *FindLanguageBySlugRequest) (*FindLanguageBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLanguageBySlug not implemented")
}
func (*UnimplementedNoNameServer) FindLanguageByName(context.Context, *FindLanguageByNameRequest) (*FindLanguageByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLanguageByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (*UnimplementedNoNameServer) GetAllNPC(context.Context, *GetAllNPCRequest) (*GetAllNPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNPC not implemented")
}
func (*UnimplementedNoNameServer) CraftArmor(context.Context, *CraftArmorRequest) (*CraftArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CraftArmor not implemented")
}
func (*UnimplementedNoNameServer) CraftWeapon(context.Context, *CraftWeaponRequest) (*CraftWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CraftWeapon not implemented")
}
func (*UnimplementedNoNameServer) BankDeposit(context.Context, *BankDepositRequest) (*BankDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankDeposit not implemented")
}
func (*UnimplementedNoNameServer) BankWithdraw(context.Context, *BankWithdrawRequest) (*BankWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankWithdraw not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByID(context.Context, *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByCoordinate(context.Context, *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByCoordinate not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByMapID(context.Context, *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByMapID not implemented")
}
func (*UnimplementedNoNameServer) GetMapByID(context.Context, *GetMapByIDRequest) (*GetMapByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByID(context.Context, *GetResourceByIDRequest) (*GetResourceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByName(context.Context, *GetResourceByNameRequest) (*GetResourceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByName not implemented")
}
func (*UnimplementedNoNameServer) DropResource(context.Context, *DropResourceRequest) (*DropResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropResource not implemented")
}
func (*UnimplementedNoNameServer) GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (*UnimplementedNoNameServer) GetItemsByCategoryID(context.Context, *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (*UnimplementedNoNameServer) GetAllItemCategories(context.Context, *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemCategories not implemented")
}
func (*UnimplementedNoNameServer) GetShipRepairInfo(context.Context, *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipRepairInfo not implemented")
}
func (*UnimplementedNoNameServer) StartShipRepair(context.Context, *StartShipRepairRequest) (*StartShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartShipRepair not implemented")
}
func (*UnimplementedNoNameServer) EndShipRepair(context.Context, *EndShipRepairRequest) (*EndShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipRepair not implemented")
}
func (*UnimplementedNoNameServer) GetShipTravelInfo(context.Context, *GetShipTravelInfoRequest) (*GetShipTravelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipTravelInfo not implemented")
}
func (*UnimplementedNoNameServer) EndShipTravel(context.Context, *EndShipTravelRequest) (*EndShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipTravel not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShips(context.Context, *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShips not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShipEquipped(context.Context, *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShipEquipped not implemented")
}
func (*UnimplementedNoNameServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedNoNameServer) DropTresure(context.Context, *DropTresureRequest) (*DropTresureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTresure not implemented")
}
func (*UnimplementedNoNameServer) GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (*UnimplementedNoNameServer) CheckMission(context.Context, *CheckMissionRequest) (*CheckMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMission not implemented")
}
func (*UnimplementedNoNameServer) GetMissionReward(context.Context, *GetMissionRewardRequest) (*GetMissionRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionReward not implemented")
}

func RegisterNoNameServer(s *grpc.Server, srv NoNameServer) {
	s.RegisterService(&_NoName_serviceDesc, srv)
}

func _NoName_GetArmorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByID(ctx, req.(*GetArmorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindArmorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArmorByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindArmorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindArmorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindArmorByName(ctx, req.(*FindArmorByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateArmor(ctx, req.(*UpdateArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmors(ctx, req.(*GetPlayerArmorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorsEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorsEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, req.(*GetPlayerArmorsEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllArmorCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllArmorCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllArmorCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, req.(*GetAllArmorCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetWeaponByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetWeaponByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetWeaponByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetWeaponByID(ctx, req.(*GetWeaponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindWeaponByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWeaponByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindWeaponByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindWeaponByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindWeaponByName(ctx, req.(*FindWeaponByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateWeapon(ctx, req.(*UpdateWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeapons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeapons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, req.(*GetPlayerWeaponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeaponEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeaponEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, req.(*GetPlayerWeaponEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllWeaponCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWeaponCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllWeaponCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllWeaponCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllWeaponCategory(ctx, req.(*GetAllWeaponCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByID(ctx, req.(*GetPlayerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, req.(*GetPlayerByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStats(ctx, req.(*GetPlayerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerResources(ctx, req.(*GetPlayerResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerItems(ctx, req.(*GetPlayerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerEconomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEconomyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerEconomy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, req.(*GetPlayerEconomyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ManagePlayerInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagePlayerInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ManagePlayerInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, req.(*ManagePlayerInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, req.(*CreatePlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, req.(*GetPlayerCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlanetVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlanetVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlanetVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlanetVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlanetVisited(ctx, req.(*CountPlanetVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountSystemVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSystemVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountSystemVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountSystemVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountSystemVisited(ctx, req.(*CountSystemVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlayerVisitedCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlayerVisitedCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlayerVisitedCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, req.(*CountPlayerVisitedCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRestsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRestsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRestsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRestsInfo(ctx, req.(*GetRestsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndPlayerRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPlayerRestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndPlayerRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndPlayerRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndPlayerRest(ctx, req.(*EndPlayerRestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, req.(*GetPlayerStateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetActivePlayerStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePlayerStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetActivePlayerStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, req.(*GetActivePlayerStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateToNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, req.(*GetPlayerStateToNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerState(ctx, req.(*CreatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdatePlayerState(ctx, req.(*UpdatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeletePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeletePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeletePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeletePlayerState(ctx, req.(*DeletePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetEnemyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnemyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetEnemyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetEnemyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetEnemyByID(ctx, req.(*GetEnemyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitEnemy(ctx, req.(*HitEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByID(ctx, req.(*GetTitanByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByName(ctx, req.(*GetTitanByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, req.(*GetTitanByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitTitan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitTitanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitTitan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitTitan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitTitan(ctx, req.(*HitTitanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_TitanDiscovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitanDiscoveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).TitanDiscovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/TitanDiscovered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).TitanDiscovered(ctx, req.(*TitanDiscoveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindLanguageBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLanguageBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindLanguageBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindLanguageBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindLanguageBySlug(ctx, req.(*FindLanguageBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindLanguageByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLanguageByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindLanguageByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindLanguageByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindLanguageByName(ctx, req.(*FindLanguageByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllLanguages(ctx, req.(*GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllNPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllNPC(ctx, req.(*GetAllNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CraftArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CraftArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CraftArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CraftArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CraftArmor(ctx, req.(*CraftArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CraftWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CraftWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CraftWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CraftWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CraftWeapon(ctx, req.(*CraftWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankDeposit(ctx, req.(*BankDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankWithdraw(ctx, req.(*BankWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByID(ctx, req.(*GetPlanetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByCoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, req.(*GetPlanetByCoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByMapID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByMapIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByMapID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, req.(*GetPlanetByMapIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMapByID(ctx, req.(*GetMapByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByID(ctx, req.(*GetResourceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByName(ctx, req.(*GetResourceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropResource(ctx, req.(*DropResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetItemsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetItemsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, req.(*GetItemsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UseItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UseItem(ctx, req.(*UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItemCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItemCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItemCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItemCategories(ctx, req.(*GetAllItemCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipRepairInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipRepairInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipRepairInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, req.(*GetShipRepairInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartShipRepair(ctx, req.(*StartShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipRepair(ctx, req.(*EndShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipTravelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipTravelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipTravelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, req.(*GetShipTravelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipTravel(ctx, req.(*EndShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShips(ctx, req.(*GetPlayerShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShipEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShipEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, req.(*GetPlayerShipEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropTresure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTresureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropTresure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropTresure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropTresure(ctx, req.(*DropTresureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMission(ctx, req.(*GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckMission(ctx, req.(*CheckMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMissionReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMissionReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMissionReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMissionReward(ctx, req.(*GetMissionRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NoName",
	HandlerType: (*NoNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArmorByID",
			Handler:    _NoName_GetArmorByID_Handler,
		},
		{
			MethodName: "FindArmorByName",
			Handler:    _NoName_FindArmorByName_Handler,
		},
		{
			MethodName: "UpdateArmor",
			Handler:    _NoName_UpdateArmor_Handler,
		},
		{
			MethodName: "GetPlayerArmors",
			Handler:    _NoName_GetPlayerArmors_Handler,
		},
		{
			MethodName: "GetPlayerArmorsEquipped",
			Handler:    _NoName_GetPlayerArmorsEquipped_Handler,
		},
		{
			MethodName: "GetAllArmorCategory",
			Handler:    _NoName_GetAllArmorCategory_Handler,
		},
		{
			MethodName: "GetWeaponByID",
			Handler:    _NoName_GetWeaponByID_Handler,
		},
		{
			MethodName: "FindWeaponByName",
			Handler:    _NoName_FindWeaponByName_Handler,
		},
		{
			MethodName: "UpdateWeapon",
			Handler:    _NoName_UpdateWeapon_Handler,
		},
		{
			MethodName: "GetPlayerWeapons",
			Handler:    _NoName_GetPlayerWeapons_Handler,
		},
		{
			MethodName: "GetPlayerWeaponEquipped",
			Handler:    _NoName_GetPlayerWeaponEquipped_Handler,
		},
		{
			MethodName: "GetAllWeaponCategory",
			Handler:    _NoName_GetAllWeaponCategory_Handler,
		},
		{
			MethodName: "GetPlayerByID",
			Handler:    _NoName_GetPlayerByID_Handler,
		},
		{
			MethodName: "GetPlayerByUsername",
			Handler:    _NoName_GetPlayerByUsername_Handler,
		},
		{
			MethodName: "GetPlayerStats",
			Handler:    _NoName_GetPlayerStats_Handler,
		},
		{
			MethodName: "GetPlayerResources",
			Handler:    _NoName_GetPlayerResources_Handler,
		},
		{
			MethodName: "GetPlayerItems",
			Handler:    _NoName_GetPlayerItems_Handler,
		},
		{
			MethodName: "GetPlayerEconomy",
			Handler:    _NoName_GetPlayerEconomy_Handler,
		},
		{
			MethodName: "ManagePlayerInventory",
			Handler:    _NoName_ManagePlayerInventory_Handler,
		},
		{
			MethodName: "CreatePlayerPosition",
			Handler:    _NoName_CreatePlayerPosition_Handler,
		},
		{
			MethodName: "GetPlayerCurrentPlanet",
			Handler:    _NoName_GetPlayerCurrentPlanet_Handler,
		},
		{
			MethodName: "CountPlanetVisited",
			Handler:    _NoName_CountPlanetVisited_Handler,
		},
		{
			MethodName: "CountSystemVisited",
			Handler:    _NoName_CountSystemVisited_Handler,
		},
		{
			MethodName: "CountPlayerVisitedCurrentPlanet",
			Handler:    _NoName_CountPlayerVisitedCurrentPlanet_Handler,
		},
		{
			MethodName: "GetRestsInfo",
			Handler:    _NoName_GetRestsInfo_Handler,
		},
		{
			MethodName: "EndPlayerRest",
			Handler:    _NoName_EndPlayerRest_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _NoName_SignIn_Handler,
		},
		{
			MethodName: "GetPlayerStateByID",
			Handler:    _NoName_GetPlayerStateByID_Handler,
		},
		{
			MethodName: "GetActivePlayerStates",
			Handler:    _NoName_GetActivePlayerStates_Handler,
		},
		{
			MethodName: "GetPlayerStateToNotify",
			Handler:    _NoName_GetPlayerStateToNotify_Handler,
		},
		{
			MethodName: "CreatePlayerState",
			Handler:    _NoName_CreatePlayerState_Handler,
		},
		{
			MethodName: "UpdatePlayerState",
			Handler:    _NoName_UpdatePlayerState_Handler,
		},
		{
			MethodName: "DeletePlayerState",
			Handler:    _NoName_DeletePlayerState_Handler,
		},
		{
			MethodName: "GetEnemyByID",
			Handler:    _NoName_GetEnemyByID_Handler,
		},
		{
			MethodName: "HitEnemy",
			Handler:    _NoName_HitEnemy_Handler,
		},
		{
			MethodName: "GetTitanByID",
			Handler:    _NoName_GetTitanByID_Handler,
		},
		{
			MethodName: "GetTitanByName",
			Handler:    _NoName_GetTitanByName_Handler,
		},
		{
			MethodName: "GetTitanByPlanetID",
			Handler:    _NoName_GetTitanByPlanetID_Handler,
		},
		{
			MethodName: "HitTitan",
			Handler:    _NoName_HitTitan_Handler,
		},
		{
			MethodName: "TitanDiscovered",
			Handler:    _NoName_TitanDiscovered_Handler,
		},
		{
			MethodName: "FindLanguageBySlug",
			Handler:    _NoName_FindLanguageBySlug_Handler,
		},
		{
			MethodName: "FindLanguageByName",
			Handler:    _NoName_FindLanguageByName_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _NoName_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetAllNPC",
			Handler:    _NoName_GetAllNPC_Handler,
		},
		{
			MethodName: "CraftArmor",
			Handler:    _NoName_CraftArmor_Handler,
		},
		{
			MethodName: "CraftWeapon",
			Handler:    _NoName_CraftWeapon_Handler,
		},
		{
			MethodName: "BankDeposit",
			Handler:    _NoName_BankDeposit_Handler,
		},
		{
			MethodName: "BankWithdraw",
			Handler:    _NoName_BankWithdraw_Handler,
		},
		{
			MethodName: "GetPlanetByID",
			Handler:    _NoName_GetPlanetByID_Handler,
		},
		{
			MethodName: "GetPlanetByCoordinate",
			Handler:    _NoName_GetPlanetByCoordinate_Handler,
		},
		{
			MethodName: "GetPlanetByMapID",
			Handler:    _NoName_GetPlanetByMapID_Handler,
		},
		{
			MethodName: "GetMapByID",
			Handler:    _NoName_GetMapByID_Handler,
		},
		{
			MethodName: "GetResourceByID",
			Handler:    _NoName_GetResourceByID_Handler,
		},
		{
			MethodName: "GetResourceByName",
			Handler:    _NoName_GetResourceByName_Handler,
		},
		{
			MethodName: "DropResource",
			Handler:    _NoName_DropResource_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _NoName_GetAllItems_Handler,
		},
		{
			MethodName: "GetItemsByCategoryID",
			Handler:    _NoName_GetItemsByCategoryID_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _NoName_UseItem_Handler,
		},
		{
			MethodName: "GetAllItemCategories",
			Handler:    _NoName_GetAllItemCategories_Handler,
		},
		{
			MethodName: "GetShipRepairInfo",
			Handler:    _NoName_GetShipRepairInfo_Handler,
		},
		{
			MethodName: "StartShipRepair",
			Handler:    _NoName_StartShipRepair_Handler,
		},
		{
			MethodName: "EndShipRepair",
			Handler:    _NoName_EndShipRepair_Handler,
		},
		{
			MethodName: "GetShipTravelInfo",
			Handler:    _NoName_GetShipTravelInfo_Handler,
		},
		{
			MethodName: "EndShipTravel",
			Handler:    _NoName_EndShipTravel_Handler,
		},
		{
			MethodName: "GetPlayerShips",
			Handler:    _NoName_GetPlayerShips_Handler,
		},
		{
			MethodName: "GetPlayerShipEquipped",
			Handler:    _NoName_GetPlayerShipEquipped_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _NoName_CreateTransaction_Handler,
		},
		{
			MethodName: "DropTresure",
			Handler:    _NoName_DropTresure_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _NoName_GetMission_Handler,
		},
		{
			MethodName: "CheckMission",
			Handler:    _NoName_CheckMission_Handler,
		},
		{
			MethodName: "GetMissionReward",
			Handler:    _NoName_GetMissionReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/noname.proto",
}
