// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/player_rank.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlayerRank struct {
	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PointNeeded uint32 `protobuf:"varint,2,opt,name=PointNeeded,proto3" json:"PointNeeded,omitempty"`
	NameCode    string `protobuf:"bytes,3,opt,name=NameCode,proto3" json:"NameCode,omitempty"`
}

func (m *PlayerRank) Reset()         { *m = PlayerRank{} }
func (m *PlayerRank) String() string { return proto.CompactTextString(m) }
func (*PlayerRank) ProtoMessage()    {}
func (*PlayerRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a9093f644490b8, []int{0}
}
func (m *PlayerRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRank.Merge(m, src)
}
func (m *PlayerRank) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRank) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRank.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRank proto.InternalMessageInfo

func (m *PlayerRank) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PlayerRank) GetPointNeeded() uint32 {
	if m != nil {
		return m.PointNeeded
	}
	return 0
}

func (m *PlayerRank) GetNameCode() string {
	if m != nil {
		return m.NameCode
	}
	return ""
}

func init() {
	proto.RegisterType((*PlayerRank)(nil), "player_rank.PlayerRank")
}

func init() { proto.RegisterFile("proto/player_rank.proto", fileDescriptor_28a9093f644490b8) }

var fileDescriptor_28a9093f644490b8 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xc8, 0x49, 0xac, 0x4c, 0x2d, 0x8a, 0x2f, 0x4a, 0xcc, 0xcb, 0xd6, 0x03, 0x8b,
	0x08, 0x71, 0x23, 0x09, 0x29, 0x45, 0x71, 0x71, 0x05, 0x80, 0xb9, 0x41, 0x89, 0x79, 0xd9, 0x42,
	0x7c, 0x5c, 0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x4c, 0x9e, 0x2e, 0x42,
	0x0a, 0x5c, 0xdc, 0x01, 0xf9, 0x99, 0x79, 0x25, 0x7e, 0xa9, 0xa9, 0x29, 0xa9, 0x29, 0x12, 0x4c,
	0x60, 0x09, 0x64, 0x21, 0x21, 0x29, 0x2e, 0x0e, 0xbf, 0xc4, 0xdc, 0x54, 0xe7, 0xfc, 0x94, 0x54,
	0x09, 0x66, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x38, 0xdf, 0x49, 0xee, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x58, 0xf4, 0xac, 0x0b, 0x92, 0x92, 0xd8, 0xc0, 0xee, 0x31, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x74, 0xbb, 0xcb, 0x23, 0xaa, 0x00, 0x00, 0x00,
}

func (m *PlayerRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameCode) > 0 {
		i -= len(m.NameCode)
		copy(dAtA[i:], m.NameCode)
		i = encodeVarintPlayerRank(dAtA, i, uint64(len(m.NameCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PointNeeded != 0 {
		i = encodeVarintPlayerRank(dAtA, i, uint64(m.PointNeeded))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPlayerRank(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayerRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlayerRank(uint64(m.ID))
	}
	if m.PointNeeded != 0 {
		n += 1 + sovPlayerRank(uint64(m.PointNeeded))
	}
	l = len(m.NameCode)
	if l > 0 {
		n += 1 + l + sovPlayerRank(uint64(l))
	}
	return n
}

func sovPlayerRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerRank(x uint64) (n int) {
	return sovPlayerRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointNeeded", wireType)
			}
			m.PointNeeded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointNeeded |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerRank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerRank = fmt.Errorf("proto: unexpected end of group")
)
