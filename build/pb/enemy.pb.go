// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/enemy.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Enemy struct {
	ID          uint32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PlanetMapID uint32  `protobuf:"varint,3,opt,name=PlanetMapID,proto3" json:"PlanetMapID,omitempty"`
	PositionX   int32   `protobuf:"varint,4,opt,name=PositionX,proto3" json:"PositionX,omitempty"`
	PositionY   int32   `protobuf:"varint,5,opt,name=PositionY,proto3" json:"PositionY,omitempty"`
	RarityID    uint32  `protobuf:"varint,6,opt,name=RarityID,proto3" json:"RarityID,omitempty"`
	Rarity      *Rarity `protobuf:"bytes,7,opt,name=Rarity,proto3" json:"Rarity,omitempty"`
	LifeMax     uint32  `protobuf:"varint,8,opt,name=LifeMax,proto3" json:"LifeMax,omitempty"`
	LifePoint   int32   `protobuf:"varint,9,opt,name=LifePoint,proto3" json:"LifePoint,omitempty"`
}

func (m *Enemy) Reset()         { *m = Enemy{} }
func (m *Enemy) String() string { return proto.CompactTextString(m) }
func (*Enemy) ProtoMessage()    {}
func (*Enemy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e02d401b3484f9a, []int{0}
}
func (m *Enemy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enemy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enemy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enemy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enemy.Merge(m, src)
}
func (m *Enemy) XXX_Size() int {
	return m.Size()
}
func (m *Enemy) XXX_DiscardUnknown() {
	xxx_messageInfo_Enemy.DiscardUnknown(m)
}

var xxx_messageInfo_Enemy proto.InternalMessageInfo

func (m *Enemy) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Enemy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Enemy) GetPlanetMapID() uint32 {
	if m != nil {
		return m.PlanetMapID
	}
	return 0
}

func (m *Enemy) GetPositionX() int32 {
	if m != nil {
		return m.PositionX
	}
	return 0
}

func (m *Enemy) GetPositionY() int32 {
	if m != nil {
		return m.PositionY
	}
	return 0
}

func (m *Enemy) GetRarityID() uint32 {
	if m != nil {
		return m.RarityID
	}
	return 0
}

func (m *Enemy) GetRarity() *Rarity {
	if m != nil {
		return m.Rarity
	}
	return nil
}

func (m *Enemy) GetLifeMax() uint32 {
	if m != nil {
		return m.LifeMax
	}
	return 0
}

func (m *Enemy) GetLifePoint() int32 {
	if m != nil {
		return m.LifePoint
	}
	return 0
}

// GetEnemyByID
type GetEnemyByIDRequest struct {
	EnemyID uint32 `protobuf:"varint,1,opt,name=EnemyID,proto3" json:"EnemyID,omitempty"`
}

func (m *GetEnemyByIDRequest) Reset()         { *m = GetEnemyByIDRequest{} }
func (m *GetEnemyByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetEnemyByIDRequest) ProtoMessage()    {}
func (*GetEnemyByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e02d401b3484f9a, []int{1}
}
func (m *GetEnemyByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEnemyByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEnemyByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEnemyByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEnemyByIDRequest.Merge(m, src)
}
func (m *GetEnemyByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEnemyByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEnemyByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEnemyByIDRequest proto.InternalMessageInfo

func (m *GetEnemyByIDRequest) GetEnemyID() uint32 {
	if m != nil {
		return m.EnemyID
	}
	return 0
}

type GetEnemyByIDResponse struct {
	Enemy *Enemy `protobuf:"bytes,1,opt,name=Enemy,proto3" json:"Enemy,omitempty"`
}

func (m *GetEnemyByIDResponse) Reset()         { *m = GetEnemyByIDResponse{} }
func (m *GetEnemyByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetEnemyByIDResponse) ProtoMessage()    {}
func (*GetEnemyByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e02d401b3484f9a, []int{2}
}
func (m *GetEnemyByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEnemyByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEnemyByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEnemyByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEnemyByIDResponse.Merge(m, src)
}
func (m *GetEnemyByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetEnemyByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEnemyByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEnemyByIDResponse proto.InternalMessageInfo

func (m *GetEnemyByIDResponse) GetEnemy() *Enemy {
	if m != nil {
		return m.Enemy
	}
	return nil
}

// HitEnemy
type HitEnemyRequest struct {
	EnemyID       uint32 `protobuf:"varint,1,opt,name=EnemyID,proto3" json:"EnemyID,omitempty"`
	PlayerID      uint32 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	BodySelection int32  `protobuf:"varint,3,opt,name=BodySelection,proto3" json:"BodySelection,omitempty"`
	AbilityID     uint32 `protobuf:"varint,4,opt,name=AbilityID,proto3" json:"AbilityID,omitempty"`
}

func (m *HitEnemyRequest) Reset()         { *m = HitEnemyRequest{} }
func (m *HitEnemyRequest) String() string { return proto.CompactTextString(m) }
func (*HitEnemyRequest) ProtoMessage()    {}
func (*HitEnemyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e02d401b3484f9a, []int{3}
}
func (m *HitEnemyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HitEnemyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HitEnemyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HitEnemyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HitEnemyRequest.Merge(m, src)
}
func (m *HitEnemyRequest) XXX_Size() int {
	return m.Size()
}
func (m *HitEnemyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HitEnemyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HitEnemyRequest proto.InternalMessageInfo

func (m *HitEnemyRequest) GetEnemyID() uint32 {
	if m != nil {
		return m.EnemyID
	}
	return 0
}

func (m *HitEnemyRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *HitEnemyRequest) GetBodySelection() int32 {
	if m != nil {
		return m.BodySelection
	}
	return 0
}

func (m *HitEnemyRequest) GetAbilityID() uint32 {
	if m != nil {
		return m.AbilityID
	}
	return 0
}

type HitEnemyResponse struct {
	PlayerDie        bool                 `protobuf:"varint,1,opt,name=PlayerDie,proto3" json:"PlayerDie,omitempty"`
	EnemyDie         bool                 `protobuf:"varint,2,opt,name=EnemyDie,proto3" json:"EnemyDie,omitempty"`
	EnemyDodge       bool                 `protobuf:"varint,3,opt,name=EnemyDodge,proto3" json:"EnemyDodge,omitempty"`
	PlayerDamage     int32                `protobuf:"varint,4,opt,name=PlayerDamage,proto3" json:"PlayerDamage,omitempty"`
	PlayerExperience int32                `protobuf:"varint,5,opt,name=PlayerExperience,proto3" json:"PlayerExperience,omitempty"`
	EnemyDamage      int32                `protobuf:"varint,6,opt,name=EnemyDamage,proto3" json:"EnemyDamage,omitempty"`
	EnemyDrop        *DropTresureResponse `protobuf:"bytes,7,opt,name=EnemyDrop,proto3" json:"EnemyDrop,omitempty"`
	PlayerDodge      bool                 `protobuf:"varint,8,opt,name=PlayerDodge,proto3" json:"PlayerDodge,omitempty"`
}

func (m *HitEnemyResponse) Reset()         { *m = HitEnemyResponse{} }
func (m *HitEnemyResponse) String() string { return proto.CompactTextString(m) }
func (*HitEnemyResponse) ProtoMessage()    {}
func (*HitEnemyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e02d401b3484f9a, []int{4}
}
func (m *HitEnemyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HitEnemyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HitEnemyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HitEnemyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HitEnemyResponse.Merge(m, src)
}
func (m *HitEnemyResponse) XXX_Size() int {
	return m.Size()
}
func (m *HitEnemyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HitEnemyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HitEnemyResponse proto.InternalMessageInfo

func (m *HitEnemyResponse) GetPlayerDie() bool {
	if m != nil {
		return m.PlayerDie
	}
	return false
}

func (m *HitEnemyResponse) GetEnemyDie() bool {
	if m != nil {
		return m.EnemyDie
	}
	return false
}

func (m *HitEnemyResponse) GetEnemyDodge() bool {
	if m != nil {
		return m.EnemyDodge
	}
	return false
}

func (m *HitEnemyResponse) GetPlayerDamage() int32 {
	if m != nil {
		return m.PlayerDamage
	}
	return 0
}

func (m *HitEnemyResponse) GetPlayerExperience() int32 {
	if m != nil {
		return m.PlayerExperience
	}
	return 0
}

func (m *HitEnemyResponse) GetEnemyDamage() int32 {
	if m != nil {
		return m.EnemyDamage
	}
	return 0
}

func (m *HitEnemyResponse) GetEnemyDrop() *DropTresureResponse {
	if m != nil {
		return m.EnemyDrop
	}
	return nil
}

func (m *HitEnemyResponse) GetPlayerDodge() bool {
	if m != nil {
		return m.PlayerDodge
	}
	return false
}

func init() {
	proto.RegisterType((*Enemy)(nil), "enemy.Enemy")
	proto.RegisterType((*GetEnemyByIDRequest)(nil), "enemy.GetEnemyByIDRequest")
	proto.RegisterType((*GetEnemyByIDResponse)(nil), "enemy.GetEnemyByIDResponse")
	proto.RegisterType((*HitEnemyRequest)(nil), "enemy.HitEnemyRequest")
	proto.RegisterType((*HitEnemyResponse)(nil), "enemy.HitEnemyResponse")
}

func init() { proto.RegisterFile("proto/enemy.proto", fileDescriptor_7e02d401b3484f9a) }

var fileDescriptor_7e02d401b3484f9a = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x6b, 0x13, 0xa7, 0xce, 0xa4, 0x29, 0x65, 0xcb, 0x61, 0x15, 0x55, 0x96, 0x65, 0x21,
	0x14, 0x71, 0x70, 0xa5, 0x72, 0x2b, 0x27, 0x22, 0x57, 0x60, 0x89, 0xa2, 0x68, 0xe1, 0x40, 0xb9,
	0x39, 0xed, 0x50, 0xad, 0x94, 0x78, 0x8d, 0xed, 0x4a, 0xcd, 0x03, 0x70, 0xe2, 0xc2, 0x03, 0xf1,
	0x00, 0x1c, 0x7b, 0xe4, 0x88, 0x92, 0x17, 0x41, 0x3b, 0xbb, 0xb1, 0x1d, 0x71, 0xe0, 0x36, 0xf3,
	0xfd, 0xb3, 0xb3, 0x33, 0xb3, 0xb3, 0xf0, 0xa4, 0x28, 0x55, 0xad, 0x4e, 0x31, 0xc7, 0xe5, 0x2a,
	0x26, 0x9b, 0x79, 0xe4, 0x8c, 0x99, 0x51, 0xca, 0xac, 0x94, 0xb5, 0x95, 0xc6, 0xc7, 0x86, 0xd5,
	0x25, 0x56, 0x77, 0x25, 0x1a, 0x18, 0x7d, 0x73, 0xc1, 0xbb, 0xd0, 0x47, 0xd8, 0x21, 0xb8, 0x69,
	0xc2, 0x9d, 0xd0, 0x99, 0x8c, 0x84, 0x9b, 0x26, 0x8c, 0x41, 0xef, 0x7d, 0xb6, 0x44, 0xee, 0x86,
	0xce, 0x64, 0x20, 0xc8, 0x66, 0x21, 0x0c, 0x67, 0x8b, 0x2c, 0xc7, 0xfa, 0x32, 0x2b, 0xd2, 0x84,
	0x3f, 0xa2, 0xe0, 0x2e, 0x62, 0x27, 0x30, 0x98, 0xa9, 0x4a, 0xd6, 0x52, 0xe5, 0x9f, 0x78, 0x2f,
	0x74, 0x26, 0x9e, 0x68, 0x41, 0x57, 0xbd, 0xe2, 0xde, 0xae, 0x7a, 0xc5, 0xc6, 0xe0, 0x0b, 0x2a,
	0x38, 0x4d, 0x78, 0x9f, 0x52, 0x37, 0x3e, 0x7b, 0x0e, 0x7d, 0x63, 0xf3, 0xfd, 0xd0, 0x99, 0x0c,
	0xcf, 0x0e, 0x63, 0xdb, 0x9b, 0xa1, 0xc2, 0xaa, 0x8c, 0xc3, 0xfe, 0x3b, 0xf9, 0x05, 0x2f, 0xb3,
	0x7b, 0xee, 0x53, 0x8a, 0xad, 0xab, 0xef, 0xd6, 0xe6, 0x4c, 0xc9, 0xbc, 0xe6, 0x03, 0x73, 0x77,
	0x03, 0xa2, 0x53, 0x38, 0x7e, 0x83, 0x35, 0x4d, 0x62, 0xba, 0x4a, 0x13, 0x81, 0x5f, 0xef, 0xb0,
	0xaa, 0x75, 0x3a, 0x62, 0xcd, 0x64, 0xb6, 0x6e, 0x74, 0x0e, 0x4f, 0x77, 0x0f, 0x54, 0x85, 0xca,
	0x2b, 0x64, 0x91, 0x9d, 0x27, 0xc5, 0x0f, 0xcf, 0x0e, 0x62, 0xf3, 0x3a, 0xc4, 0x84, 0x91, 0xa2,
	0xef, 0x0e, 0x3c, 0x7e, 0x2b, 0xcd, 0xe1, 0xff, 0xde, 0xa4, 0xc7, 0x32, 0x5b, 0x64, 0x2b, 0x2c,
	0xd3, 0x84, 0x1e, 0x63, 0x24, 0x1a, 0x9f, 0x3d, 0x83, 0xd1, 0x54, 0xdd, 0xac, 0x3e, 0xe0, 0x02,
	0xaf, 0xf5, 0x10, 0xe9, 0x49, 0x3c, 0xb1, 0x0b, 0x75, 0xeb, 0xaf, 0xe7, 0x72, 0x61, 0x26, 0xdb,
	0xa3, 0x14, 0x2d, 0x88, 0x7e, 0xba, 0x70, 0xd4, 0x56, 0x63, 0xdb, 0xd0, 0x2f, 0x45, 0x97, 0x24,
	0x12, 0xa9, 0x20, 0x5f, 0xb4, 0x40, 0x97, 0x44, 0xe1, 0x5a, 0x74, 0x49, 0x6c, 0x7c, 0x16, 0x00,
	0x18, 0x5b, 0xdd, 0xdc, 0x22, 0xd5, 0xe3, 0x8b, 0x0e, 0x61, 0x11, 0x1c, 0xd8, 0x44, 0xd9, 0x32,
	0xbb, 0x45, 0xbb, 0x24, 0x3b, 0x8c, 0xbd, 0x80, 0x23, 0xe3, 0x5f, 0xdc, 0x17, 0x58, 0x4a, 0xcc,
	0xaf, 0xd1, 0xae, 0xcb, 0x3f, 0x5c, 0xef, 0xa4, 0xc9, 0x6e, 0xd2, 0xf5, 0x29, 0xac, 0x8b, 0xd8,
	0x39, 0x0c, 0x8c, 0x5b, 0xaa, 0xc2, 0xae, 0xcf, 0x49, 0xbc, 0xfd, 0x06, 0x1a, 0x7e, 0x34, 0xf6,
	0xb6, 0x79, 0xd1, 0x86, 0xdb, 0x8d, 0xd7, 0x95, 0x51, 0x3b, 0x3e, 0xb5, 0xd3, 0x45, 0xd3, 0xe0,
	0xd7, 0x3a, 0x70, 0x1e, 0xd6, 0x81, 0xf3, 0x67, 0x1d, 0x38, 0x3f, 0x36, 0xc1, 0xde, 0xc3, 0x26,
	0xd8, 0xfb, 0xbd, 0x09, 0xf6, 0x3e, 0xf7, 0xe2, 0x57, 0xc5, 0x7c, 0xde, 0xa7, 0x8f, 0xf6, 0xf2,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x43, 0x2d, 0x81, 0xad, 0x03, 0x00, 0x00,
}

func (m *Enemy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enemy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enemy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LifePoint != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.LifePoint))
		i--
		dAtA[i] = 0x48
	}
	if m.LifeMax != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.LifeMax))
		i--
		dAtA[i] = 0x40
	}
	if m.Rarity != nil {
		{
			size, err := m.Rarity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnemy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RarityID != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.RarityID))
		i--
		dAtA[i] = 0x30
	}
	if m.PositionY != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.PositionY))
		i--
		dAtA[i] = 0x28
	}
	if m.PositionX != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.PositionX))
		i--
		dAtA[i] = 0x20
	}
	if m.PlanetMapID != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.PlanetMapID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEnemy(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEnemyByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEnemyByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEnemyByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnemyID != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.EnemyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEnemyByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEnemyByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEnemyByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enemy != nil {
		{
			size, err := m.Enemy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnemy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HitEnemyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HitEnemyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HitEnemyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AbilityID != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.AbilityID))
		i--
		dAtA[i] = 0x20
	}
	if m.BodySelection != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.BodySelection))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.EnemyID != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.EnemyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HitEnemyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HitEnemyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HitEnemyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerDodge {
		i--
		if m.PlayerDodge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.EnemyDrop != nil {
		{
			size, err := m.EnemyDrop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnemy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.EnemyDamage != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.EnemyDamage))
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerExperience != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.PlayerExperience))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerDamage != 0 {
		i = encodeVarintEnemy(dAtA, i, uint64(m.PlayerDamage))
		i--
		dAtA[i] = 0x20
	}
	if m.EnemyDodge {
		i--
		if m.EnemyDodge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EnemyDie {
		i--
		if m.EnemyDie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerDie {
		i--
		if m.PlayerDie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnemy(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnemy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Enemy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEnemy(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEnemy(uint64(l))
	}
	if m.PlanetMapID != 0 {
		n += 1 + sovEnemy(uint64(m.PlanetMapID))
	}
	if m.PositionX != 0 {
		n += 1 + sovEnemy(uint64(m.PositionX))
	}
	if m.PositionY != 0 {
		n += 1 + sovEnemy(uint64(m.PositionY))
	}
	if m.RarityID != 0 {
		n += 1 + sovEnemy(uint64(m.RarityID))
	}
	if m.Rarity != nil {
		l = m.Rarity.Size()
		n += 1 + l + sovEnemy(uint64(l))
	}
	if m.LifeMax != 0 {
		n += 1 + sovEnemy(uint64(m.LifeMax))
	}
	if m.LifePoint != 0 {
		n += 1 + sovEnemy(uint64(m.LifePoint))
	}
	return n
}

func (m *GetEnemyByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnemyID != 0 {
		n += 1 + sovEnemy(uint64(m.EnemyID))
	}
	return n
}

func (m *GetEnemyByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enemy != nil {
		l = m.Enemy.Size()
		n += 1 + l + sovEnemy(uint64(l))
	}
	return n
}

func (m *HitEnemyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnemyID != 0 {
		n += 1 + sovEnemy(uint64(m.EnemyID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovEnemy(uint64(m.PlayerID))
	}
	if m.BodySelection != 0 {
		n += 1 + sovEnemy(uint64(m.BodySelection))
	}
	if m.AbilityID != 0 {
		n += 1 + sovEnemy(uint64(m.AbilityID))
	}
	return n
}

func (m *HitEnemyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerDie {
		n += 2
	}
	if m.EnemyDie {
		n += 2
	}
	if m.EnemyDodge {
		n += 2
	}
	if m.PlayerDamage != 0 {
		n += 1 + sovEnemy(uint64(m.PlayerDamage))
	}
	if m.PlayerExperience != 0 {
		n += 1 + sovEnemy(uint64(m.PlayerExperience))
	}
	if m.EnemyDamage != 0 {
		n += 1 + sovEnemy(uint64(m.EnemyDamage))
	}
	if m.EnemyDrop != nil {
		l = m.EnemyDrop.Size()
		n += 1 + l + sovEnemy(uint64(l))
	}
	if m.PlayerDodge {
		n += 2
	}
	return n
}

func sovEnemy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnemy(x uint64) (n int) {
	return sovEnemy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Enemy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnemy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enemy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enemy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnemy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnemy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetMapID", wireType)
			}
			m.PlanetMapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetMapID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionX", wireType)
			}
			m.PositionX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionY", wireType)
			}
			m.PositionY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RarityID", wireType)
			}
			m.RarityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RarityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnemy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnemy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rarity == nil {
				m.Rarity = &Rarity{}
			}
			if err := m.Rarity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeMax", wireType)
			}
			m.LifeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifeMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifePoint", wireType)
			}
			m.LifePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifePoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnemy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEnemyByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnemy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEnemyByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEnemyByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyID", wireType)
			}
			m.EnemyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnemyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnemy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEnemyByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnemy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEnemyByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEnemyByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnemy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnemy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enemy == nil {
				m.Enemy = &Enemy{}
			}
			if err := m.Enemy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnemy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HitEnemyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnemy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HitEnemyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HitEnemyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyID", wireType)
			}
			m.EnemyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnemyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodySelection", wireType)
			}
			m.BodySelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodySelection |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			m.AbilityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnemy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HitEnemyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnemy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HitEnemyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HitEnemyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDie = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyDie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnemyDie = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyDodge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnemyDodge = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDamage", wireType)
			}
			m.PlayerDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDamage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerExperience", wireType)
			}
			m.PlayerExperience = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerExperience |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyDamage", wireType)
			}
			m.EnemyDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnemyDamage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyDrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnemy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnemy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnemyDrop == nil {
				m.EnemyDrop = &DropTresureResponse{}
			}
			if err := m.EnemyDrop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDodge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDodge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEnemy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnemy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnemy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnemy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnemy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnemy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnemy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnemy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnemy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnemy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnemy = fmt.Errorf("proto: unexpected end of group")
)
