// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/party.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Party struct {
	ID      uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OwnerID uint32 `protobuf:"varint,2,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
}

func (m *Party) Reset()         { *m = Party{} }
func (m *Party) String() string { return proto.CompactTextString(m) }
func (*Party) ProtoMessage()    {}
func (*Party) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{0}
}
func (m *Party) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Party) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Party.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Party) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Party.Merge(m, src)
}
func (m *Party) XXX_Size() int {
	return m.Size()
}
func (m *Party) XXX_DiscardUnknown() {
	xxx_messageInfo_Party.DiscardUnknown(m)
}

var xxx_messageInfo_Party proto.InternalMessageInfo

func (m *Party) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Party) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

// GetPartyDetails
type GetPartyDetailsRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPartyDetailsRequest) Reset()         { *m = GetPartyDetailsRequest{} }
func (m *GetPartyDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPartyDetailsRequest) ProtoMessage()    {}
func (*GetPartyDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{1}
}
func (m *GetPartyDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartyDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartyDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartyDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartyDetailsRequest.Merge(m, src)
}
func (m *GetPartyDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPartyDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartyDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartyDetailsRequest proto.InternalMessageInfo

func (m *GetPartyDetailsRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPartyDetailsResponse struct {
	PartyID  uint32    `protobuf:"varint,1,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
	InParty  bool      `protobuf:"varint,2,opt,name=InParty,proto3" json:"InParty,omitempty"`
	Owner    *Player   `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	NPlayers int32     `protobuf:"varint,4,opt,name=NPlayers,proto3" json:"NPlayers,omitempty"`
	Players  []*Player `protobuf:"bytes,5,rep,name=Players,proto3" json:"Players,omitempty"`
}

func (m *GetPartyDetailsResponse) Reset()         { *m = GetPartyDetailsResponse{} }
func (m *GetPartyDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPartyDetailsResponse) ProtoMessage()    {}
func (*GetPartyDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{2}
}
func (m *GetPartyDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartyDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartyDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartyDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartyDetailsResponse.Merge(m, src)
}
func (m *GetPartyDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPartyDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartyDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartyDetailsResponse proto.InternalMessageInfo

func (m *GetPartyDetailsResponse) GetPartyID() uint32 {
	if m != nil {
		return m.PartyID
	}
	return 0
}

func (m *GetPartyDetailsResponse) GetInParty() bool {
	if m != nil {
		return m.InParty
	}
	return false
}

func (m *GetPartyDetailsResponse) GetOwner() *Player {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetPartyDetailsResponse) GetNPlayers() int32 {
	if m != nil {
		return m.NPlayers
	}
	return 0
}

func (m *GetPartyDetailsResponse) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

// CreateParty
type CreatePartyRequest struct {
	OwnerID uint32 `protobuf:"varint,1,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
}

func (m *CreatePartyRequest) Reset()         { *m = CreatePartyRequest{} }
func (m *CreatePartyRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePartyRequest) ProtoMessage()    {}
func (*CreatePartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{3}
}
func (m *CreatePartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePartyRequest.Merge(m, src)
}
func (m *CreatePartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePartyRequest proto.InternalMessageInfo

func (m *CreatePartyRequest) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

type CreatePartyResponse struct {
}

func (m *CreatePartyResponse) Reset()         { *m = CreatePartyResponse{} }
func (m *CreatePartyResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePartyResponse) ProtoMessage()    {}
func (*CreatePartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{4}
}
func (m *CreatePartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePartyResponse.Merge(m, src)
}
func (m *CreatePartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePartyResponse proto.InternalMessageInfo

// AddPlayerToParty
type AddPlayerToPartyRequest struct {
	PlayerUsername string `protobuf:"bytes,1,opt,name=PlayerUsername,proto3" json:"PlayerUsername,omitempty"`
	PartyID        uint32 `protobuf:"varint,2,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
}

func (m *AddPlayerToPartyRequest) Reset()         { *m = AddPlayerToPartyRequest{} }
func (m *AddPlayerToPartyRequest) String() string { return proto.CompactTextString(m) }
func (*AddPlayerToPartyRequest) ProtoMessage()    {}
func (*AddPlayerToPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{5}
}
func (m *AddPlayerToPartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerToPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerToPartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerToPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerToPartyRequest.Merge(m, src)
}
func (m *AddPlayerToPartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerToPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerToPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerToPartyRequest proto.InternalMessageInfo

func (m *AddPlayerToPartyRequest) GetPlayerUsername() string {
	if m != nil {
		return m.PlayerUsername
	}
	return ""
}

func (m *AddPlayerToPartyRequest) GetPartyID() uint32 {
	if m != nil {
		return m.PartyID
	}
	return 0
}

type AddPlayerToPartyResponse struct {
}

func (m *AddPlayerToPartyResponse) Reset()         { *m = AddPlayerToPartyResponse{} }
func (m *AddPlayerToPartyResponse) String() string { return proto.CompactTextString(m) }
func (*AddPlayerToPartyResponse) ProtoMessage()    {}
func (*AddPlayerToPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{6}
}
func (m *AddPlayerToPartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerToPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerToPartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerToPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerToPartyResponse.Merge(m, src)
}
func (m *AddPlayerToPartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerToPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerToPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerToPartyResponse proto.InternalMessageInfo

// RemovePlayerToParty
type RemovePlayerToPartyRequest struct {
	PlayerUsername string `protobuf:"bytes,1,opt,name=PlayerUsername,proto3" json:"PlayerUsername,omitempty"`
	PartyID        uint32 `protobuf:"varint,2,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
}

func (m *RemovePlayerToPartyRequest) Reset()         { *m = RemovePlayerToPartyRequest{} }
func (m *RemovePlayerToPartyRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerToPartyRequest) ProtoMessage()    {}
func (*RemovePlayerToPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{7}
}
func (m *RemovePlayerToPartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerToPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerToPartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerToPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerToPartyRequest.Merge(m, src)
}
func (m *RemovePlayerToPartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerToPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerToPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerToPartyRequest proto.InternalMessageInfo

func (m *RemovePlayerToPartyRequest) GetPlayerUsername() string {
	if m != nil {
		return m.PlayerUsername
	}
	return ""
}

func (m *RemovePlayerToPartyRequest) GetPartyID() uint32 {
	if m != nil {
		return m.PartyID
	}
	return 0
}

type RemovePlayerToPartyResponse struct {
}

func (m *RemovePlayerToPartyResponse) Reset()         { *m = RemovePlayerToPartyResponse{} }
func (m *RemovePlayerToPartyResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerToPartyResponse) ProtoMessage()    {}
func (*RemovePlayerToPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{8}
}
func (m *RemovePlayerToPartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerToPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerToPartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerToPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerToPartyResponse.Merge(m, src)
}
func (m *RemovePlayerToPartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerToPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerToPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerToPartyResponse proto.InternalMessageInfo

// RemovePlayerFromParty
type RemovePlayerFromPartyRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PartyID  uint32 `protobuf:"varint,2,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
}

func (m *RemovePlayerFromPartyRequest) Reset()         { *m = RemovePlayerFromPartyRequest{} }
func (m *RemovePlayerFromPartyRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerFromPartyRequest) ProtoMessage()    {}
func (*RemovePlayerFromPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{9}
}
func (m *RemovePlayerFromPartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerFromPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerFromPartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerFromPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerFromPartyRequest.Merge(m, src)
}
func (m *RemovePlayerFromPartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerFromPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerFromPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerFromPartyRequest proto.InternalMessageInfo

func (m *RemovePlayerFromPartyRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *RemovePlayerFromPartyRequest) GetPartyID() uint32 {
	if m != nil {
		return m.PartyID
	}
	return 0
}

type RemovePlayerFromPartyResponse struct {
}

func (m *RemovePlayerFromPartyResponse) Reset()         { *m = RemovePlayerFromPartyResponse{} }
func (m *RemovePlayerFromPartyResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerFromPartyResponse) ProtoMessage()    {}
func (*RemovePlayerFromPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_075e80c25a830ba4, []int{10}
}
func (m *RemovePlayerFromPartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerFromPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerFromPartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerFromPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerFromPartyResponse.Merge(m, src)
}
func (m *RemovePlayerFromPartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerFromPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerFromPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerFromPartyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Party)(nil), "party.Party")
	proto.RegisterType((*GetPartyDetailsRequest)(nil), "party.GetPartyDetailsRequest")
	proto.RegisterType((*GetPartyDetailsResponse)(nil), "party.GetPartyDetailsResponse")
	proto.RegisterType((*CreatePartyRequest)(nil), "party.CreatePartyRequest")
	proto.RegisterType((*CreatePartyResponse)(nil), "party.CreatePartyResponse")
	proto.RegisterType((*AddPlayerToPartyRequest)(nil), "party.AddPlayerToPartyRequest")
	proto.RegisterType((*AddPlayerToPartyResponse)(nil), "party.AddPlayerToPartyResponse")
	proto.RegisterType((*RemovePlayerToPartyRequest)(nil), "party.RemovePlayerToPartyRequest")
	proto.RegisterType((*RemovePlayerToPartyResponse)(nil), "party.RemovePlayerToPartyResponse")
	proto.RegisterType((*RemovePlayerFromPartyRequest)(nil), "party.RemovePlayerFromPartyRequest")
	proto.RegisterType((*RemovePlayerFromPartyResponse)(nil), "party.RemovePlayerFromPartyResponse")
}

func init() { proto.RegisterFile("proto/party.proto", fileDescriptor_075e80c25a830ba4) }

var fileDescriptor_075e80c25a830ba4 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0xbb, 0xb4, 0xd8, 0x3a, 0xc6, 0x26, 0xae, 0xd1, 0x12, 0xb4, 0x48, 0x88, 0x31, 0x9c,
	0x30, 0xfe, 0xb9, 0x79, 0x52, 0x89, 0x86, 0x8b, 0x36, 0x9b, 0x7a, 0xd1, 0xc4, 0x84, 0xa6, 0x73,
	0x30, 0x69, 0x01, 0x17, 0xd4, 0xf4, 0x2d, 0x7c, 0x1d, 0xdf, 0xc0, 0x63, 0x8f, 0x1e, 0x4d, 0xfb,
	0x22, 0x86, 0x5d, 0x20, 0xc5, 0xd6, 0xde, 0xbc, 0xf1, 0xcd, 0xc7, 0xfc, 0xbe, 0x99, 0x09, 0xc0,
	0x46, 0xc4, 0xc3, 0x24, 0x3c, 0x8c, 0x7c, 0x9e, 0x8c, 0x1c, 0xf1, 0x4c, 0x55, 0x21, 0x74, 0x9a,
	0x39, 0x03, 0x7f, 0x84, 0x5c, 0x5a, 0xd6, 0x11, 0xa8, 0x9d, 0xd4, 0xa4, 0x4d, 0x50, 0x3c, 0x57,
	0x23, 0x26, 0xb1, 0xd7, 0x99, 0xe2, 0xb9, 0x54, 0x83, 0xfa, 0xed, 0x5b, 0x80, 0xdc, 0x73, 0x35,
	0x45, 0x14, 0x73, 0x69, 0x9d, 0xc2, 0xf6, 0x35, 0x26, 0xa2, 0xcb, 0xc5, 0xc4, 0x7f, 0x1a, 0xc4,
	0x0c, 0x9f, 0x5f, 0x30, 0x4e, 0xa8, 0x0e, 0x8d, 0x8e, 0x80, 0x17, 0xa4, 0x42, 0x5b, 0x1f, 0x04,
	0x5a, 0x73, 0x6d, 0x71, 0x14, 0x06, 0x31, 0xa6, 0x59, 0xa2, 0x5e, 0xb4, 0xe5, 0x32, 0x75, 0xbc,
	0x40, 0x08, 0x31, 0x45, 0x83, 0xe5, 0x92, 0xee, 0x83, 0x2a, 0x06, 0xd2, 0xaa, 0x26, 0xb1, 0xd7,
	0x8e, 0x9b, 0x4e, 0xb6, 0x96, 0x0c, 0x64, 0xd2, 0x4c, 0x27, 0xba, 0x91, 0x95, 0x58, 0xab, 0x99,
	0xc4, 0x56, 0x59, 0xa1, 0xa9, 0x0d, 0xf5, 0xdc, 0x52, 0xcd, 0xea, 0x02, 0x46, 0x6e, 0x5b, 0x0e,
	0xd0, 0x4b, 0x8e, 0x7e, 0x82, 0x22, 0x3a, 0xdf, 0x76, 0xe6, 0x42, 0xa4, 0x7c, 0xa1, 0x2d, 0xd8,
	0x2c, 0xbd, 0x2f, 0xd7, 0xb4, 0x1e, 0xa0, 0x75, 0xde, 0xef, 0x4b, 0x68, 0x37, 0x2c, 0xb1, 0x0e,
	0xa0, 0x29, 0xeb, 0x77, 0x31, 0xf2, 0xc0, 0x1f, 0xa2, 0x40, 0xae, 0xb2, 0x5f, 0xd5, 0xd9, 0x4b,
	0x29, 0xa5, 0x4b, 0x59, 0x3a, 0x68, 0xf3, 0xf0, 0x2c, 0xf8, 0x11, 0x74, 0x86, 0xc3, 0xf0, 0x15,
	0xff, 0x29, 0xbb, 0x0d, 0x3b, 0x0b, 0xf9, 0x59, 0x7c, 0x17, 0x76, 0x67, 0xed, 0x2b, 0x1e, 0x0e,
	0x4b, 0x03, 0x2c, 0xf9, 0x6c, 0x96, 0x84, 0xee, 0x41, 0xfb, 0x0f, 0xaa, 0x8c, 0xbd, 0x30, 0x3e,
	0x27, 0x06, 0x19, 0x4f, 0x0c, 0xf2, 0x3d, 0x31, 0xc8, 0xfb, 0xd4, 0xa8, 0x8c, 0xa7, 0x46, 0xe5,
	0x6b, 0x6a, 0x54, 0xee, 0x6b, 0xce, 0x59, 0xd4, 0xeb, 0xad, 0x88, 0x3f, 0xe0, 0xe4, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x6f, 0x0b, 0xc6, 0xee, 0x31, 0x03, 0x00, 0x00,
}

func (m *Party) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Party) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Party) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPartyDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartyDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartyDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPartyDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartyDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartyDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NPlayers != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.NPlayers))
		i--
		dAtA[i] = 0x20
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParty(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.InParty {
		i--
		if m.InParty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PartyID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.PartyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddPlayerToPartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerToPartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerToPartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartyID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.PartyID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerUsername) > 0 {
		i -= len(m.PlayerUsername)
		copy(dAtA[i:], m.PlayerUsername)
		i = encodeVarintParty(dAtA, i, uint64(len(m.PlayerUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPlayerToPartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerToPartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerToPartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemovePlayerToPartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerToPartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerToPartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartyID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.PartyID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerUsername) > 0 {
		i -= len(m.PlayerUsername)
		copy(dAtA[i:], m.PlayerUsername)
		i = encodeVarintParty(dAtA, i, uint64(len(m.PlayerUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemovePlayerToPartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerToPartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerToPartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemovePlayerFromPartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerFromPartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerFromPartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartyID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.PartyID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintParty(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemovePlayerFromPartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerFromPartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerFromPartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintParty(dAtA []byte, offset int, v uint64) int {
	offset -= sovParty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Party) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovParty(uint64(m.ID))
	}
	if m.OwnerID != 0 {
		n += 1 + sovParty(uint64(m.OwnerID))
	}
	return n
}

func (m *GetPartyDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovParty(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPartyDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartyID != 0 {
		n += 1 + sovParty(uint64(m.PartyID))
	}
	if m.InParty {
		n += 2
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovParty(uint64(l))
	}
	if m.NPlayers != 0 {
		n += 1 + sovParty(uint64(m.NPlayers))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovParty(uint64(l))
		}
	}
	return n
}

func (m *CreatePartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OwnerID != 0 {
		n += 1 + sovParty(uint64(m.OwnerID))
	}
	return n
}

func (m *CreatePartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddPlayerToPartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerUsername)
	if l > 0 {
		n += 1 + l + sovParty(uint64(l))
	}
	if m.PartyID != 0 {
		n += 1 + sovParty(uint64(m.PartyID))
	}
	return n
}

func (m *AddPlayerToPartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemovePlayerToPartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerUsername)
	if l > 0 {
		n += 1 + l + sovParty(uint64(l))
	}
	if m.PartyID != 0 {
		n += 1 + sovParty(uint64(m.PartyID))
	}
	return n
}

func (m *RemovePlayerToPartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemovePlayerFromPartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovParty(uint64(m.PlayerID))
	}
	if m.PartyID != 0 {
		n += 1 + sovParty(uint64(m.PartyID))
	}
	return n
}

func (m *RemovePlayerFromPartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovParty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParty(x uint64) (n int) {
	return sovParty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Party) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Party: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Party: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartyDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartyDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartyDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartyDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartyDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartyDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyID", wireType)
			}
			m.PartyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InParty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InParty = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Player{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NPlayers", wireType)
			}
			m.NPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NPlayers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &Player{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerToPartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerToPartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerToPartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyID", wireType)
			}
			m.PartyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerToPartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerToPartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerToPartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerToPartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerToPartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerToPartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyID", wireType)
			}
			m.PartyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerToPartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerToPartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerToPartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerFromPartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerFromPartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerFromPartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyID", wireType)
			}
			m.PartyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerFromPartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerFromPartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerFromPartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParty = fmt.Errorf("proto: unexpected end of group")
)
