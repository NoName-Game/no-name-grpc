// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/armor.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Armor struct {
	ID              uint32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name            string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	RarityID        uint32         `protobuf:"varint,3,opt,name=RarityID,proto3" json:"RarityID,omitempty"`
	Rarity          *Rarity        `protobuf:"bytes,4,opt,name=Rarity,proto3" json:"Rarity,omitempty"`
	ArmorCategoryID uint32         `protobuf:"varint,5,opt,name=ArmorCategoryID,proto3" json:"ArmorCategoryID,omitempty"`
	ArmorCategory   *ArmorCategory `protobuf:"bytes,6,opt,name=ArmorCategory,proto3" json:"ArmorCategory,omitempty"`
	PlayerID        uint32         `protobuf:"varint,7,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Equipped        bool           `protobuf:"varint,9,opt,name=Equipped,proto3" json:"Equipped,omitempty"`
	Defense         float64        `protobuf:"fixed64,10,opt,name=Defense,proto3" json:"Defense,omitempty"`
	Evasion         float64        `protobuf:"fixed64,11,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
	Halving         float64        `protobuf:"fixed64,12,opt,name=Halving,proto3" json:"Halving,omitempty"`
}

func (m *Armor) Reset()         { *m = Armor{} }
func (m *Armor) String() string { return proto.CompactTextString(m) }
func (*Armor) ProtoMessage()    {}
func (*Armor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{0}
}
func (m *Armor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Armor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Armor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Armor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Armor.Merge(m, src)
}
func (m *Armor) XXX_Size() int {
	return m.Size()
}
func (m *Armor) XXX_DiscardUnknown() {
	xxx_messageInfo_Armor.DiscardUnknown(m)
}

var xxx_messageInfo_Armor proto.InternalMessageInfo

func (m *Armor) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Armor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Armor) GetRarityID() uint32 {
	if m != nil {
		return m.RarityID
	}
	return 0
}

func (m *Armor) GetRarity() *Rarity {
	if m != nil {
		return m.Rarity
	}
	return nil
}

func (m *Armor) GetArmorCategoryID() uint32 {
	if m != nil {
		return m.ArmorCategoryID
	}
	return 0
}

func (m *Armor) GetArmorCategory() *ArmorCategory {
	if m != nil {
		return m.ArmorCategory
	}
	return nil
}

func (m *Armor) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *Armor) GetEquipped() bool {
	if m != nil {
		return m.Equipped
	}
	return false
}

func (m *Armor) GetDefense() float64 {
	if m != nil {
		return m.Defense
	}
	return 0
}

func (m *Armor) GetEvasion() float64 {
	if m != nil {
		return m.Evasion
	}
	return 0
}

func (m *Armor) GetHalving() float64 {
	if m != nil {
		return m.Halving
	}
	return 0
}

// GetArmorByID
type GetArmorByIDRequest struct {
	ArmorID uint32 `protobuf:"varint,1,opt,name=ArmorID,proto3" json:"ArmorID,omitempty"`
}

func (m *GetArmorByIDRequest) Reset()         { *m = GetArmorByIDRequest{} }
func (m *GetArmorByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetArmorByIDRequest) ProtoMessage()    {}
func (*GetArmorByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{1}
}
func (m *GetArmorByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArmorByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArmorByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArmorByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArmorByIDRequest.Merge(m, src)
}
func (m *GetArmorByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetArmorByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArmorByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArmorByIDRequest proto.InternalMessageInfo

func (m *GetArmorByIDRequest) GetArmorID() uint32 {
	if m != nil {
		return m.ArmorID
	}
	return 0
}

type GetArmorByIDResponse struct {
	Armor *Armor `protobuf:"bytes,1,opt,name=Armor,proto3" json:"Armor,omitempty"`
}

func (m *GetArmorByIDResponse) Reset()         { *m = GetArmorByIDResponse{} }
func (m *GetArmorByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetArmorByIDResponse) ProtoMessage()    {}
func (*GetArmorByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{2}
}
func (m *GetArmorByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArmorByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArmorByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArmorByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArmorByIDResponse.Merge(m, src)
}
func (m *GetArmorByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetArmorByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArmorByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetArmorByIDResponse proto.InternalMessageInfo

func (m *GetArmorByIDResponse) GetArmor() *Armor {
	if m != nil {
		return m.Armor
	}
	return nil
}

// GetArmorByName
type GetArmorByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *GetArmorByNameRequest) Reset()         { *m = GetArmorByNameRequest{} }
func (m *GetArmorByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetArmorByNameRequest) ProtoMessage()    {}
func (*GetArmorByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{3}
}
func (m *GetArmorByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArmorByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArmorByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArmorByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArmorByNameRequest.Merge(m, src)
}
func (m *GetArmorByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetArmorByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArmorByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArmorByNameRequest proto.InternalMessageInfo

func (m *GetArmorByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetArmorByNameResponse struct {
	Armor *Armor `protobuf:"bytes,1,opt,name=Armor,proto3" json:"Armor,omitempty"`
}

func (m *GetArmorByNameResponse) Reset()         { *m = GetArmorByNameResponse{} }
func (m *GetArmorByNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetArmorByNameResponse) ProtoMessage()    {}
func (*GetArmorByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{4}
}
func (m *GetArmorByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArmorByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArmorByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArmorByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArmorByNameResponse.Merge(m, src)
}
func (m *GetArmorByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetArmorByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArmorByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetArmorByNameResponse proto.InternalMessageInfo

func (m *GetArmorByNameResponse) GetArmor() *Armor {
	if m != nil {
		return m.Armor
	}
	return nil
}

// GetArmorByPlayerAndName
type GetArmorByPlayerAndNameRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PlayerID uint32 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetArmorByPlayerAndNameRequest) Reset()         { *m = GetArmorByPlayerAndNameRequest{} }
func (m *GetArmorByPlayerAndNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetArmorByPlayerAndNameRequest) ProtoMessage()    {}
func (*GetArmorByPlayerAndNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{5}
}
func (m *GetArmorByPlayerAndNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArmorByPlayerAndNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArmorByPlayerAndNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArmorByPlayerAndNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArmorByPlayerAndNameRequest.Merge(m, src)
}
func (m *GetArmorByPlayerAndNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetArmorByPlayerAndNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArmorByPlayerAndNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArmorByPlayerAndNameRequest proto.InternalMessageInfo

func (m *GetArmorByPlayerAndNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetArmorByPlayerAndNameRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetArmorByPlayerAndNameResponse struct {
	Armor *Armor `protobuf:"bytes,1,opt,name=Armor,proto3" json:"Armor,omitempty"`
}

func (m *GetArmorByPlayerAndNameResponse) Reset()         { *m = GetArmorByPlayerAndNameResponse{} }
func (m *GetArmorByPlayerAndNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetArmorByPlayerAndNameResponse) ProtoMessage()    {}
func (*GetArmorByPlayerAndNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{6}
}
func (m *GetArmorByPlayerAndNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArmorByPlayerAndNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArmorByPlayerAndNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArmorByPlayerAndNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArmorByPlayerAndNameResponse.Merge(m, src)
}
func (m *GetArmorByPlayerAndNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetArmorByPlayerAndNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArmorByPlayerAndNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetArmorByPlayerAndNameResponse proto.InternalMessageInfo

func (m *GetArmorByPlayerAndNameResponse) GetArmor() *Armor {
	if m != nil {
		return m.Armor
	}
	return nil
}

// GetPlayerArmors
type GetPlayerArmorsRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerArmorsRequest) Reset()         { *m = GetPlayerArmorsRequest{} }
func (m *GetPlayerArmorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerArmorsRequest) ProtoMessage()    {}
func (*GetPlayerArmorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{7}
}
func (m *GetPlayerArmorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorsRequest.Merge(m, src)
}
func (m *GetPlayerArmorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorsRequest proto.InternalMessageInfo

func (m *GetPlayerArmorsRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerArmorsResponse struct {
	Armors []*Armor `protobuf:"bytes,1,rep,name=Armors,proto3" json:"Armors,omitempty"`
}

func (m *GetPlayerArmorsResponse) Reset()         { *m = GetPlayerArmorsResponse{} }
func (m *GetPlayerArmorsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerArmorsResponse) ProtoMessage()    {}
func (*GetPlayerArmorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{8}
}
func (m *GetPlayerArmorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorsResponse.Merge(m, src)
}
func (m *GetPlayerArmorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorsResponse proto.InternalMessageInfo

func (m *GetPlayerArmorsResponse) GetArmors() []*Armor {
	if m != nil {
		return m.Armors
	}
	return nil
}

// GetPlayerArmorsByCategoryID
type GetPlayerArmorsByCategoryIDRequest struct {
	PlayerID   uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	CategoryID uint32 `protobuf:"varint,2,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
}

func (m *GetPlayerArmorsByCategoryIDRequest) Reset()         { *m = GetPlayerArmorsByCategoryIDRequest{} }
func (m *GetPlayerArmorsByCategoryIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerArmorsByCategoryIDRequest) ProtoMessage()    {}
func (*GetPlayerArmorsByCategoryIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{9}
}
func (m *GetPlayerArmorsByCategoryIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorsByCategoryIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorsByCategoryIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorsByCategoryIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorsByCategoryIDRequest.Merge(m, src)
}
func (m *GetPlayerArmorsByCategoryIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorsByCategoryIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorsByCategoryIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorsByCategoryIDRequest proto.InternalMessageInfo

func (m *GetPlayerArmorsByCategoryIDRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GetPlayerArmorsByCategoryIDRequest) GetCategoryID() uint32 {
	if m != nil {
		return m.CategoryID
	}
	return 0
}

type GetPlayerArmorsByCategoryIDResponse struct {
	Armors []*Armor `protobuf:"bytes,1,rep,name=Armors,proto3" json:"Armors,omitempty"`
}

func (m *GetPlayerArmorsByCategoryIDResponse) Reset()         { *m = GetPlayerArmorsByCategoryIDResponse{} }
func (m *GetPlayerArmorsByCategoryIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerArmorsByCategoryIDResponse) ProtoMessage()    {}
func (*GetPlayerArmorsByCategoryIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{10}
}
func (m *GetPlayerArmorsByCategoryIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorsByCategoryIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorsByCategoryIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorsByCategoryIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorsByCategoryIDResponse.Merge(m, src)
}
func (m *GetPlayerArmorsByCategoryIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorsByCategoryIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorsByCategoryIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorsByCategoryIDResponse proto.InternalMessageInfo

func (m *GetPlayerArmorsByCategoryIDResponse) GetArmors() []*Armor {
	if m != nil {
		return m.Armors
	}
	return nil
}

// GetPlayerArmorsEquipped
type GetPlayerArmorsEquippedRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerArmorsEquippedRequest) Reset()         { *m = GetPlayerArmorsEquippedRequest{} }
func (m *GetPlayerArmorsEquippedRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerArmorsEquippedRequest) ProtoMessage()    {}
func (*GetPlayerArmorsEquippedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{11}
}
func (m *GetPlayerArmorsEquippedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorsEquippedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorsEquippedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorsEquippedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorsEquippedRequest.Merge(m, src)
}
func (m *GetPlayerArmorsEquippedRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorsEquippedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorsEquippedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorsEquippedRequest proto.InternalMessageInfo

func (m *GetPlayerArmorsEquippedRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerArmorsEquippedResponse struct {
	Armors []*Armor `protobuf:"bytes,1,rep,name=Armors,proto3" json:"Armors,omitempty"`
}

func (m *GetPlayerArmorsEquippedResponse) Reset()         { *m = GetPlayerArmorsEquippedResponse{} }
func (m *GetPlayerArmorsEquippedResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerArmorsEquippedResponse) ProtoMessage()    {}
func (*GetPlayerArmorsEquippedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{12}
}
func (m *GetPlayerArmorsEquippedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorsEquippedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorsEquippedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorsEquippedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorsEquippedResponse.Merge(m, src)
}
func (m *GetPlayerArmorsEquippedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorsEquippedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorsEquippedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorsEquippedResponse proto.InternalMessageInfo

func (m *GetPlayerArmorsEquippedResponse) GetArmors() []*Armor {
	if m != nil {
		return m.Armors
	}
	return nil
}

// GetPlayerArmorsEquippedByCategoryID
type GetPlayerArmorEquippedByCategoryIDRequest struct {
	PlayerID   uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	CategoryID uint32 `protobuf:"varint,2,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
}

func (m *GetPlayerArmorEquippedByCategoryIDRequest) Reset() {
	*m = GetPlayerArmorEquippedByCategoryIDRequest{}
}
func (m *GetPlayerArmorEquippedByCategoryIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetPlayerArmorEquippedByCategoryIDRequest) ProtoMessage() {}
func (*GetPlayerArmorEquippedByCategoryIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{13}
}
func (m *GetPlayerArmorEquippedByCategoryIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorEquippedByCategoryIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorEquippedByCategoryIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDRequest.Merge(m, src)
}
func (m *GetPlayerArmorEquippedByCategoryIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorEquippedByCategoryIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDRequest proto.InternalMessageInfo

func (m *GetPlayerArmorEquippedByCategoryIDRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GetPlayerArmorEquippedByCategoryIDRequest) GetCategoryID() uint32 {
	if m != nil {
		return m.CategoryID
	}
	return 0
}

type GetPlayerArmorEquippedByCategoryIDResponse struct {
	Armor *Armor `protobuf:"bytes,1,opt,name=Armor,proto3" json:"Armor,omitempty"`
}

func (m *GetPlayerArmorEquippedByCategoryIDResponse) Reset() {
	*m = GetPlayerArmorEquippedByCategoryIDResponse{}
}
func (m *GetPlayerArmorEquippedByCategoryIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPlayerArmorEquippedByCategoryIDResponse) ProtoMessage() {}
func (*GetPlayerArmorEquippedByCategoryIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{14}
}
func (m *GetPlayerArmorEquippedByCategoryIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerArmorEquippedByCategoryIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerArmorEquippedByCategoryIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDResponse.Merge(m, src)
}
func (m *GetPlayerArmorEquippedByCategoryIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerArmorEquippedByCategoryIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerArmorEquippedByCategoryIDResponse proto.InternalMessageInfo

func (m *GetPlayerArmorEquippedByCategoryIDResponse) GetArmor() *Armor {
	if m != nil {
		return m.Armor
	}
	return nil
}

// EquipArmor
type EquipArmorRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	ArmorID  uint32 `protobuf:"varint,2,opt,name=ArmorID,proto3" json:"ArmorID,omitempty"`
	Equip    bool   `protobuf:"varint,3,opt,name=Equip,proto3" json:"Equip,omitempty"`
}

func (m *EquipArmorRequest) Reset()         { *m = EquipArmorRequest{} }
func (m *EquipArmorRequest) String() string { return proto.CompactTextString(m) }
func (*EquipArmorRequest) ProtoMessage()    {}
func (*EquipArmorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{15}
}
func (m *EquipArmorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipArmorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipArmorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipArmorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipArmorRequest.Merge(m, src)
}
func (m *EquipArmorRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquipArmorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipArmorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquipArmorRequest proto.InternalMessageInfo

func (m *EquipArmorRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *EquipArmorRequest) GetArmorID() uint32 {
	if m != nil {
		return m.ArmorID
	}
	return 0
}

func (m *EquipArmorRequest) GetEquip() bool {
	if m != nil {
		return m.Equip
	}
	return false
}

type EquipArmorResponse struct {
}

func (m *EquipArmorResponse) Reset()         { *m = EquipArmorResponse{} }
func (m *EquipArmorResponse) String() string { return proto.CompactTextString(m) }
func (*EquipArmorResponse) ProtoMessage()    {}
func (*EquipArmorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61c395c5c8b6d12, []int{16}
}
func (m *EquipArmorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipArmorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipArmorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipArmorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipArmorResponse.Merge(m, src)
}
func (m *EquipArmorResponse) XXX_Size() int {
	return m.Size()
}
func (m *EquipArmorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipArmorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EquipArmorResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Armor)(nil), "armor.Armor")
	proto.RegisterType((*GetArmorByIDRequest)(nil), "armor.GetArmorByIDRequest")
	proto.RegisterType((*GetArmorByIDResponse)(nil), "armor.GetArmorByIDResponse")
	proto.RegisterType((*GetArmorByNameRequest)(nil), "armor.GetArmorByNameRequest")
	proto.RegisterType((*GetArmorByNameResponse)(nil), "armor.GetArmorByNameResponse")
	proto.RegisterType((*GetArmorByPlayerAndNameRequest)(nil), "armor.GetArmorByPlayerAndNameRequest")
	proto.RegisterType((*GetArmorByPlayerAndNameResponse)(nil), "armor.GetArmorByPlayerAndNameResponse")
	proto.RegisterType((*GetPlayerArmorsRequest)(nil), "armor.GetPlayerArmorsRequest")
	proto.RegisterType((*GetPlayerArmorsResponse)(nil), "armor.GetPlayerArmorsResponse")
	proto.RegisterType((*GetPlayerArmorsByCategoryIDRequest)(nil), "armor.GetPlayerArmorsByCategoryIDRequest")
	proto.RegisterType((*GetPlayerArmorsByCategoryIDResponse)(nil), "armor.GetPlayerArmorsByCategoryIDResponse")
	proto.RegisterType((*GetPlayerArmorsEquippedRequest)(nil), "armor.GetPlayerArmorsEquippedRequest")
	proto.RegisterType((*GetPlayerArmorsEquippedResponse)(nil), "armor.GetPlayerArmorsEquippedResponse")
	proto.RegisterType((*GetPlayerArmorEquippedByCategoryIDRequest)(nil), "armor.GetPlayerArmorEquippedByCategoryIDRequest")
	proto.RegisterType((*GetPlayerArmorEquippedByCategoryIDResponse)(nil), "armor.GetPlayerArmorEquippedByCategoryIDResponse")
	proto.RegisterType((*EquipArmorRequest)(nil), "armor.EquipArmorRequest")
	proto.RegisterType((*EquipArmorResponse)(nil), "armor.EquipArmorResponse")
}

func init() { proto.RegisterFile("proto/armor.proto", fileDescriptor_b61c395c5c8b6d12) }

var fileDescriptor_b61c395c5c8b6d12 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xba, 0x49, 0x9a, 0x4e, 0xda, 0xa2, 0x2e, 0x01, 0x56, 0x91, 0x30, 0xd6, 0x82, 0x90,
	0x01, 0x29, 0x95, 0x0a, 0x27, 0xa8, 0x84, 0x9a, 0x3a, 0x2a, 0x16, 0x12, 0x8a, 0xf6, 0xc8, 0xa5,
	0xb8, 0x74, 0x89, 0x22, 0xb5, 0xb1, 0x6b, 0xbb, 0x95, 0xf2, 0x2f, 0xf8, 0x59, 0x1c, 0x7b, 0xe4,
	0x88, 0x12, 0x7e, 0x08, 0xda, 0xd9, 0x75, 0x62, 0x3b, 0x7c, 0xc4, 0x12, 0xb7, 0x9d, 0x79, 0x33,
	0xef, 0x3d, 0xcf, 0xec, 0x1a, 0xf6, 0xa2, 0x38, 0x4c, 0xc3, 0xfd, 0x20, 0xbe, 0x0c, 0xe3, 0x1e,
	0x9e, 0x69, 0x03, 0x83, 0x2e, 0xd5, 0x48, 0x1c, 0xc4, 0xe3, 0x74, 0xaa, 0xa1, 0x6e, 0x37, 0x57,
	0x7d, 0xfa, 0x39, 0x48, 0xe5, 0x28, 0x8c, 0x0d, 0xc6, 0x7f, 0x5a, 0xd0, 0x38, 0x52, 0x00, 0xdd,
	0x05, 0xcb, 0xf7, 0x18, 0x71, 0x88, 0xbb, 0x23, 0x2c, 0xdf, 0xa3, 0x14, 0xea, 0x1f, 0x82, 0x4b,
	0xc9, 0x2c, 0x87, 0xb8, 0x5b, 0x02, 0xcf, 0xb4, 0x0b, 0x2d, 0x81, 0xcc, 0xbe, 0xc7, 0x36, 0xb0,
	0x72, 0x11, 0xd3, 0xa7, 0xd0, 0xd4, 0x67, 0x56, 0x77, 0x88, 0xdb, 0x3e, 0xd8, 0xed, 0x19, 0x13,
	0x3a, 0x2b, 0x0c, 0x4a, 0x5d, 0xb8, 0x83, 0x82, 0xc7, 0xc6, 0x88, 0xef, 0xb1, 0x06, 0x52, 0x95,
	0xd3, 0xf4, 0x18, 0x76, 0x0a, 0x29, 0xd6, 0x44, 0xe2, 0x87, 0xbd, 0xd2, 0x97, 0x14, 0x8a, 0x44,
	0xb1, 0x47, 0x59, 0x1e, 0x5e, 0x04, 0x53, 0x19, 0xfb, 0x1e, 0xdb, 0xd4, 0x96, 0xb3, 0x58, 0x61,
	0x83, 0xab, 0xeb, 0x71, 0x14, 0xc9, 0x73, 0xb6, 0xe5, 0x10, 0xb7, 0x25, 0x16, 0x31, 0x65, 0xb0,
	0xe9, 0xc9, 0x2f, 0x72, 0x92, 0x48, 0x06, 0x0e, 0x71, 0x89, 0xc8, 0x42, 0x85, 0x0c, 0x6e, 0x82,
	0x64, 0x1c, 0x4e, 0x58, 0x5b, 0x23, 0x26, 0x54, 0xc8, 0xbb, 0xe0, 0xe2, 0x66, 0x3c, 0x19, 0xb1,
	0x6d, 0x8d, 0x98, 0x90, 0xef, 0xc3, 0xdd, 0x13, 0x99, 0xa2, 0xb3, 0xfe, 0xd4, 0xf7, 0x84, 0xbc,
	0xba, 0x96, 0x49, 0xaa, 0x1a, 0x30, 0xb7, 0x18, 0x7c, 0x16, 0xf2, 0xd7, 0xd0, 0x29, 0x36, 0x24,
	0x51, 0xa8, 0xc4, 0xb9, 0x59, 0x17, 0xd6, 0xb7, 0x0f, 0xb6, 0xf5, 0x2c, 0xf4, 0x08, 0x84, 0x86,
	0xf8, 0x0b, 0xb8, 0xb7, 0xec, 0x55, 0x7b, 0xcb, 0xe4, 0xb2, 0x95, 0x92, 0xe5, 0x4a, 0xf9, 0x21,
	0xdc, 0x2f, 0x17, 0x57, 0x90, 0x1a, 0x82, 0xbd, 0xec, 0xd6, 0x73, 0x3d, 0x9a, 0x9c, 0xff, 0x43,
	0xb3, 0xb0, 0x13, 0xab, 0xb8, 0x13, 0x3e, 0x80, 0x47, 0x7f, 0x64, 0xac, 0x60, 0xec, 0x15, 0x7e,
	0x96, 0xe9, 0x57, 0x99, 0x24, 0x33, 0x94, 0x17, 0x27, 0x25, 0xf1, 0xb7, 0xf0, 0x60, 0xa5, 0xcb,
	0x88, 0x3e, 0x81, 0xa6, 0xce, 0x30, 0xe2, 0x6c, 0xac, 0xa8, 0x1a, 0x8c, 0x7f, 0x02, 0x5e, 0x22,
	0xe8, 0x4f, 0x97, 0x37, 0x7a, 0x0d, 0x0b, 0xd4, 0x06, 0xc8, 0xbd, 0x0c, 0x3d, 0x9d, 0x5c, 0x86,
	0xbf, 0x87, 0xc7, 0x7f, 0x55, 0xa8, 0x64, 0xf7, 0x10, 0xd7, 0x97, 0x27, 0xcb, 0xee, 0xff, 0x3a,
	0xd3, 0x3a, 0xc1, 0x55, 0xfd, 0xbe, 0xbb, 0x92, 0x8d, 0x11, 0x3c, 0x2b, 0x12, 0x65, 0x3c, 0xff,
	0x7b, 0x78, 0x43, 0x78, 0xbe, 0x8e, 0x50, 0x85, 0x7b, 0x76, 0x0a, 0x7b, 0xc8, 0xa1, 0x93, 0x6b,
	0x58, 0xcc, 0x3d, 0x79, 0xab, 0xf0, 0xe4, 0x69, 0x07, 0x1a, 0x48, 0x85, 0x7f, 0xd6, 0x96, 0xd0,
	0x01, 0xef, 0x00, 0xcd, 0x0b, 0x68, 0x6b, 0x7d, 0xfb, 0xdb, 0xcc, 0x26, 0xb7, 0x33, 0x9b, 0xfc,
	0x98, 0xd9, 0xe4, 0xeb, 0xdc, 0xae, 0xdd, 0xce, 0xed, 0xda, 0xf7, 0xb9, 0x5d, 0xfb, 0x58, 0xef,
	0xbd, 0x89, 0xce, 0xce, 0x9a, 0xf8, 0x77, 0x7f, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x66, 0xc6,
	0xfe, 0x1c, 0x29, 0x06, 0x00, 0x00,
}

func (m *Armor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Armor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Armor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Halving != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Halving))))
		i--
		dAtA[i] = 0x61
	}
	if m.Evasion != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Evasion))))
		i--
		dAtA[i] = 0x59
	}
	if m.Defense != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Defense))))
		i--
		dAtA[i] = 0x51
	}
	if m.Equipped {
		i--
		if m.Equipped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.PlayerID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x38
	}
	if m.ArmorCategory != nil {
		{
			size, err := m.ArmorCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArmor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ArmorCategoryID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.ArmorCategoryID))
		i--
		dAtA[i] = 0x28
	}
	if m.Rarity != nil {
		{
			size, err := m.Rarity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArmor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RarityID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.RarityID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintArmor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetArmorByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmorByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArmorByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ArmorID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.ArmorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetArmorByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmorByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArmorByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Armor != nil {
		{
			size, err := m.Armor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArmor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArmorByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmorByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArmorByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintArmor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArmorByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmorByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArmorByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Armor != nil {
		{
			size, err := m.Armor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArmor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArmorByPlayerAndNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmorByPlayerAndNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArmorByPlayerAndNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintArmor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArmorByPlayerAndNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmorByPlayerAndNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArmorByPlayerAndNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Armor != nil {
		{
			size, err := m.Armor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArmor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Armors) > 0 {
		for iNdEx := len(m.Armors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Armors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArmor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorsByCategoryIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorsByCategoryIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorsByCategoryIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CategoryID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.CategoryID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorsByCategoryIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorsByCategoryIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorsByCategoryIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Armors) > 0 {
		for iNdEx := len(m.Armors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Armors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArmor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorsEquippedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorsEquippedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorsEquippedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorsEquippedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorsEquippedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorsEquippedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Armors) > 0 {
		for iNdEx := len(m.Armors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Armors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArmor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorEquippedByCategoryIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorEquippedByCategoryIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorEquippedByCategoryIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CategoryID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.CategoryID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerArmorEquippedByCategoryIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerArmorEquippedByCategoryIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerArmorEquippedByCategoryIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Armor != nil {
		{
			size, err := m.Armor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArmor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EquipArmorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipArmorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipArmorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Equip {
		i--
		if m.Equip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ArmorID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.ArmorID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintArmor(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EquipArmorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipArmorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipArmorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintArmor(dAtA []byte, offset int, v uint64) int {
	offset -= sovArmor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Armor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovArmor(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovArmor(uint64(l))
	}
	if m.RarityID != 0 {
		n += 1 + sovArmor(uint64(m.RarityID))
	}
	if m.Rarity != nil {
		l = m.Rarity.Size()
		n += 1 + l + sovArmor(uint64(l))
	}
	if m.ArmorCategoryID != 0 {
		n += 1 + sovArmor(uint64(m.ArmorCategoryID))
	}
	if m.ArmorCategory != nil {
		l = m.ArmorCategory.Size()
		n += 1 + l + sovArmor(uint64(l))
	}
	if m.PlayerID != 0 {
		n += 1 + sovArmor(uint64(m.PlayerID))
	}
	if m.Equipped {
		n += 2
	}
	if m.Defense != 0 {
		n += 9
	}
	if m.Evasion != 0 {
		n += 9
	}
	if m.Halving != 0 {
		n += 9
	}
	return n
}

func (m *GetArmorByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArmorID != 0 {
		n += 1 + sovArmor(uint64(m.ArmorID))
	}
	return n
}

func (m *GetArmorByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Armor != nil {
		l = m.Armor.Size()
		n += 1 + l + sovArmor(uint64(l))
	}
	return n
}

func (m *GetArmorByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovArmor(uint64(l))
	}
	return n
}

func (m *GetArmorByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Armor != nil {
		l = m.Armor.Size()
		n += 1 + l + sovArmor(uint64(l))
	}
	return n
}

func (m *GetArmorByPlayerAndNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovArmor(uint64(l))
	}
	if m.PlayerID != 0 {
		n += 1 + sovArmor(uint64(m.PlayerID))
	}
	return n
}

func (m *GetArmorByPlayerAndNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Armor != nil {
		l = m.Armor.Size()
		n += 1 + l + sovArmor(uint64(l))
	}
	return n
}

func (m *GetPlayerArmorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovArmor(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerArmorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Armors) > 0 {
		for _, e := range m.Armors {
			l = e.Size()
			n += 1 + l + sovArmor(uint64(l))
		}
	}
	return n
}

func (m *GetPlayerArmorsByCategoryIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovArmor(uint64(m.PlayerID))
	}
	if m.CategoryID != 0 {
		n += 1 + sovArmor(uint64(m.CategoryID))
	}
	return n
}

func (m *GetPlayerArmorsByCategoryIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Armors) > 0 {
		for _, e := range m.Armors {
			l = e.Size()
			n += 1 + l + sovArmor(uint64(l))
		}
	}
	return n
}

func (m *GetPlayerArmorsEquippedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovArmor(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerArmorsEquippedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Armors) > 0 {
		for _, e := range m.Armors {
			l = e.Size()
			n += 1 + l + sovArmor(uint64(l))
		}
	}
	return n
}

func (m *GetPlayerArmorEquippedByCategoryIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovArmor(uint64(m.PlayerID))
	}
	if m.CategoryID != 0 {
		n += 1 + sovArmor(uint64(m.CategoryID))
	}
	return n
}

func (m *GetPlayerArmorEquippedByCategoryIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Armor != nil {
		l = m.Armor.Size()
		n += 1 + l + sovArmor(uint64(l))
	}
	return n
}

func (m *EquipArmorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovArmor(uint64(m.PlayerID))
	}
	if m.ArmorID != 0 {
		n += 1 + sovArmor(uint64(m.ArmorID))
	}
	if m.Equip {
		n += 2
	}
	return n
}

func (m *EquipArmorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovArmor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArmor(x uint64) (n int) {
	return sovArmor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Armor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Armor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Armor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RarityID", wireType)
			}
			m.RarityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RarityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rarity == nil {
				m.Rarity = &Rarity{}
			}
			if err := m.Rarity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmorCategoryID", wireType)
			}
			m.ArmorCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmorCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmorCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArmorCategory == nil {
				m.ArmorCategory = &ArmorCategory{}
			}
			if err := m.ArmorCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Equipped = bool(v != 0)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defense", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Defense = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evasion", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Evasion = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halving", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Halving = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmorByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmorByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmorByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmorID", wireType)
			}
			m.ArmorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmorByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmorByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmorByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Armor == nil {
				m.Armor = &Armor{}
			}
			if err := m.Armor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmorByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmorByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmorByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmorByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmorByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmorByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Armor == nil {
				m.Armor = &Armor{}
			}
			if err := m.Armor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmorByPlayerAndNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmorByPlayerAndNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmorByPlayerAndNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmorByPlayerAndNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmorByPlayerAndNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmorByPlayerAndNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Armor == nil {
				m.Armor = &Armor{}
			}
			if err := m.Armor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Armors = append(m.Armors, &Armor{})
			if err := m.Armors[len(m.Armors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorsByCategoryIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorsByCategoryIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorsByCategoryIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryID", wireType)
			}
			m.CategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorsByCategoryIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorsByCategoryIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorsByCategoryIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Armors = append(m.Armors, &Armor{})
			if err := m.Armors[len(m.Armors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorsEquippedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorsEquippedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorsEquippedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorsEquippedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorsEquippedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorsEquippedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Armors = append(m.Armors, &Armor{})
			if err := m.Armors[len(m.Armors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorEquippedByCategoryIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorEquippedByCategoryIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorEquippedByCategoryIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryID", wireType)
			}
			m.CategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerArmorEquippedByCategoryIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerArmorEquippedByCategoryIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerArmorEquippedByCategoryIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArmor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArmor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Armor == nil {
				m.Armor = &Armor{}
			}
			if err := m.Armor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipArmorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipArmorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipArmorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmorID", wireType)
			}
			m.ArmorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Equip = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipArmorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipArmorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipArmorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArmor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArmor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArmor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArmor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArmor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArmor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArmor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArmor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArmor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArmor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArmor = fmt.Errorf("proto: unexpected end of group")
)
