// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/titan_event.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TitanEventQuestion
type TitanEventQuestion struct {
	ID       uint32              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TextCode string              `protobuf:"bytes,2,opt,name=TextCode,proto3" json:"TextCode,omitempty"`
	Answers  []*TitanEventAnswer `protobuf:"bytes,3,rep,name=Answers,proto3" json:"Answers,omitempty"`
}

func (m *TitanEventQuestion) Reset()         { *m = TitanEventQuestion{} }
func (m *TitanEventQuestion) String() string { return proto.CompactTextString(m) }
func (*TitanEventQuestion) ProtoMessage()    {}
func (*TitanEventQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{0}
}
func (m *TitanEventQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitanEventQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitanEventQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitanEventQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitanEventQuestion.Merge(m, src)
}
func (m *TitanEventQuestion) XXX_Size() int {
	return m.Size()
}
func (m *TitanEventQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_TitanEventQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_TitanEventQuestion proto.InternalMessageInfo

func (m *TitanEventQuestion) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TitanEventQuestion) GetTextCode() string {
	if m != nil {
		return m.TextCode
	}
	return ""
}

func (m *TitanEventQuestion) GetAnswers() []*TitanEventAnswer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type TitanEventAnswer struct {
	ID           uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Correct      bool   `protobuf:"varint,2,opt,name=Correct,proto3" json:"Correct,omitempty"`
	TextCode     string `protobuf:"bytes,3,opt,name=TextCode,proto3" json:"TextCode,omitempty"`
	TitanEventID uint32 `protobuf:"varint,4,opt,name=TitanEventID,proto3" json:"TitanEventID,omitempty"`
}

func (m *TitanEventAnswer) Reset()         { *m = TitanEventAnswer{} }
func (m *TitanEventAnswer) String() string { return proto.CompactTextString(m) }
func (*TitanEventAnswer) ProtoMessage()    {}
func (*TitanEventAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{1}
}
func (m *TitanEventAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitanEventAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitanEventAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitanEventAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitanEventAnswer.Merge(m, src)
}
func (m *TitanEventAnswer) XXX_Size() int {
	return m.Size()
}
func (m *TitanEventAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_TitanEventAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_TitanEventAnswer proto.InternalMessageInfo

func (m *TitanEventAnswer) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TitanEventAnswer) GetCorrect() bool {
	if m != nil {
		return m.Correct
	}
	return false
}

func (m *TitanEventAnswer) GetTextCode() string {
	if m != nil {
		return m.TextCode
	}
	return ""
}

func (m *TitanEventAnswer) GetTitanEventID() uint32 {
	if m != nil {
		return m.TitanEventID
	}
	return 0
}

// GetTitanEventQuestions
type GetTitanEventQuestionsRequest struct {
}

func (m *GetTitanEventQuestionsRequest) Reset()         { *m = GetTitanEventQuestionsRequest{} }
func (m *GetTitanEventQuestionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventQuestionsRequest) ProtoMessage()    {}
func (*GetTitanEventQuestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{2}
}
func (m *GetTitanEventQuestionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventQuestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventQuestionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventQuestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventQuestionsRequest.Merge(m, src)
}
func (m *GetTitanEventQuestionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventQuestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventQuestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventQuestionsRequest proto.InternalMessageInfo

type GetTitanEventQuestionsResponse struct {
	Questions []*TitanEventQuestion `protobuf:"bytes,1,rep,name=Questions,proto3" json:"Questions,omitempty"`
}

func (m *GetTitanEventQuestionsResponse) Reset()         { *m = GetTitanEventQuestionsResponse{} }
func (m *GetTitanEventQuestionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventQuestionsResponse) ProtoMessage()    {}
func (*GetTitanEventQuestionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{3}
}
func (m *GetTitanEventQuestionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventQuestionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventQuestionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventQuestionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventQuestionsResponse.Merge(m, src)
}
func (m *GetTitanEventQuestionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventQuestionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventQuestionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventQuestionsResponse proto.InternalMessageInfo

func (m *GetTitanEventQuestionsResponse) GetQuestions() []*TitanEventQuestion {
	if m != nil {
		return m.Questions
	}
	return nil
}

// GetTitanEventQuestionByID
type GetTitanEventQuestionByIDRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetTitanEventQuestionByIDRequest) Reset()         { *m = GetTitanEventQuestionByIDRequest{} }
func (m *GetTitanEventQuestionByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventQuestionByIDRequest) ProtoMessage()    {}
func (*GetTitanEventQuestionByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{4}
}
func (m *GetTitanEventQuestionByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventQuestionByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventQuestionByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventQuestionByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventQuestionByIDRequest.Merge(m, src)
}
func (m *GetTitanEventQuestionByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventQuestionByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventQuestionByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventQuestionByIDRequest proto.InternalMessageInfo

func (m *GetTitanEventQuestionByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetTitanEventQuestionByIDResponse struct {
	Question *TitanEventQuestion `protobuf:"bytes,1,opt,name=Question,proto3" json:"Question,omitempty"`
}

func (m *GetTitanEventQuestionByIDResponse) Reset()         { *m = GetTitanEventQuestionByIDResponse{} }
func (m *GetTitanEventQuestionByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventQuestionByIDResponse) ProtoMessage()    {}
func (*GetTitanEventQuestionByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{5}
}
func (m *GetTitanEventQuestionByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventQuestionByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventQuestionByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventQuestionByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventQuestionByIDResponse.Merge(m, src)
}
func (m *GetTitanEventQuestionByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventQuestionByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventQuestionByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventQuestionByIDResponse proto.InternalMessageInfo

func (m *GetTitanEventQuestionByIDResponse) GetQuestion() *TitanEventQuestion {
	if m != nil {
		return m.Question
	}
	return nil
}

// GetTitanEventAnswerByID
type GetTitanEventAnswerByIDRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetTitanEventAnswerByIDRequest) Reset()         { *m = GetTitanEventAnswerByIDRequest{} }
func (m *GetTitanEventAnswerByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventAnswerByIDRequest) ProtoMessage()    {}
func (*GetTitanEventAnswerByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{6}
}
func (m *GetTitanEventAnswerByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventAnswerByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventAnswerByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventAnswerByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventAnswerByIDRequest.Merge(m, src)
}
func (m *GetTitanEventAnswerByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventAnswerByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventAnswerByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventAnswerByIDRequest proto.InternalMessageInfo

func (m *GetTitanEventAnswerByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetTitanEventAnswerByIDResponse struct {
	Answer *TitanEventAnswer `protobuf:"bytes,1,opt,name=Answer,proto3" json:"Answer,omitempty"`
}

func (m *GetTitanEventAnswerByIDResponse) Reset()         { *m = GetTitanEventAnswerByIDResponse{} }
func (m *GetTitanEventAnswerByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventAnswerByIDResponse) ProtoMessage()    {}
func (*GetTitanEventAnswerByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{7}
}
func (m *GetTitanEventAnswerByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventAnswerByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventAnswerByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventAnswerByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventAnswerByIDResponse.Merge(m, src)
}
func (m *GetTitanEventAnswerByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventAnswerByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventAnswerByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventAnswerByIDResponse proto.InternalMessageInfo

func (m *GetTitanEventAnswerByIDResponse) GetAnswer() *TitanEventAnswer {
	if m != nil {
		return m.Answer
	}
	return nil
}

// TitanEventSubmitAnswer
type TitanEventSubmitAnswerRequest struct {
	TitanID  uint32 `protobuf:"varint,1,opt,name=TitanID,proto3" json:"TitanID,omitempty"`
	AnswerID uint32 `protobuf:"varint,2,opt,name=AnswerID,proto3" json:"AnswerID,omitempty"`
	PlayerID uint32 `protobuf:"varint,3,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *TitanEventSubmitAnswerRequest) Reset()         { *m = TitanEventSubmitAnswerRequest{} }
func (m *TitanEventSubmitAnswerRequest) String() string { return proto.CompactTextString(m) }
func (*TitanEventSubmitAnswerRequest) ProtoMessage()    {}
func (*TitanEventSubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{8}
}
func (m *TitanEventSubmitAnswerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitanEventSubmitAnswerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitanEventSubmitAnswerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitanEventSubmitAnswerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitanEventSubmitAnswerRequest.Merge(m, src)
}
func (m *TitanEventSubmitAnswerRequest) XXX_Size() int {
	return m.Size()
}
func (m *TitanEventSubmitAnswerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TitanEventSubmitAnswerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TitanEventSubmitAnswerRequest proto.InternalMessageInfo

func (m *TitanEventSubmitAnswerRequest) GetTitanID() uint32 {
	if m != nil {
		return m.TitanID
	}
	return 0
}

func (m *TitanEventSubmitAnswerRequest) GetAnswerID() uint32 {
	if m != nil {
		return m.AnswerID
	}
	return 0
}

func (m *TitanEventSubmitAnswerRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type TitanEventSubmitAnswerResponse struct {
	IsMalus      bool   `protobuf:"varint,1,opt,name=IsMalus,proto3" json:"IsMalus,omitempty"`
	IsBonus      bool   `protobuf:"varint,2,opt,name=IsBonus,proto3" json:"IsBonus,omitempty"`
	PlayerDie    bool   `protobuf:"varint,3,opt,name=PlayerDie,proto3" json:"PlayerDie,omitempty"`
	TitanDie     bool   `protobuf:"varint,4,opt,name=TitanDie,proto3" json:"TitanDie,omitempty"`
	PlayerDamage int64  `protobuf:"varint,5,opt,name=PlayerDamage,proto3" json:"PlayerDamage,omitempty"`
	TitanDamage  int64  `protobuf:"varint,6,opt,name=TitanDamage,proto3" json:"TitanDamage,omitempty"`
	QuestionID   uint32 `protobuf:"varint,7,opt,name=QuestionID,proto3" json:"QuestionID,omitempty"`
}

func (m *TitanEventSubmitAnswerResponse) Reset()         { *m = TitanEventSubmitAnswerResponse{} }
func (m *TitanEventSubmitAnswerResponse) String() string { return proto.CompactTextString(m) }
func (*TitanEventSubmitAnswerResponse) ProtoMessage()    {}
func (*TitanEventSubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{9}
}
func (m *TitanEventSubmitAnswerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitanEventSubmitAnswerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitanEventSubmitAnswerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitanEventSubmitAnswerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitanEventSubmitAnswerResponse.Merge(m, src)
}
func (m *TitanEventSubmitAnswerResponse) XXX_Size() int {
	return m.Size()
}
func (m *TitanEventSubmitAnswerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TitanEventSubmitAnswerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TitanEventSubmitAnswerResponse proto.InternalMessageInfo

func (m *TitanEventSubmitAnswerResponse) GetIsMalus() bool {
	if m != nil {
		return m.IsMalus
	}
	return false
}

func (m *TitanEventSubmitAnswerResponse) GetIsBonus() bool {
	if m != nil {
		return m.IsBonus
	}
	return false
}

func (m *TitanEventSubmitAnswerResponse) GetPlayerDie() bool {
	if m != nil {
		return m.PlayerDie
	}
	return false
}

func (m *TitanEventSubmitAnswerResponse) GetTitanDie() bool {
	if m != nil {
		return m.TitanDie
	}
	return false
}

func (m *TitanEventSubmitAnswerResponse) GetPlayerDamage() int64 {
	if m != nil {
		return m.PlayerDamage
	}
	return 0
}

func (m *TitanEventSubmitAnswerResponse) GetTitanDamage() int64 {
	if m != nil {
		return m.TitanDamage
	}
	return 0
}

func (m *TitanEventSubmitAnswerResponse) GetQuestionID() uint32 {
	if m != nil {
		return m.QuestionID
	}
	return 0
}

func init() {
	proto.RegisterType((*TitanEventQuestion)(nil), "titan_event.TitanEventQuestion")
	proto.RegisterType((*TitanEventAnswer)(nil), "titan_event.TitanEventAnswer")
	proto.RegisterType((*GetTitanEventQuestionsRequest)(nil), "titan_event.GetTitanEventQuestionsRequest")
	proto.RegisterType((*GetTitanEventQuestionsResponse)(nil), "titan_event.GetTitanEventQuestionsResponse")
	proto.RegisterType((*GetTitanEventQuestionByIDRequest)(nil), "titan_event.GetTitanEventQuestionByIDRequest")
	proto.RegisterType((*GetTitanEventQuestionByIDResponse)(nil), "titan_event.GetTitanEventQuestionByIDResponse")
	proto.RegisterType((*GetTitanEventAnswerByIDRequest)(nil), "titan_event.GetTitanEventAnswerByIDRequest")
	proto.RegisterType((*GetTitanEventAnswerByIDResponse)(nil), "titan_event.GetTitanEventAnswerByIDResponse")
	proto.RegisterType((*TitanEventSubmitAnswerRequest)(nil), "titan_event.TitanEventSubmitAnswerRequest")
	proto.RegisterType((*TitanEventSubmitAnswerResponse)(nil), "titan_event.TitanEventSubmitAnswerResponse")
}

func init() { proto.RegisterFile("proto/titan_event.proto", fileDescriptor_f9ef6fe984cd362e) }

var fileDescriptor_f9ef6fe984cd362e = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xcd, 0xc4, 0x21, 0x76, 0x6e, 0x28, 0x42, 0xb3, 0x61, 0x84, 0xc8, 0xc4, 0xcc, 0x2a, 0xab,
	0x80, 0x8a, 0x10, 0x8b, 0x8a, 0x05, 0xa9, 0x11, 0xf2, 0x02, 0x09, 0x86, 0x2e, 0x10, 0x9b, 0xe2,
	0xc0, 0x08, 0x45, 0x6a, 0xed, 0x34, 0x33, 0x01, 0x22, 0xf1, 0x11, 0x7c, 0x16, 0xcb, 0x2e, 0x59,
	0xa2, 0xe4, 0x17, 0xf8, 0x00, 0x34, 0x2f, 0xdb, 0x71, 0x71, 0x61, 0xd7, 0xf3, 0xb8, 0x73, 0xce,
	0xad, 0xaf, 0x02, 0x77, 0x96, 0xab, 0x42, 0x15, 0x0f, 0xd4, 0x42, 0x65, 0xf9, 0xa9, 0xf8, 0x2c,
	0x72, 0x35, 0x35, 0x0c, 0x1e, 0xd6, 0x28, 0xb6, 0x01, 0x7c, 0xa2, 0xe1, 0x73, 0x8d, 0x5e, 0xaf,
	0x85, 0x54, 0x8b, 0x22, 0xc7, 0xb7, 0xa0, 0x9b, 0x26, 0x04, 0xc5, 0x68, 0x72, 0xc0, 0xbb, 0x69,
	0x82, 0xef, 0x42, 0x74, 0x22, 0xbe, 0xaa, 0xe3, 0xe2, 0xa3, 0x20, 0xdd, 0x18, 0x4d, 0x06, 0xbc,
	0xc4, 0xf8, 0x09, 0x84, 0xcf, 0x72, 0xf9, 0x45, 0xac, 0x24, 0x09, 0xe2, 0x60, 0x32, 0x3c, 0x1c,
	0x4d, 0xeb, 0x99, 0xd5, 0xeb, 0xd6, 0xc5, 0xbd, 0x9b, 0x7d, 0x83, 0xdb, 0x4d, 0xf1, 0x4a, 0x30,
	0x81, 0xf0, 0xb8, 0x58, 0xad, 0xc4, 0x07, 0x65, 0x72, 0x23, 0xee, 0xe1, 0x5e, 0xa5, 0xa0, 0x51,
	0x89, 0xc1, 0xcd, 0xea, 0xe5, 0x34, 0x21, 0x3d, 0xf3, 0xde, 0x1e, 0xc7, 0xc6, 0x30, 0x7a, 0x21,
	0xd4, 0xd5, 0xdd, 0x25, 0x17, 0x17, 0xfa, 0x4f, 0x76, 0x0a, 0xb4, 0xcd, 0x20, 0x97, 0x45, 0x2e,
	0x05, 0x7e, 0x0a, 0x83, 0x92, 0x24, 0xc8, 0xec, 0x3e, 0x6e, 0xd9, 0xdd, 0xfb, 0x78, 0x35, 0xc1,
	0x0e, 0x21, 0xfe, 0x6b, 0xc0, 0x6c, 0x93, 0x26, 0xae, 0x44, 0xf3, 0xff, 0xc1, 0xde, 0xc3, 0xfd,
	0x6b, 0x66, 0x5c, 0xaf, 0x23, 0x88, 0x3c, 0x6f, 0x46, 0xff, 0xa3, 0x56, 0x39, 0xc0, 0x1e, 0x36,
	0xd6, 0xb6, 0x1f, 0xe6, 0xba, 0x4e, 0x6f, 0x61, 0xdc, 0x3a, 0xe1, 0x1a, 0x3d, 0x86, 0xbe, 0x65,
	0x5d, 0x9f, 0x7f, 0x9c, 0x88, 0x33, 0xb3, 0x0b, 0x18, 0x55, 0xda, 0x9b, 0xf5, 0xfc, 0x7c, 0xe1,
	0x1d, 0xae, 0x0a, 0x81, 0xd0, 0x18, 0xca, 0x3e, 0x1e, 0xea, 0xf3, 0xb0, 0xd6, 0x34, 0x31, 0x97,
	0x73, 0xc0, 0x4b, 0xac, 0xb5, 0x57, 0x67, 0xd9, 0xc6, 0x68, 0x81, 0xd5, 0x3c, 0x66, 0xbf, 0x11,
	0xd0, 0xb6, 0x4c, 0xb7, 0x0c, 0x81, 0x30, 0x95, 0x2f, 0xb3, 0xb3, 0xb5, 0x34, 0xa1, 0x11, 0xf7,
	0xd0, 0x2a, 0xb3, 0x22, 0x5f, 0x4b, 0x7f, 0xad, 0x0e, 0xe2, 0x7b, 0x30, 0xb0, 0x11, 0xc9, 0xc2,
	0x9e, 0x6b, 0xc4, 0x2b, 0xc2, 0xdc, 0xb2, 0xce, 0xd4, 0x62, 0xcf, 0x88, 0x25, 0xd6, 0xb7, 0xec,
	0x8c, 0xd9, 0x79, 0xf6, 0x49, 0x90, 0x1b, 0x31, 0x9a, 0x04, 0x7c, 0x8f, 0xc3, 0x31, 0x0c, 0xad,
	0xdf, 0x5a, 0xfa, 0xc6, 0x52, 0xa7, 0x30, 0x05, 0xf0, 0x5f, 0x38, 0x4d, 0x48, 0x68, 0x96, 0xae,
	0x31, 0x33, 0xfa, 0x63, 0x4b, 0xd1, 0xe5, 0x96, 0xa2, 0x5f, 0x5b, 0x8a, 0xbe, 0xef, 0x68, 0xe7,
	0x72, 0x47, 0x3b, 0x3f, 0x77, 0xb4, 0xf3, 0xae, 0x37, 0x3d, 0x5a, 0xce, 0xe7, 0x7d, 0xf3, 0xd3,
	0xf1, 0xe8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x68, 0x4e, 0x02, 0x55, 0x04, 0x00, 0x00,
}

func (m *TitanEventQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitanEventQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitanEventQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Answers) > 0 {
		for iNdEx := len(m.Answers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Answers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTitanEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TextCode) > 0 {
		i -= len(m.TextCode)
		copy(dAtA[i:], m.TextCode)
		i = encodeVarintTitanEvent(dAtA, i, uint64(len(m.TextCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TitanEventAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitanEventAnswer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitanEventAnswer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TitanEventID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.TitanEventID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TextCode) > 0 {
		i -= len(m.TextCode)
		copy(dAtA[i:], m.TextCode)
		i = encodeVarintTitanEvent(dAtA, i, uint64(len(m.TextCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Correct {
		i--
		if m.Correct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanEventQuestionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventQuestionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventQuestionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTitanEventQuestionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventQuestionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventQuestionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for iNdEx := len(m.Questions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Questions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTitanEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanEventQuestionByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventQuestionByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventQuestionByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanEventQuestionByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventQuestionByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventQuestionByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Question != nil {
		{
			size, err := m.Question.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitanEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanEventAnswerByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventAnswerByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventAnswerByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanEventAnswerByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventAnswerByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventAnswerByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Answer != nil {
		{
			size, err := m.Answer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitanEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TitanEventSubmitAnswerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitanEventSubmitAnswerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitanEventSubmitAnswerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x18
	}
	if m.AnswerID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.AnswerID))
		i--
		dAtA[i] = 0x10
	}
	if m.TitanID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.TitanID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TitanEventSubmitAnswerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitanEventSubmitAnswerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitanEventSubmitAnswerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuestionID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.QuestionID))
		i--
		dAtA[i] = 0x38
	}
	if m.TitanDamage != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.TitanDamage))
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerDamage != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.PlayerDamage))
		i--
		dAtA[i] = 0x28
	}
	if m.TitanDie {
		i--
		if m.TitanDie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PlayerDie {
		i--
		if m.PlayerDie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsBonus {
		i--
		if m.IsBonus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsMalus {
		i--
		if m.IsMalus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTitanEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovTitanEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TitanEventQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	l = len(m.TextCode)
	if l > 0 {
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if len(m.Answers) > 0 {
		for _, e := range m.Answers {
			l = e.Size()
			n += 1 + l + sovTitanEvent(uint64(l))
		}
	}
	return n
}

func (m *TitanEventAnswer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	if m.Correct {
		n += 2
	}
	l = len(m.TextCode)
	if l > 0 {
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if m.TitanEventID != 0 {
		n += 1 + sovTitanEvent(uint64(m.TitanEventID))
	}
	return n
}

func (m *GetTitanEventQuestionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTitanEventQuestionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for _, e := range m.Questions {
			l = e.Size()
			n += 1 + l + sovTitanEvent(uint64(l))
		}
	}
	return n
}

func (m *GetTitanEventQuestionByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	return n
}

func (m *GetTitanEventQuestionByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Question != nil {
		l = m.Question.Size()
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	return n
}

func (m *GetTitanEventAnswerByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	return n
}

func (m *GetTitanEventAnswerByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Answer != nil {
		l = m.Answer.Size()
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	return n
}

func (m *TitanEventSubmitAnswerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TitanID != 0 {
		n += 1 + sovTitanEvent(uint64(m.TitanID))
	}
	if m.AnswerID != 0 {
		n += 1 + sovTitanEvent(uint64(m.AnswerID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovTitanEvent(uint64(m.PlayerID))
	}
	return n
}

func (m *TitanEventSubmitAnswerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsMalus {
		n += 2
	}
	if m.IsBonus {
		n += 2
	}
	if m.PlayerDie {
		n += 2
	}
	if m.TitanDie {
		n += 2
	}
	if m.PlayerDamage != 0 {
		n += 1 + sovTitanEvent(uint64(m.PlayerDamage))
	}
	if m.TitanDamage != 0 {
		n += 1 + sovTitanEvent(uint64(m.TitanDamage))
	}
	if m.QuestionID != 0 {
		n += 1 + sovTitanEvent(uint64(m.QuestionID))
	}
	return n
}

func sovTitanEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTitanEvent(x uint64) (n int) {
	return sovTitanEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TitanEventQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitanEventQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitanEventQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, &TitanEventAnswer{})
			if err := m.Answers[len(m.Answers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitanEventAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitanEventAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitanEventAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correct = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanEventID", wireType)
			}
			m.TitanEventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanEventID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventQuestionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventQuestionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventQuestionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventQuestionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventQuestionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventQuestionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Questions = append(m.Questions, &TitanEventQuestion{})
			if err := m.Questions[len(m.Questions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventQuestionByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventQuestionByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventQuestionByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventQuestionByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventQuestionByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventQuestionByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Question == nil {
				m.Question = &TitanEventQuestion{}
			}
			if err := m.Question.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventAnswerByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventAnswerByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventAnswerByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventAnswerByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventAnswerByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventAnswerByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Answer == nil {
				m.Answer = &TitanEventAnswer{}
			}
			if err := m.Answer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitanEventSubmitAnswerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitanEventSubmitAnswerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitanEventSubmitAnswerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanID", wireType)
			}
			m.TitanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswerID", wireType)
			}
			m.AnswerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnswerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitanEventSubmitAnswerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitanEventSubmitAnswerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitanEventSubmitAnswerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMalus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMalus = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBonus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBonus = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDie = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanDie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TitanDie = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDamage", wireType)
			}
			m.PlayerDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanDamage", wireType)
			}
			m.TitanDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionID", wireType)
			}
			m.QuestionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTitanEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTitanEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTitanEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTitanEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTitanEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTitanEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTitanEvent = fmt.Errorf("proto: unexpected end of group")
)
