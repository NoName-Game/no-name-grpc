// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/titan_event.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TitanEvent
type TitanEvent struct {
	ID                   uint32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TextCode             string         `protobuf:"bytes,2,opt,name=TextCode,proto3" json:"TextCode,omitempty"`
	Choices              []*EventChoice `protobuf:"bytes,3,rep,name=Choices,proto3" json:"Choices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TitanEvent) Reset()         { *m = TitanEvent{} }
func (m *TitanEvent) String() string { return proto.CompactTextString(m) }
func (*TitanEvent) ProtoMessage()    {}
func (*TitanEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{0}
}
func (m *TitanEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitanEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitanEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitanEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitanEvent.Merge(m, src)
}
func (m *TitanEvent) XXX_Size() int {
	return m.Size()
}
func (m *TitanEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TitanEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TitanEvent proto.InternalMessageInfo

func (m *TitanEvent) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TitanEvent) GetTextCode() string {
	if m != nil {
		return m.TextCode
	}
	return ""
}

func (m *TitanEvent) GetChoices() []*EventChoice {
	if m != nil {
		return m.Choices
	}
	return nil
}

type SubmitAnswerRequest struct {
	TitanID              uint32   `protobuf:"varint,1,opt,name=titanID,proto3" json:"titanID,omitempty"`
	ChoiceID             uint32   `protobuf:"varint,2,opt,name=choiceID,proto3" json:"choiceID,omitempty"`
	PlayerID             uint32   `protobuf:"varint,3,opt,name=playerID,proto3" json:"playerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitAnswerRequest) Reset()         { *m = SubmitAnswerRequest{} }
func (m *SubmitAnswerRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitAnswerRequest) ProtoMessage()    {}
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{1}
}
func (m *SubmitAnswerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitAnswerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitAnswerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitAnswerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitAnswerRequest.Merge(m, src)
}
func (m *SubmitAnswerRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitAnswerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitAnswerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitAnswerRequest proto.InternalMessageInfo

func (m *SubmitAnswerRequest) GetTitanID() uint32 {
	if m != nil {
		return m.TitanID
	}
	return 0
}

func (m *SubmitAnswerRequest) GetChoiceID() uint32 {
	if m != nil {
		return m.ChoiceID
	}
	return 0
}

func (m *SubmitAnswerRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type SubmitAnswerResponse struct {
	IsMalus              bool              `protobuf:"varint,1,opt,name=isMalus,proto3" json:"isMalus,omitempty"`
	Hit                  *HitTitanResponse `protobuf:"bytes,2,opt,name=hit,proto3" json:"hit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubmitAnswerResponse) Reset()         { *m = SubmitAnswerResponse{} }
func (m *SubmitAnswerResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitAnswerResponse) ProtoMessage()    {}
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{2}
}
func (m *SubmitAnswerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitAnswerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitAnswerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitAnswerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitAnswerResponse.Merge(m, src)
}
func (m *SubmitAnswerResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitAnswerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitAnswerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitAnswerResponse proto.InternalMessageInfo

func (m *SubmitAnswerResponse) GetIsMalus() bool {
	if m != nil {
		return m.IsMalus
	}
	return false
}

func (m *SubmitAnswerResponse) GetHit() *HitTitanResponse {
	if m != nil {
		return m.Hit
	}
	return nil
}

type GetRandomEventRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRandomEventRequest) Reset()         { *m = GetRandomEventRequest{} }
func (m *GetRandomEventRequest) String() string { return proto.CompactTextString(m) }
func (*GetRandomEventRequest) ProtoMessage()    {}
func (*GetRandomEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{3}
}
func (m *GetRandomEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRandomEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRandomEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRandomEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRandomEventRequest.Merge(m, src)
}
func (m *GetRandomEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRandomEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRandomEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRandomEventRequest proto.InternalMessageInfo

type GetRandomEventResponse struct {
	Event                *TitanEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetRandomEventResponse) Reset()         { *m = GetRandomEventResponse{} }
func (m *GetRandomEventResponse) String() string { return proto.CompactTextString(m) }
func (*GetRandomEventResponse) ProtoMessage()    {}
func (*GetRandomEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{4}
}
func (m *GetRandomEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRandomEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRandomEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRandomEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRandomEventResponse.Merge(m, src)
}
func (m *GetRandomEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRandomEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRandomEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRandomEventResponse proto.InternalMessageInfo

func (m *GetRandomEventResponse) GetEvent() *TitanEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

// GetAll
type GetAllEventRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllEventRequest) Reset()         { *m = GetAllEventRequest{} }
func (m *GetAllEventRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllEventRequest) ProtoMessage()    {}
func (*GetAllEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{5}
}
func (m *GetAllEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllEventRequest.Merge(m, src)
}
func (m *GetAllEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllEventRequest proto.InternalMessageInfo

type GetAllEventResponse struct {
	Events               []*TitanEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAllEventResponse) Reset()         { *m = GetAllEventResponse{} }
func (m *GetAllEventResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllEventResponse) ProtoMessage()    {}
func (*GetAllEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{6}
}
func (m *GetAllEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllEventResponse.Merge(m, src)
}
func (m *GetAllEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllEventResponse proto.InternalMessageInfo

func (m *GetAllEventResponse) GetEvents() []*TitanEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

// GetTitanEventByID
type GetTitanEventByIDRequest struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTitanEventByIDRequest) Reset()         { *m = GetTitanEventByIDRequest{} }
func (m *GetTitanEventByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventByIDRequest) ProtoMessage()    {}
func (*GetTitanEventByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{7}
}
func (m *GetTitanEventByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventByIDRequest.Merge(m, src)
}
func (m *GetTitanEventByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventByIDRequest proto.InternalMessageInfo

func (m *GetTitanEventByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetTitanEventByIDResponse struct {
	Event                *TitanEvent `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetTitanEventByIDResponse) Reset()         { *m = GetTitanEventByIDResponse{} }
func (m *GetTitanEventByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanEventByIDResponse) ProtoMessage()    {}
func (*GetTitanEventByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{8}
}
func (m *GetTitanEventByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanEventByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanEventByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanEventByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanEventByIDResponse.Merge(m, src)
}
func (m *GetTitanEventByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanEventByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanEventByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanEventByIDResponse proto.InternalMessageInfo

func (m *GetTitanEventByIDResponse) GetEvent() *TitanEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventChoice struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Correct              bool     `protobuf:"varint,2,opt,name=Correct,proto3" json:"Correct,omitempty"`
	TextCode             string   `protobuf:"bytes,3,opt,name=TextCode,proto3" json:"TextCode,omitempty"`
	TitanEventID         uint32   `protobuf:"varint,4,opt,name=TitanEventID,proto3" json:"TitanEventID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventChoice) Reset()         { *m = EventChoice{} }
func (m *EventChoice) String() string { return proto.CompactTextString(m) }
func (*EventChoice) ProtoMessage()    {}
func (*EventChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{9}
}
func (m *EventChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChoice.Merge(m, src)
}
func (m *EventChoice) XXX_Size() int {
	return m.Size()
}
func (m *EventChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChoice.DiscardUnknown(m)
}

var xxx_messageInfo_EventChoice proto.InternalMessageInfo

func (m *EventChoice) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *EventChoice) GetCorrect() bool {
	if m != nil {
		return m.Correct
	}
	return false
}

func (m *EventChoice) GetTextCode() string {
	if m != nil {
		return m.TextCode
	}
	return ""
}

func (m *EventChoice) GetTitanEventID() uint32 {
	if m != nil {
		return m.TitanEventID
	}
	return 0
}

// GetEventChoiceByID
type GetEventChoiceByIDRequest struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEventChoiceByIDRequest) Reset()         { *m = GetEventChoiceByIDRequest{} }
func (m *GetEventChoiceByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventChoiceByIDRequest) ProtoMessage()    {}
func (*GetEventChoiceByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{10}
}
func (m *GetEventChoiceByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEventChoiceByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEventChoiceByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEventChoiceByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventChoiceByIDRequest.Merge(m, src)
}
func (m *GetEventChoiceByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEventChoiceByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventChoiceByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventChoiceByIDRequest proto.InternalMessageInfo

func (m *GetEventChoiceByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetEventChoiceByIDResponse struct {
	Choice               *EventChoice `protobuf:"bytes,1,opt,name=Choice,proto3" json:"Choice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetEventChoiceByIDResponse) Reset()         { *m = GetEventChoiceByIDResponse{} }
func (m *GetEventChoiceByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetEventChoiceByIDResponse) ProtoMessage()    {}
func (*GetEventChoiceByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ef6fe984cd362e, []int{11}
}
func (m *GetEventChoiceByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEventChoiceByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEventChoiceByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEventChoiceByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventChoiceByIDResponse.Merge(m, src)
}
func (m *GetEventChoiceByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetEventChoiceByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventChoiceByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventChoiceByIDResponse proto.InternalMessageInfo

func (m *GetEventChoiceByIDResponse) GetChoice() *EventChoice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func init() {
	proto.RegisterType((*TitanEvent)(nil), "titan_event.TitanEvent")
	proto.RegisterType((*SubmitAnswerRequest)(nil), "titan_event.SubmitAnswerRequest")
	proto.RegisterType((*SubmitAnswerResponse)(nil), "titan_event.SubmitAnswerResponse")
	proto.RegisterType((*GetRandomEventRequest)(nil), "titan_event.GetRandomEventRequest")
	proto.RegisterType((*GetRandomEventResponse)(nil), "titan_event.GetRandomEventResponse")
	proto.RegisterType((*GetAllEventRequest)(nil), "titan_event.GetAllEventRequest")
	proto.RegisterType((*GetAllEventResponse)(nil), "titan_event.GetAllEventResponse")
	proto.RegisterType((*GetTitanEventByIDRequest)(nil), "titan_event.GetTitanEventByIDRequest")
	proto.RegisterType((*GetTitanEventByIDResponse)(nil), "titan_event.GetTitanEventByIDResponse")
	proto.RegisterType((*EventChoice)(nil), "titan_event.EventChoice")
	proto.RegisterType((*GetEventChoiceByIDRequest)(nil), "titan_event.GetEventChoiceByIDRequest")
	proto.RegisterType((*GetEventChoiceByIDResponse)(nil), "titan_event.GetEventChoiceByIDResponse")
}

func init() { proto.RegisterFile("proto/titan_event.proto", fileDescriptor_f9ef6fe984cd362e) }

var fileDescriptor_f9ef6fe984cd362e = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0xce, 0xd2, 0x40,
	0x14, 0x4d, 0xe9, 0x27, 0xe0, 0xad, 0x9f, 0x89, 0x03, 0xca, 0xc8, 0x82, 0x90, 0x59, 0xa1, 0xc6,
	0x62, 0x70, 0xe9, 0x0a, 0x28, 0xd6, 0x9a, 0xe8, 0x62, 0x64, 0xa5, 0x0b, 0x53, 0x60, 0x22, 0x4d,
	0x4a, 0x5b, 0xdb, 0x41, 0xe4, 0x0d, 0x5d, 0xfa, 0x08, 0x86, 0x27, 0x31, 0xbd, 0x9d, 0xfe, 0x21,
	0x92, 0x6f, 0xd5, 0x9c, 0x7b, 0xcf, 0xbd, 0x67, 0xce, 0xcc, 0x29, 0xf4, 0xa2, 0x38, 0x94, 0xe1,
	0x58, 0x7a, 0xd2, 0x0d, 0xbe, 0x8a, 0x1f, 0x22, 0x90, 0x26, 0x56, 0x88, 0x51, 0x29, 0xf5, 0x1f,
	0x55, 0x58, 0x59, 0x9f, 0xf9, 0x00, 0xcb, 0x14, 0x2e, 0x52, 0x02, 0x79, 0x08, 0x0d, 0xc7, 0xa2,
	0xda, 0x50, 0x1b, 0xdd, 0xf2, 0x86, 0x63, 0x91, 0x3e, 0xb4, 0x97, 0xe2, 0xa7, 0x9c, 0x87, 0x1b,
	0x41, 0x1b, 0x43, 0x6d, 0x74, 0x9f, 0x17, 0x98, 0x4c, 0xa0, 0x35, 0xdf, 0x86, 0xde, 0x5a, 0x24,
	0x54, 0x1f, 0xea, 0x23, 0x63, 0x42, 0xcd, 0xaa, 0x3c, 0x2e, 0xcc, 0x08, 0x3c, 0x27, 0xb2, 0x6f,
	0xd0, 0xf9, 0xb4, 0x5f, 0xed, 0x3c, 0x39, 0x0d, 0x92, 0x83, 0x88, 0xb9, 0xf8, 0xbe, 0x17, 0x89,
	0x24, 0x14, 0x5a, 0x38, 0x5a, 0x68, 0xe7, 0x30, 0x3d, 0xc0, 0x1a, 0x67, 0x1d, 0x0b, 0x0f, 0x70,
	0xcb, 0x0b, 0x9c, 0xf6, 0x22, 0xdf, 0x3d, 0x8a, 0xd8, 0xb1, 0xa8, 0x9e, 0xf5, 0x72, 0xcc, 0xbe,
	0x40, 0xb7, 0x2e, 0x94, 0x44, 0x61, 0x90, 0x88, 0x54, 0xc9, 0x4b, 0x3e, 0xb8, 0xfe, 0x3e, 0x41,
	0xa5, 0x36, 0xcf, 0x21, 0x79, 0x06, 0xfa, 0xd6, 0x93, 0x28, 0x62, 0x4c, 0x7a, 0x99, 0x15, 0xf3,
	0x9d, 0x27, 0xf1, 0x76, 0xf2, 0x79, 0x9e, 0x72, 0x58, 0x0f, 0x1e, 0xdb, 0x42, 0x72, 0x37, 0xd8,
	0x84, 0x3b, 0xb4, 0xa9, 0x7c, 0x30, 0x1b, 0x9e, 0x9c, 0x37, 0x94, 0xee, 0x4b, 0xb8, 0x87, 0xd7,
	0x82, 0xaa, 0xc5, 0x7e, 0x75, 0x55, 0xe5, 0x03, 0xf0, 0x8c, 0xc5, 0xba, 0x40, 0x6c, 0x21, 0xa7,
	0xbe, 0x5f, 0x5b, 0xff, 0x16, 0x3a, 0xb5, 0xaa, 0xda, 0x3d, 0x86, 0x26, 0x4e, 0xa5, 0x96, 0xf4,
	0x6b, 0xcb, 0x15, 0x8d, 0x3d, 0x07, 0x6a, 0x0b, 0x59, 0x36, 0x66, 0x47, 0xc7, 0xca, 0x9f, 0xe2,
	0x2c, 0x01, 0xec, 0x3d, 0x3c, 0xbd, 0xc0, 0x2d, 0x5d, 0x2d, 0xee, 0xe4, 0x0a, 0x3f, 0xec, 0x00,
	0x46, 0x25, 0x15, 0xff, 0x84, 0x8d, 0x42, 0x6b, 0x1e, 0xc6, 0xb1, 0x58, 0x67, 0xaf, 0xd0, 0xe6,
	0x39, 0xac, 0xc5, 0x50, 0x3f, 0x8b, 0x21, 0x83, 0x07, 0xa5, 0x92, 0x63, 0xd1, 0x1b, 0xdc, 0x57,
	0xab, 0xb1, 0x17, 0x68, 0xa2, 0xa2, 0x7d, 0xcd, 0xf1, 0x47, 0xe8, 0x5f, 0x22, 0x2b, 0xcb, 0xaf,
	0xa0, 0x99, 0x55, 0x95, 0xe7, 0xff, 0x87, 0x5e, 0xf1, 0x66, 0xe4, 0xd7, 0x69, 0xa0, 0xfd, 0x3e,
	0x0d, 0xb4, 0x3f, 0xa7, 0x81, 0xf6, 0xf9, 0xc6, 0x7c, 0x13, 0xad, 0x56, 0x4d, 0xfc, 0xf9, 0x5e,
	0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xda, 0xd3, 0x22, 0x49, 0xb7, 0x03, 0x00, 0x00,
}

func (m *TitanEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitanEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitanEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Choices) > 0 {
		for iNdEx := len(m.Choices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Choices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTitanEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TextCode) > 0 {
		i -= len(m.TextCode)
		copy(dAtA[i:], m.TextCode)
		i = encodeVarintTitanEvent(dAtA, i, uint64(len(m.TextCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitAnswerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitAnswerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitAnswerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x18
	}
	if m.ChoiceID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ChoiceID))
		i--
		dAtA[i] = 0x10
	}
	if m.TitanID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.TitanID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitAnswerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitAnswerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitAnswerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hit != nil {
		{
			size, err := m.Hit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitanEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsMalus {
		i--
		if m.IsMalus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRandomEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRandomEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetRandomEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRandomEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitanEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAllEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTitanEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanEventByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanEventByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanEventByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanEventByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitanEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TitanEventID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.TitanEventID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TextCode) > 0 {
		i -= len(m.TextCode)
		copy(dAtA[i:], m.TextCode)
		i = encodeVarintTitanEvent(dAtA, i, uint64(len(m.TextCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Correct {
		i--
		if m.Correct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEventChoiceByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventChoiceByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEventChoiceByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintTitanEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEventChoiceByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventChoiceByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEventChoiceByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Choice != nil {
		{
			size, err := m.Choice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitanEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTitanEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovTitanEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TitanEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	l = len(m.TextCode)
	if l > 0 {
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if len(m.Choices) > 0 {
		for _, e := range m.Choices {
			l = e.Size()
			n += 1 + l + sovTitanEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubmitAnswerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TitanID != 0 {
		n += 1 + sovTitanEvent(uint64(m.TitanID))
	}
	if m.ChoiceID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ChoiceID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovTitanEvent(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubmitAnswerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsMalus {
		n += 2
	}
	if m.Hit != nil {
		l = m.Hit.Size()
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRandomEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRandomEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTitanEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTitanEventByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTitanEventByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	if m.Correct {
		n += 2
	}
	l = len(m.TextCode)
	if l > 0 {
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if m.TitanEventID != 0 {
		n += 1 + sovTitanEvent(uint64(m.TitanEventID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEventChoiceByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitanEvent(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEventChoiceByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		l = m.Choice.Size()
		n += 1 + l + sovTitanEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTitanEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTitanEvent(x uint64) (n int) {
	return sovTitanEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TitanEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitanEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitanEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choices = append(m.Choices, &EventChoice{})
			if err := m.Choices[len(m.Choices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitAnswerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitAnswerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitAnswerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanID", wireType)
			}
			m.TitanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChoiceID", wireType)
			}
			m.ChoiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChoiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitAnswerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitAnswerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitAnswerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMalus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMalus = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hit == nil {
				m.Hit = &HitTitanResponse{}
			}
			if err := m.Hit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &TitanEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &TitanEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanEventByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanEventByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanEventByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &TitanEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correct = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanEventID", wireType)
			}
			m.TitanEventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanEventID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventChoiceByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEventChoiceByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEventChoiceByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventChoiceByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEventChoiceByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEventChoiceByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitanEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Choice == nil {
				m.Choice = &EventChoice{}
			}
			if err := m.Choice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitanEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitanEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTitanEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTitanEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitanEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTitanEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTitanEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTitanEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTitanEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTitanEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTitanEvent = fmt.Errorf("proto: unexpected end of group")
)
