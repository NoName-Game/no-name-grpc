// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/player_configuration.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PlayerSetLanguage
type PlayerSetLanguageRequest struct {
	PlayerID   uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	LanguageID uint32 `protobuf:"varint,2,opt,name=LanguageID,proto3" json:"LanguageID,omitempty"`
}

func (m *PlayerSetLanguageRequest) Reset()         { *m = PlayerSetLanguageRequest{} }
func (m *PlayerSetLanguageRequest) String() string { return proto.CompactTextString(m) }
func (*PlayerSetLanguageRequest) ProtoMessage()    {}
func (*PlayerSetLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e910c183fdc97af3, []int{0}
}
func (m *PlayerSetLanguageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSetLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSetLanguageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerSetLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSetLanguageRequest.Merge(m, src)
}
func (m *PlayerSetLanguageRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSetLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSetLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSetLanguageRequest proto.InternalMessageInfo

func (m *PlayerSetLanguageRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *PlayerSetLanguageRequest) GetLanguageID() uint32 {
	if m != nil {
		return m.LanguageID
	}
	return 0
}

type PlayerSetLanguageResponse struct {
}

func (m *PlayerSetLanguageResponse) Reset()         { *m = PlayerSetLanguageResponse{} }
func (m *PlayerSetLanguageResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerSetLanguageResponse) ProtoMessage()    {}
func (*PlayerSetLanguageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e910c183fdc97af3, []int{1}
}
func (m *PlayerSetLanguageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSetLanguageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSetLanguageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerSetLanguageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSetLanguageResponse.Merge(m, src)
}
func (m *PlayerSetLanguageResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSetLanguageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSetLanguageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSetLanguageResponse proto.InternalMessageInfo

// PlayerSetTimezone
type PlayerSetTimezoneRequest struct {
	PlayerID   uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	TimezoneID uint32 `protobuf:"varint,2,opt,name=TimezoneID,proto3" json:"TimezoneID,omitempty"`
}

func (m *PlayerSetTimezoneRequest) Reset()         { *m = PlayerSetTimezoneRequest{} }
func (m *PlayerSetTimezoneRequest) String() string { return proto.CompactTextString(m) }
func (*PlayerSetTimezoneRequest) ProtoMessage()    {}
func (*PlayerSetTimezoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e910c183fdc97af3, []int{2}
}
func (m *PlayerSetTimezoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSetTimezoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSetTimezoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerSetTimezoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSetTimezoneRequest.Merge(m, src)
}
func (m *PlayerSetTimezoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSetTimezoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSetTimezoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSetTimezoneRequest proto.InternalMessageInfo

func (m *PlayerSetTimezoneRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *PlayerSetTimezoneRequest) GetTimezoneID() uint32 {
	if m != nil {
		return m.TimezoneID
	}
	return 0
}

type PlayerSetTimezoneResponse struct {
}

func (m *PlayerSetTimezoneResponse) Reset()         { *m = PlayerSetTimezoneResponse{} }
func (m *PlayerSetTimezoneResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerSetTimezoneResponse) ProtoMessage()    {}
func (*PlayerSetTimezoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e910c183fdc97af3, []int{3}
}
func (m *PlayerSetTimezoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSetTimezoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSetTimezoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerSetTimezoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSetTimezoneResponse.Merge(m, src)
}
func (m *PlayerSetTimezoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSetTimezoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSetTimezoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSetTimezoneResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PlayerSetLanguageRequest)(nil), "player_configuration.PlayerSetLanguageRequest")
	proto.RegisterType((*PlayerSetLanguageResponse)(nil), "player_configuration.PlayerSetLanguageResponse")
	proto.RegisterType((*PlayerSetTimezoneRequest)(nil), "player_configuration.PlayerSetTimezoneRequest")
	proto.RegisterType((*PlayerSetTimezoneResponse)(nil), "player_configuration.PlayerSetTimezoneResponse")
}

func init() { proto.RegisterFile("proto/player_configuration.proto", fileDescriptor_e910c183fdc97af3) }

var fileDescriptor_e910c183fdc97af3 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xc8, 0x49, 0xac, 0x4c, 0x2d, 0x8a, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x2f,
	0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x4b, 0x09, 0x89, 0x60, 0x93, 0x53, 0x0a, 0xe3,
	0x92, 0x08, 0x00, 0x8b, 0x07, 0xa7, 0x96, 0xf8, 0x24, 0xe6, 0xa5, 0x97, 0x26, 0xa6, 0xa7, 0x06,
	0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x71, 0x71, 0x40, 0xe4, 0x3c, 0x5d, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x78, 0x83, 0xe0, 0x7c, 0x21, 0x39, 0x2e, 0x2e, 0x98, 0x72, 0x4f, 0x17, 0x09,
	0x26, 0xb0, 0x2c, 0x92, 0x88, 0x92, 0x34, 0x97, 0x24, 0x16, 0x73, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x51, 0x2c, 0x0d, 0xc9, 0xcc, 0x4d, 0xad, 0xca, 0xcf, 0x23, 0xd6, 0x52, 0x98, 0x72, 0x84,
	0xa5, 0x08, 0x11, 0x14, 0x4b, 0x11, 0xe6, 0x42, 0x2c, 0x75, 0x92, 0x3b, 0xf1, 0x48, 0x8e, 0xf1,
	0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e,
	0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x16, 0x3d, 0xeb, 0x82, 0xa4, 0x24, 0x36, 0x70, 0x30, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x27, 0x1d, 0x77, 0x4a, 0x01, 0x00, 0x00,
}

func (m *PlayerSetLanguageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSetLanguageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerSetLanguageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LanguageID != 0 {
		i = encodeVarintPlayerConfiguration(dAtA, i, uint64(m.LanguageID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlayerConfiguration(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerSetLanguageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSetLanguageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerSetLanguageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PlayerSetTimezoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSetTimezoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerSetTimezoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimezoneID != 0 {
		i = encodeVarintPlayerConfiguration(dAtA, i, uint64(m.TimezoneID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlayerConfiguration(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerSetTimezoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSetTimezoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerSetTimezoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPlayerConfiguration(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerConfiguration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerSetLanguageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerConfiguration(uint64(m.PlayerID))
	}
	if m.LanguageID != 0 {
		n += 1 + sovPlayerConfiguration(uint64(m.LanguageID))
	}
	return n
}

func (m *PlayerSetLanguageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PlayerSetTimezoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerConfiguration(uint64(m.PlayerID))
	}
	if m.TimezoneID != 0 {
		n += 1 + sovPlayerConfiguration(uint64(m.TimezoneID))
	}
	return n
}

func (m *PlayerSetTimezoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPlayerConfiguration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerConfiguration(x uint64) (n int) {
	return sovPlayerConfiguration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerSetLanguageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSetLanguageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSetLanguageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageID", wireType)
			}
			m.LanguageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LanguageID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerSetLanguageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSetLanguageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSetLanguageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerSetTimezoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSetTimezoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSetTimezoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimezoneID", wireType)
			}
			m.TimezoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimezoneID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerSetTimezoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSetTimezoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSetTimezoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerConfiguration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerConfiguration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerConfiguration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerConfiguration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerConfiguration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerConfiguration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerConfiguration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerConfiguration = fmt.Errorf("proto: unexpected end of group")
)
