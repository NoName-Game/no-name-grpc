// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/player.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Player struct {
	ID         uint32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Username   string      `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	LevelID    uint32      `protobuf:"varint,3,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
	Level      *Level      `protobuf:"bytes,4,opt,name=Level,proto3" json:"Level,omitempty"`
	LifePoint  int64       `protobuf:"varint,5,opt,name=LifePoint,proto3" json:"LifePoint,omitempty"`
	Dead       bool        `protobuf:"varint,6,opt,name=Dead,proto3" json:"Dead,omitempty"`
	Tutorial   bool        `protobuf:"varint,7,opt,name=Tutorial,proto3" json:"Tutorial,omitempty"`
	Banned     bool        `protobuf:"varint,8,opt,name=Banned,proto3" json:"Banned,omitempty"`
	ChatID     int64       `protobuf:"varint,9,opt,name=ChatID,proto3" json:"ChatID,omitempty"`
	LanguageID uint32      `protobuf:"varint,10,opt,name=LanguageID,proto3" json:"LanguageID,omitempty"`
	Language   *Language   `protobuf:"bytes,11,opt,name=Language,proto3" json:"Language,omitempty"`
	TimezoneID uint32      `protobuf:"varint,12,opt,name=TimezoneID,proto3" json:"TimezoneID,omitempty"`
	Timezone   *Timezone   `protobuf:"bytes,13,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
	RankID     uint32      `protobuf:"varint,14,opt,name=RankID,proto3" json:"RankID,omitempty"`
	Rank       *PlayerRank `protobuf:"bytes,15,opt,name=Rank,proto3" json:"Rank,omitempty"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{0}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Player) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Player) GetLevelID() uint32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

func (m *Player) GetLevel() *Level {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *Player) GetLifePoint() int64 {
	if m != nil {
		return m.LifePoint
	}
	return 0
}

func (m *Player) GetDead() bool {
	if m != nil {
		return m.Dead
	}
	return false
}

func (m *Player) GetTutorial() bool {
	if m != nil {
		return m.Tutorial
	}
	return false
}

func (m *Player) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

func (m *Player) GetChatID() int64 {
	if m != nil {
		return m.ChatID
	}
	return 0
}

func (m *Player) GetLanguageID() uint32 {
	if m != nil {
		return m.LanguageID
	}
	return 0
}

func (m *Player) GetLanguage() *Language {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *Player) GetTimezoneID() uint32 {
	if m != nil {
		return m.TimezoneID
	}
	return 0
}

func (m *Player) GetTimezone() *Timezone {
	if m != nil {
		return m.Timezone
	}
	return nil
}

func (m *Player) GetRankID() uint32 {
	if m != nil {
		return m.RankID
	}
	return 0
}

func (m *Player) GetRank() *PlayerRank {
	if m != nil {
		return m.Rank
	}
	return nil
}

// GetPlayerByID
type GetPlayerByIDRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetPlayerByIDRequest) Reset()         { *m = GetPlayerByIDRequest{} }
func (m *GetPlayerByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerByIDRequest) ProtoMessage()    {}
func (*GetPlayerByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{1}
}
func (m *GetPlayerByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerByIDRequest.Merge(m, src)
}
func (m *GetPlayerByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerByIDRequest proto.InternalMessageInfo

func (m *GetPlayerByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetPlayerByIDResponse struct {
	Player *Player `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (m *GetPlayerByIDResponse) Reset()         { *m = GetPlayerByIDResponse{} }
func (m *GetPlayerByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerByIDResponse) ProtoMessage()    {}
func (*GetPlayerByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{2}
}
func (m *GetPlayerByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerByIDResponse.Merge(m, src)
}
func (m *GetPlayerByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerByIDResponse proto.InternalMessageInfo

func (m *GetPlayerByIDResponse) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

// FindPlayerByUsername
type GetPlayerByUsernameRequest struct {
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
}

func (m *GetPlayerByUsernameRequest) Reset()         { *m = GetPlayerByUsernameRequest{} }
func (m *GetPlayerByUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerByUsernameRequest) ProtoMessage()    {}
func (*GetPlayerByUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{3}
}
func (m *GetPlayerByUsernameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerByUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerByUsernameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerByUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerByUsernameRequest.Merge(m, src)
}
func (m *GetPlayerByUsernameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerByUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerByUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerByUsernameRequest proto.InternalMessageInfo

func (m *GetPlayerByUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetPlayerByUsernameResponse struct {
	Player *Player `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (m *GetPlayerByUsernameResponse) Reset()         { *m = GetPlayerByUsernameResponse{} }
func (m *GetPlayerByUsernameResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerByUsernameResponse) ProtoMessage()    {}
func (*GetPlayerByUsernameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{4}
}
func (m *GetPlayerByUsernameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerByUsernameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerByUsernameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerByUsernameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerByUsernameResponse.Merge(m, src)
}
func (m *GetPlayerByUsernameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerByUsernameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerByUsernameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerByUsernameResponse proto.InternalMessageInfo

func (m *GetPlayerByUsernameResponse) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

// SignIn
type SignInRequest struct {
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	ChatID   int64  `protobuf:"varint,2,opt,name=ChatID,proto3" json:"ChatID,omitempty"`
}

func (m *SignInRequest) Reset()         { *m = SignInRequest{} }
func (m *SignInRequest) String() string { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()    {}
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{5}
}
func (m *SignInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInRequest.Merge(m, src)
}
func (m *SignInRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignInRequest proto.InternalMessageInfo

func (m *SignInRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignInRequest) GetChatID() int64 {
	if m != nil {
		return m.ChatID
	}
	return 0
}

type SignInResponse struct {
	Player *Player `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (m *SignInResponse) Reset()         { *m = SignInResponse{} }
func (m *SignInResponse) String() string { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()    {}
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{6}
}
func (m *SignInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInResponse.Merge(m, src)
}
func (m *SignInResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignInResponse proto.InternalMessageInfo

func (m *SignInResponse) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

// GetPlayerExperience
type GetPlayerExperienceRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerExperienceRequest) Reset()         { *m = GetPlayerExperienceRequest{} }
func (m *GetPlayerExperienceRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerExperienceRequest) ProtoMessage()    {}
func (*GetPlayerExperienceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{7}
}
func (m *GetPlayerExperienceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerExperienceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerExperienceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerExperienceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerExperienceRequest.Merge(m, src)
}
func (m *GetPlayerExperienceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerExperienceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerExperienceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerExperienceRequest proto.InternalMessageInfo

func (m *GetPlayerExperienceRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerExperienceResponse struct {
	Value int64 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *GetPlayerExperienceResponse) Reset()         { *m = GetPlayerExperienceResponse{} }
func (m *GetPlayerExperienceResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerExperienceResponse) ProtoMessage()    {}
func (*GetPlayerExperienceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{8}
}
func (m *GetPlayerExperienceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerExperienceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerExperienceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerExperienceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerExperienceResponse.Merge(m, src)
}
func (m *GetPlayerExperienceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerExperienceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerExperienceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerExperienceResponse proto.InternalMessageInfo

func (m *GetPlayerExperienceResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// GetPlayerLifePoint
type GetPlayerLifePointRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerLifePointRequest) Reset()         { *m = GetPlayerLifePointRequest{} }
func (m *GetPlayerLifePointRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerLifePointRequest) ProtoMessage()    {}
func (*GetPlayerLifePointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{9}
}
func (m *GetPlayerLifePointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerLifePointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerLifePointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerLifePointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerLifePointRequest.Merge(m, src)
}
func (m *GetPlayerLifePointRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerLifePointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerLifePointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerLifePointRequest proto.InternalMessageInfo

func (m *GetPlayerLifePointRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerLifePointResponse struct {
	Value int64 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *GetPlayerLifePointResponse) Reset()         { *m = GetPlayerLifePointResponse{} }
func (m *GetPlayerLifePointResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerLifePointResponse) ProtoMessage()    {}
func (*GetPlayerLifePointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{10}
}
func (m *GetPlayerLifePointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerLifePointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerLifePointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerLifePointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerLifePointResponse.Merge(m, src)
}
func (m *GetPlayerLifePointResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerLifePointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerLifePointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerLifePointResponse proto.InternalMessageInfo

func (m *GetPlayerLifePointResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// GetPlayerDailyReward
type GetPlayerDailyRewardRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerDailyRewardRequest) Reset()         { *m = GetPlayerDailyRewardRequest{} }
func (m *GetPlayerDailyRewardRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerDailyRewardRequest) ProtoMessage()    {}
func (*GetPlayerDailyRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{11}
}
func (m *GetPlayerDailyRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerDailyRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerDailyRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerDailyRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerDailyRewardRequest.Merge(m, src)
}
func (m *GetPlayerDailyRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerDailyRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerDailyRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerDailyRewardRequest proto.InternalMessageInfo

func (m *GetPlayerDailyRewardRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerDailyRewardResponse struct {
	Experience int32 `protobuf:"varint,1,opt,name=Experience,proto3" json:"Experience,omitempty"`
	Money      int32 `protobuf:"varint,2,opt,name=Money,proto3" json:"Money,omitempty"`
	Diamond    int32 `protobuf:"varint,3,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	Item       *Item `protobuf:"bytes,4,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetPlayerDailyRewardResponse) Reset()         { *m = GetPlayerDailyRewardResponse{} }
func (m *GetPlayerDailyRewardResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerDailyRewardResponse) ProtoMessage()    {}
func (*GetPlayerDailyRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb355f96931a95, []int{12}
}
func (m *GetPlayerDailyRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerDailyRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerDailyRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerDailyRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerDailyRewardResponse.Merge(m, src)
}
func (m *GetPlayerDailyRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerDailyRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerDailyRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerDailyRewardResponse proto.InternalMessageInfo

func (m *GetPlayerDailyRewardResponse) GetExperience() int32 {
	if m != nil {
		return m.Experience
	}
	return 0
}

func (m *GetPlayerDailyRewardResponse) GetMoney() int32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *GetPlayerDailyRewardResponse) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *GetPlayerDailyRewardResponse) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func init() {
	proto.RegisterType((*Player)(nil), "player.Player")
	proto.RegisterType((*GetPlayerByIDRequest)(nil), "player.GetPlayerByIDRequest")
	proto.RegisterType((*GetPlayerByIDResponse)(nil), "player.GetPlayerByIDResponse")
	proto.RegisterType((*GetPlayerByUsernameRequest)(nil), "player.GetPlayerByUsernameRequest")
	proto.RegisterType((*GetPlayerByUsernameResponse)(nil), "player.GetPlayerByUsernameResponse")
	proto.RegisterType((*SignInRequest)(nil), "player.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "player.SignInResponse")
	proto.RegisterType((*GetPlayerExperienceRequest)(nil), "player.GetPlayerExperienceRequest")
	proto.RegisterType((*GetPlayerExperienceResponse)(nil), "player.GetPlayerExperienceResponse")
	proto.RegisterType((*GetPlayerLifePointRequest)(nil), "player.GetPlayerLifePointRequest")
	proto.RegisterType((*GetPlayerLifePointResponse)(nil), "player.GetPlayerLifePointResponse")
	proto.RegisterType((*GetPlayerDailyRewardRequest)(nil), "player.GetPlayerDailyRewardRequest")
	proto.RegisterType((*GetPlayerDailyRewardResponse)(nil), "player.GetPlayerDailyRewardResponse")
}

func init() { proto.RegisterFile("proto/player.proto", fileDescriptor_09cb355f96931a95) }

var fileDescriptor_09cb355f96931a95 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0x26, 0xd9, 0x34, 0x79, 0x69, 0xa2, 0x0e, 0xd1, 0x8e, 0xb1, 0x2c, 0x61, 0x0f, 0x25,
	0x20, 0xac, 0x90, 0x1e, 0xac, 0x78, 0x10, 0xd2, 0x2d, 0xb2, 0x10, 0xa1, 0x8c, 0xd5, 0x83, 0x17,
	0x99, 0x9a, 0x31, 0x2e, 0xdd, 0xcc, 0xc6, 0xcd, 0x46, 0x8d, 0x1f, 0x42, 0xfc, 0x58, 0x1e, 0x7b,
	0x11, 0x3c, 0x4a, 0xf2, 0x45, 0x64, 0xfe, 0x6d, 0xc6, 0x52, 0x24, 0xd2, 0xdb, 0xfe, 0x7e, 0xef,
	0xdf, 0xef, 0xcd, 0x7b, 0xfb, 0x00, 0xcd, 0xb2, 0x34, 0x4f, 0x1f, 0xcd, 0x12, 0xba, 0x64, 0x59,
	0x20, 0x01, 0xaa, 0x29, 0xd4, 0xed, 0x28, 0x5b, 0x42, 0xf9, 0x64, 0x41, 0x27, 0x4c, 0x59, 0xbb,
	0x77, 0x34, 0xcb, 0x3e, 0xb1, 0x44, 0x53, 0xda, 0x31, 0x8f, 0xa7, 0xec, 0x6b, 0xca, 0x8d, 0xe3,
	0x6d, 0xc5, 0xc6, 0x39, 0x9b, 0x6a, 0x66, 0xcf, 0x2e, 0xf6, 0x36, 0xa3, 0xfc, 0x42, 0x19, 0xfc,
	0x9f, 0x15, 0xa8, 0x9d, 0x4a, 0x16, 0xb5, 0xa1, 0x1c, 0x85, 0xd8, 0xe9, 0x39, 0xfd, 0x16, 0x29,
	0x47, 0x21, 0xea, 0x42, 0xfd, 0xd5, 0x9c, 0x65, 0x9c, 0x4e, 0x19, 0x2e, 0xf7, 0x9c, 0x7e, 0x83,
	0x14, 0x18, 0x61, 0xd8, 0x19, 0x09, 0x19, 0x51, 0x88, 0x2b, 0x32, 0xc0, 0x40, 0xe4, 0x83, 0x2b,
	0x3f, 0x71, 0xb5, 0xe7, 0xf4, 0x9b, 0x83, 0xdd, 0x40, 0xc9, 0x95, 0x1c, 0x51, 0x26, 0xb4, 0x0f,
	0x8d, 0x51, 0xfc, 0x9e, 0x9d, 0xa6, 0x31, 0xcf, 0xb1, 0xdb, 0x73, 0xfa, 0x15, 0xb2, 0x21, 0x10,
	0x82, 0x6a, 0xc8, 0xe8, 0x18, 0xd7, 0x7a, 0x4e, 0xbf, 0x4e, 0xe4, 0xb7, 0xd0, 0x72, 0xb6, 0xc8,
	0xd3, 0x2c, 0xa6, 0x09, 0xde, 0x91, 0x7c, 0x81, 0xd1, 0x3d, 0xa8, 0x0d, 0x29, 0xe7, 0x6c, 0x8c,
	0xeb, 0xd2, 0xa2, 0x91, 0xe0, 0x8f, 0x3f, 0xd0, 0x3c, 0x0a, 0x71, 0x43, 0x96, 0xd0, 0x08, 0x79,
	0x00, 0x23, 0xfd, 0xb0, 0x51, 0x88, 0x41, 0xca, 0xb7, 0x18, 0x14, 0x40, 0xdd, 0x20, 0xdc, 0x94,
	0x4d, 0xa0, 0xa0, 0x98, 0x84, 0xb1, 0x90, 0xc2, 0x47, 0xe4, 0x3b, 0xd3, 0xef, 0x1f, 0x85, 0x78,
	0x57, 0xe5, 0xdb, 0x30, 0x22, 0x9f, 0x41, 0xb8, 0xa5, 0xf3, 0x15, 0x03, 0x33, 0x16, 0x52, 0xf8,
	0x08, 0xdd, 0x84, 0xf2, 0x8b, 0x28, 0xc4, 0x6d, 0x99, 0x4b, 0x23, 0xf4, 0x10, 0xaa, 0xe2, 0x0b,
	0xdf, 0x92, 0x39, 0xf6, 0x02, 0x7b, 0x98, 0x6a, 0x84, 0xc2, 0x4c, 0xa4, 0x93, 0x7f, 0x00, 0x9d,
	0xe7, 0x2c, 0x57, 0xf4, 0x70, 0x19, 0x85, 0x84, 0x7d, 0x5c, 0xb0, 0x79, 0x7e, 0x75, 0xc8, 0xfe,
	0x33, 0xb8, 0x7b, 0xc5, 0x6f, 0x3e, 0x4b, 0xf9, 0x9c, 0xa1, 0x03, 0xb3, 0x17, 0xd2, 0xb9, 0x39,
	0x68, 0xeb, 0x7a, 0xa6, 0x94, 0xb6, 0xfa, 0x47, 0xd0, 0xb5, 0x12, 0x98, 0x05, 0x31, 0xe5, 0xec,
	0x1d, 0x72, 0xfe, 0xde, 0x21, 0xff, 0x04, 0x1e, 0x5c, 0x1b, 0xf9, 0x9f, 0x02, 0x8e, 0xa1, 0xf5,
	0x32, 0x9e, 0xf0, 0x88, 0x6f, 0x51, 0xd3, 0xda, 0x89, 0xb2, 0xbd, 0x13, 0xfe, 0x11, 0xb4, 0x4d,
	0x92, 0x1b, 0xf4, 0x7f, 0xf2, 0x65, 0xc6, 0xb2, 0x98, 0xf1, 0x77, 0x76, 0xff, 0xca, 0x54, 0x3c,
	0x7a, 0x81, 0xfd, 0x43, 0xab, 0x7f, 0x3b, 0x52, 0x0b, 0xe8, 0x80, 0xfb, 0x9a, 0x26, 0x0b, 0xd5,
	0x43, 0x85, 0x28, 0xe0, 0x3f, 0x86, 0xfb, 0x45, 0x50, 0xf1, 0xcb, 0x6c, 0x53, 0x6d, 0x60, 0xe9,
	0xb4, 0x02, 0xff, 0x59, 0xec, 0x89, 0xa5, 0x30, 0xa4, 0x71, 0xb2, 0x24, 0xec, 0x33, 0xcd, 0xc6,
	0xdb, 0x94, 0xfb, 0xe6, 0xc0, 0xfe, 0xf5, 0xb1, 0xba, 0xa2, 0x07, 0xb0, 0x69, 0x5a, 0x86, 0xbb,
	0xc4, 0x62, 0x84, 0xa2, 0x17, 0x29, 0x67, 0x4b, 0x39, 0x28, 0x97, 0x28, 0x20, 0xee, 0x4e, 0x18,
	0xd3, 0x69, 0xca, 0xc7, 0xf2, 0xee, 0xb8, 0xc4, 0x40, 0xe4, 0x41, 0x35, 0xca, 0xd9, 0x54, 0x9f,
	0x1d, 0x08, 0xe4, 0xf1, 0x13, 0x0c, 0x91, 0xfc, 0xd0, 0xfb, 0xb1, 0xf2, 0x9c, 0xcb, 0x95, 0xe7,
	0xfc, 0x5e, 0x79, 0xce, 0xf7, 0xb5, 0x57, 0xba, 0x5c, 0x7b, 0xa5, 0x5f, 0x6b, 0xaf, 0xf4, 0xa6,
	0x1a, 0x3c, 0x9d, 0x9d, 0x9f, 0xd7, 0xe4, 0x3d, 0x3c, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb1,
	0xb1, 0xb1, 0x69, 0x97, 0x05, 0x00, 0x00,
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Player) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rank != nil {
		{
			size, err := m.Rank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.RankID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.RankID))
		i--
		dAtA[i] = 0x70
	}
	if m.Timezone != nil {
		{
			size, err := m.Timezone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.TimezoneID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.TimezoneID))
		i--
		dAtA[i] = 0x60
	}
	if m.Language != nil {
		{
			size, err := m.Language.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LanguageID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.LanguageID))
		i--
		dAtA[i] = 0x50
	}
	if m.ChatID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.ChatID))
		i--
		dAtA[i] = 0x48
	}
	if m.Banned {
		i--
		if m.Banned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Tutorial {
		i--
		if m.Tutorial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Dead {
		i--
		if m.Dead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.LifePoint != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.LifePoint))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LevelID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.LevelID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerByUsernameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerByUsernameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerByUsernameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerByUsernameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerByUsernameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerByUsernameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChatID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.ChatID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerExperienceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerExperienceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerExperienceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerExperienceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerExperienceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerExperienceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerLifePointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerLifePointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerLifePointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerLifePointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerLifePointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerLifePointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerDailyRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerDailyRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerDailyRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerDailyRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerDailyRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerDailyRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Diamond != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Diamond))
		i--
		dAtA[i] = 0x18
	}
	if m.Money != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if m.Experience != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Experience))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlayer(uint64(m.ID))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.LevelID != 0 {
		n += 1 + sovPlayer(uint64(m.LevelID))
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.LifePoint != 0 {
		n += 1 + sovPlayer(uint64(m.LifePoint))
	}
	if m.Dead {
		n += 2
	}
	if m.Tutorial {
		n += 2
	}
	if m.Banned {
		n += 2
	}
	if m.ChatID != 0 {
		n += 1 + sovPlayer(uint64(m.ChatID))
	}
	if m.LanguageID != 0 {
		n += 1 + sovPlayer(uint64(m.LanguageID))
	}
	if m.Language != nil {
		l = m.Language.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.TimezoneID != 0 {
		n += 1 + sovPlayer(uint64(m.TimezoneID))
	}
	if m.Timezone != nil {
		l = m.Timezone.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.RankID != 0 {
		n += 1 + sovPlayer(uint64(m.RankID))
	}
	if m.Rank != nil {
		l = m.Rank.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func (m *GetPlayerByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlayer(uint64(m.ID))
	}
	return n
}

func (m *GetPlayerByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func (m *GetPlayerByUsernameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func (m *GetPlayerByUsernameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func (m *SignInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.ChatID != 0 {
		n += 1 + sovPlayer(uint64(m.ChatID))
	}
	return n
}

func (m *SignInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func (m *GetPlayerExperienceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayer(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerExperienceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovPlayer(uint64(m.Value))
	}
	return n
}

func (m *GetPlayerLifePointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayer(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerLifePointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovPlayer(uint64(m.Value))
	}
	return n
}

func (m *GetPlayerDailyRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayer(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerDailyRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Experience != 0 {
		n += 1 + sovPlayer(uint64(m.Experience))
	}
	if m.Money != 0 {
		n += 1 + sovPlayer(uint64(m.Money))
	}
	if m.Diamond != 0 {
		n += 1 + sovPlayer(uint64(m.Diamond))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	return n
}

func sovPlayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayer(x uint64) (n int) {
	return sovPlayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &Level{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifePoint", wireType)
			}
			m.LifePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifePoint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dead = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tutorial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tutorial = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Banned = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatID", wireType)
			}
			m.ChatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageID", wireType)
			}
			m.LanguageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LanguageID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Language == nil {
				m.Language = &Language{}
			}
			if err := m.Language.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimezoneID", wireType)
			}
			m.TimezoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimezoneID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timezone == nil {
				m.Timezone = &Timezone{}
			}
			if err := m.Timezone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankID", wireType)
			}
			m.RankID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rank == nil {
				m.Rank = &PlayerRank{}
			}
			if err := m.Rank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerByUsernameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerByUsernameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerByUsernameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerByUsernameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerByUsernameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerByUsernameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatID", wireType)
			}
			m.ChatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerExperienceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerExperienceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerExperienceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerExperienceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerExperienceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerExperienceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerLifePointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerLifePointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerLifePointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerLifePointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerLifePointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerLifePointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerDailyRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerDailyRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerDailyRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerDailyRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerDailyRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerDailyRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			m.Experience = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Experience |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayer = fmt.Errorf("proto: unexpected end of group")
)
