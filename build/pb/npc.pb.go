// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/npc.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NPC struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug                 string   `protobuf:"bytes,3,opt,name=Slug,proto3" json:"Slug,omitempty"`
	OpeningTime          int32    `protobuf:"varint,4,opt,name=OpeningTime,proto3" json:"OpeningTime,omitempty"`
	ClosingTime          int32    `protobuf:"varint,5,opt,name=ClosingTime,proto3" json:"ClosingTime,omitempty"`
	Enabled              bool     `protobuf:"varint,6,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NPC) Reset()         { *m = NPC{} }
func (m *NPC) String() string { return proto.CompactTextString(m) }
func (*NPC) ProtoMessage()    {}
func (*NPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{0}
}
func (m *NPC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NPC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NPC.Merge(m, src)
}
func (m *NPC) XXX_Size() int {
	return m.Size()
}
func (m *NPC) XXX_DiscardUnknown() {
	xxx_messageInfo_NPC.DiscardUnknown(m)
}

var xxx_messageInfo_NPC proto.InternalMessageInfo

func (m *NPC) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *NPC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NPC) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *NPC) GetOpeningTime() int32 {
	if m != nil {
		return m.OpeningTime
	}
	return 0
}

func (m *NPC) GetClosingTime() int32 {
	if m != nil {
		return m.ClosingTime
	}
	return 0
}

func (m *NPC) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// GetAllNPC
type GetAllNPCRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllNPCRequest) Reset()         { *m = GetAllNPCRequest{} }
func (m *GetAllNPCRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllNPCRequest) ProtoMessage()    {}
func (*GetAllNPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{1}
}
func (m *GetAllNPCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllNPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllNPCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllNPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllNPCRequest.Merge(m, src)
}
func (m *GetAllNPCRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllNPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllNPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllNPCRequest proto.InternalMessageInfo

type GetAllNPCResponse struct {
	NPCs                 []*NPC   `protobuf:"bytes,1,rep,name=NPCs,proto3" json:"NPCs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllNPCResponse) Reset()         { *m = GetAllNPCResponse{} }
func (m *GetAllNPCResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllNPCResponse) ProtoMessage()    {}
func (*GetAllNPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{2}
}
func (m *GetAllNPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllNPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllNPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllNPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllNPCResponse.Merge(m, src)
}
func (m *GetAllNPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllNPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllNPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllNPCResponse proto.InternalMessageInfo

func (m *GetAllNPCResponse) GetNPCs() []*NPC {
	if m != nil {
		return m.NPCs
	}
	return nil
}

// Bank Deposit
type BankDepositRequest struct {
	PlayerID             uint32   `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Amount               int32    `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BankDepositRequest) Reset()         { *m = BankDepositRequest{} }
func (m *BankDepositRequest) String() string { return proto.CompactTextString(m) }
func (*BankDepositRequest) ProtoMessage()    {}
func (*BankDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{3}
}
func (m *BankDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankDepositRequest.Merge(m, src)
}
func (m *BankDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *BankDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BankDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BankDepositRequest proto.InternalMessageInfo

func (m *BankDepositRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *BankDepositRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type BankDepositResponse struct {
	Value                int32    `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BankDepositResponse) Reset()         { *m = BankDepositResponse{} }
func (m *BankDepositResponse) String() string { return proto.CompactTextString(m) }
func (*BankDepositResponse) ProtoMessage()    {}
func (*BankDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{4}
}
func (m *BankDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankDepositResponse.Merge(m, src)
}
func (m *BankDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *BankDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BankDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BankDepositResponse proto.InternalMessageInfo

func (m *BankDepositResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Bank Deposit Withdraw
type BankWithdrawRequest struct {
	PlayerID             uint32   `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Amount               int32    `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BankWithdrawRequest) Reset()         { *m = BankWithdrawRequest{} }
func (m *BankWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*BankWithdrawRequest) ProtoMessage()    {}
func (*BankWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{5}
}
func (m *BankWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankWithdrawRequest.Merge(m, src)
}
func (m *BankWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *BankWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BankWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BankWithdrawRequest proto.InternalMessageInfo

func (m *BankWithdrawRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *BankWithdrawRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type BankWithdrawResponse struct {
	Value                int32    `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BankWithdrawResponse) Reset()         { *m = BankWithdrawResponse{} }
func (m *BankWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*BankWithdrawResponse) ProtoMessage()    {}
func (*BankWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{6}
}
func (m *BankWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankWithdrawResponse.Merge(m, src)
}
func (m *BankWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *BankWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BankWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BankWithdrawResponse proto.InternalMessageInfo

func (m *BankWithdrawResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*NPC)(nil), "npc.NPC")
	proto.RegisterType((*GetAllNPCRequest)(nil), "npc.GetAllNPCRequest")
	proto.RegisterType((*GetAllNPCResponse)(nil), "npc.GetAllNPCResponse")
	proto.RegisterType((*BankDepositRequest)(nil), "npc.BankDepositRequest")
	proto.RegisterType((*BankDepositResponse)(nil), "npc.BankDepositResponse")
	proto.RegisterType((*BankWithdrawRequest)(nil), "npc.BankWithdrawRequest")
	proto.RegisterType((*BankWithdrawResponse)(nil), "npc.BankWithdrawResponse")
}

func init() { proto.RegisterFile("proto/npc.proto", fileDescriptor_8ae1f6e76b0ace78) }

var fileDescriptor_8ae1f6e76b0ace78 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x99, 0x26, 0xe9, 0xd7, 0xef, 0x96, 0xfa, 0xe7, 0x5a, 0x64, 0x10, 0x29, 0x21, 0xab,
	0x80, 0x52, 0x51, 0x97, 0xae, 0xda, 0x44, 0x34, 0x9b, 0x18, 0x46, 0x51, 0x70, 0x97, 0xb6, 0x43,
	0x0d, 0x4e, 0x27, 0x63, 0x33, 0x41, 0x7c, 0x16, 0x5f, 0xc8, 0xa5, 0x8f, 0x20, 0x7d, 0x12, 0xc9,
	0xa4, 0x95, 0x76, 0xe3, 0xc6, 0xdd, 0x3d, 0xbf, 0x1c, 0xce, 0xe1, 0x64, 0x60, 0x5b, 0xcd, 0x73,
	0x9d, 0x9f, 0x48, 0x35, 0xee, 0x9b, 0x0b, 0x2d, 0xa9, 0xc6, 0xde, 0x3b, 0x01, 0x2b, 0x4e, 0x02,
	0xdc, 0x82, 0x46, 0x14, 0x52, 0xe2, 0x12, 0xbf, 0xc3, 0x1a, 0x51, 0x88, 0x08, 0x76, 0x9c, 0xce,
	0x38, 0x6d, 0xb8, 0xc4, 0xff, 0xcf, 0xcc, 0x5d, 0xb1, 0x5b, 0x51, 0x4e, 0xa9, 0x55, 0xb3, 0xea,
	0x46, 0x17, 0xda, 0x37, 0x8a, 0xcb, 0x4c, 0x4e, 0xef, 0xb2, 0x19, 0xa7, 0xb6, 0x4b, 0x7c, 0x87,
	0xad, 0xa3, 0xca, 0x11, 0x88, 0xbc, 0x58, 0x39, 0x9c, 0xda, 0xb1, 0x86, 0x90, 0xc2, 0xbf, 0x4b,
	0x99, 0x8e, 0x04, 0x9f, 0xd0, 0xa6, 0x4b, 0xfc, 0x16, 0x5b, 0x49, 0x0f, 0x61, 0xe7, 0x8a, 0xeb,
	0x81, 0x10, 0x71, 0x12, 0x30, 0xfe, 0x52, 0xf2, 0x42, 0x7b, 0xa7, 0xb0, 0xbb, 0xc6, 0x0a, 0x95,
	0xcb, 0x82, 0xe3, 0x21, 0xd8, 0x71, 0x12, 0x14, 0x94, 0xb8, 0x96, 0xdf, 0x3e, 0x6b, 0xf5, 0xab,
	0x95, 0xd5, 0x77, 0x43, 0xbd, 0x6b, 0xc0, 0x61, 0x2a, 0x9f, 0x43, 0xae, 0xf2, 0x22, 0xd3, 0xcb,
	0x20, 0x3c, 0x80, 0x56, 0x22, 0xd2, 0x37, 0x3e, 0x8f, 0x42, 0x33, 0xb3, 0xc3, 0x7e, 0x34, 0xee,
	0x43, 0x73, 0x30, 0xcb, 0x4b, 0xa9, 0xcd, 0x58, 0x87, 0x2d, 0x95, 0x77, 0x04, 0x7b, 0x1b, 0x49,
	0xcb, 0xfa, 0x2e, 0x38, 0xf7, 0xa9, 0x28, 0xb9, 0xf9, 0x81, 0x0e, 0xab, 0x85, 0x17, 0xd5, 0xe6,
	0x87, 0x4c, 0x3f, 0x4d, 0xe6, 0xe9, 0xeb, 0x5f, 0x7a, 0x8f, 0xa1, 0xbb, 0x19, 0xf5, 0x5b, 0xf1,
	0x10, 0x3f, 0x16, 0x3d, 0xf2, 0xb9, 0xe8, 0x91, 0xaf, 0x45, 0x8f, 0x3c, 0xda, 0xfd, 0x0b, 0x35,
	0x1a, 0x35, 0xcd, 0xa3, 0x9f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x08, 0xd6, 0xfe, 0x09, 0x07,
	0x02, 0x00, 0x00,
}

func (m *NPC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NPC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NPC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ClosingTime != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.ClosingTime))
		i--
		dAtA[i] = 0x28
	}
	if m.OpeningTime != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.OpeningTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintNpc(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllNPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllNPCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllNPCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAllNPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllNPCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllNPCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NPCs) > 0 {
		for iNdEx := len(m.NPCs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NPCs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BankDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BankDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *BankDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BankDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BankWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BankWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *BankWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BankWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovNpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NPC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovNpc(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNpc(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovNpc(uint64(l))
	}
	if m.OpeningTime != 0 {
		n += 1 + sovNpc(uint64(m.OpeningTime))
	}
	if m.ClosingTime != 0 {
		n += 1 + sovNpc(uint64(m.ClosingTime))
	}
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllNPCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllNPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NPCs) > 0 {
		for _, e := range m.NPCs {
			l = e.Size()
			n += 1 + l + sovNpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovNpc(uint64(m.PlayerID))
	}
	if m.Amount != 0 {
		n += 1 + sovNpc(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNpc(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovNpc(uint64(m.PlayerID))
	}
	if m.Amount != 0 {
		n += 1 + sovNpc(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNpc(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNpc(x uint64) (n int) {
	return sovNpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NPC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NPC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NPC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpeningTime", wireType)
			}
			m.OpeningTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpeningTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingTime", wireType)
			}
			m.ClosingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosingTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllNPCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllNPCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllNPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllNPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllNPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllNPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NPCs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NPCs = append(m.NPCs, &NPC{})
			if err := m.NPCs[len(m.NPCs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNpc = fmt.Errorf("proto: unexpected end of group")
)
