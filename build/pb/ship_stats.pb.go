// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/ship_stats.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ShipStats struct {
	ID        uint32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Integrity uint32  `protobuf:"varint,2,opt,name=Integrity,proto3" json:"Integrity,omitempty"`
	Tank      float64 `protobuf:"fixed64,3,opt,name=Tank,proto3" json:"Tank,omitempty"`
	Hold      uint32  `protobuf:"varint,4,opt,name=Hold,proto3" json:"Hold,omitempty"`
	Engine    float64 `protobuf:"fixed64,5,opt,name=Engine,proto3" json:"Engine,omitempty"`
	Speed     uint32  `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Radar     uint32  `protobuf:"varint,7,opt,name=Radar,proto3" json:"Radar,omitempty"`
	Attack    float64 `protobuf:"fixed64,8,opt,name=Attack,proto3" json:"Attack,omitempty"`
	Shields   float64 `protobuf:"fixed64,9,opt,name=Shields,proto3" json:"Shields,omitempty"`
	Evasion   float64 `protobuf:"fixed64,10,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
}

func (m *ShipStats) Reset()         { *m = ShipStats{} }
func (m *ShipStats) String() string { return proto.CompactTextString(m) }
func (*ShipStats) ProtoMessage()    {}
func (*ShipStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11bf079398d17e8f, []int{0}
}
func (m *ShipStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShipStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShipStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShipStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipStats.Merge(m, src)
}
func (m *ShipStats) XXX_Size() int {
	return m.Size()
}
func (m *ShipStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipStats.DiscardUnknown(m)
}

var xxx_messageInfo_ShipStats proto.InternalMessageInfo

func (m *ShipStats) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ShipStats) GetIntegrity() uint32 {
	if m != nil {
		return m.Integrity
	}
	return 0
}

func (m *ShipStats) GetTank() float64 {
	if m != nil {
		return m.Tank
	}
	return 0
}

func (m *ShipStats) GetHold() uint32 {
	if m != nil {
		return m.Hold
	}
	return 0
}

func (m *ShipStats) GetEngine() float64 {
	if m != nil {
		return m.Engine
	}
	return 0
}

func (m *ShipStats) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *ShipStats) GetRadar() uint32 {
	if m != nil {
		return m.Radar
	}
	return 0
}

func (m *ShipStats) GetAttack() float64 {
	if m != nil {
		return m.Attack
	}
	return 0
}

func (m *ShipStats) GetShields() float64 {
	if m != nil {
		return m.Shields
	}
	return 0
}

func (m *ShipStats) GetEvasion() float64 {
	if m != nil {
		return m.Evasion
	}
	return 0
}

func init() {
	proto.RegisterType((*ShipStats)(nil), "ship_stats.ShipStats")
}

func init() { proto.RegisterFile("proto/ship_stats.proto", fileDescriptor_11bf079398d17e8f) }

var fileDescriptor_11bf079398d17e8f = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0x90, 0xa6, 0xe4, 0x24, 0x18, 0x2c, 0x54, 0xdd, 0x80, 0xac, 0x8a, 0xa9, 0x53,
	0x19, 0x18, 0x99, 0x40, 0xad, 0x44, 0xd6, 0x84, 0x89, 0x05, 0xb9, 0xc4, 0x6a, 0xac, 0x56, 0x8e,
	0x15, 0x5b, 0x48, 0xbc, 0x05, 0x8f, 0xc5, 0xd8, 0x91, 0x11, 0x25, 0x4f, 0xc0, 0x1b, 0x20, 0x9f,
	0x8b, 0xba, 0xdd, 0xf7, 0xfd, 0xbf, 0xfe, 0xe1, 0x60, 0x66, 0xfb, 0xce, 0x77, 0xb7, 0xae, 0xd5,
	0xf6, 0xd5, 0x79, 0xe9, 0xdd, 0x92, 0x04, 0x87, 0x93, 0xb9, 0xf9, 0x65, 0x50, 0xd4, 0xad, 0xb6,
	0x75, 0x20, 0x7e, 0x09, 0x69, 0xb9, 0x42, 0x36, 0x67, 0x8b, 0x8b, 0x2a, 0x2d, 0x57, 0xfc, 0x1a,
	0x8a, 0xd2, 0x78, 0xb5, 0xed, 0xb5, 0xff, 0xc0, 0x94, 0xf4, 0x49, 0x70, 0x0e, 0xd9, 0xb3, 0x34,
	0x3b, 0x3c, 0x9b, 0xb3, 0x05, 0xab, 0xe8, 0x0e, 0xee, 0xa9, 0xdb, 0x37, 0x98, 0x51, 0x99, 0x6e,
	0x3e, 0x83, 0x7c, 0x6d, 0xb6, 0xda, 0x28, 0x9c, 0x50, 0xf3, 0x48, 0xfc, 0x0a, 0x26, 0xb5, 0x55,
	0xaa, 0xc1, 0x9c, 0xca, 0x11, 0x82, 0xad, 0x64, 0x23, 0x7b, 0x9c, 0x46, 0x4b, 0x10, 0x36, 0x1e,
	0xbc, 0x97, 0x6f, 0x3b, 0x3c, 0x8f, 0x1b, 0x91, 0x38, 0xc2, 0xb4, 0x6e, 0xb5, 0xda, 0x37, 0x0e,
	0x0b, 0x0a, 0xfe, 0x31, 0x24, 0xeb, 0x77, 0xe9, 0x74, 0x67, 0x10, 0x62, 0x72, 0xc4, 0x47, 0xf1,
	0x35, 0x08, 0x76, 0x18, 0x04, 0xfb, 0x19, 0x04, 0xfb, 0x1c, 0x45, 0x72, 0x18, 0x45, 0xf2, 0x3d,
	0x8a, 0xe4, 0x25, 0x5b, 0xde, 0xdb, 0xcd, 0x26, 0xa7, 0x37, 0xdd, 0xfd, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xd5, 0xde, 0x52, 0xf2, 0x40, 0x01, 0x00, 0x00,
}

func (m *ShipStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShipStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShipStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evasion != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Evasion))))
		i--
		dAtA[i] = 0x51
	}
	if m.Shields != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Shields))))
		i--
		dAtA[i] = 0x49
	}
	if m.Attack != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Attack))))
		i--
		dAtA[i] = 0x41
	}
	if m.Radar != 0 {
		i = encodeVarintShipStats(dAtA, i, uint64(m.Radar))
		i--
		dAtA[i] = 0x38
	}
	if m.Speed != 0 {
		i = encodeVarintShipStats(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x30
	}
	if m.Engine != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Engine))))
		i--
		dAtA[i] = 0x29
	}
	if m.Hold != 0 {
		i = encodeVarintShipStats(dAtA, i, uint64(m.Hold))
		i--
		dAtA[i] = 0x20
	}
	if m.Tank != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tank))))
		i--
		dAtA[i] = 0x19
	}
	if m.Integrity != 0 {
		i = encodeVarintShipStats(dAtA, i, uint64(m.Integrity))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintShipStats(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShipStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovShipStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShipStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovShipStats(uint64(m.ID))
	}
	if m.Integrity != 0 {
		n += 1 + sovShipStats(uint64(m.Integrity))
	}
	if m.Tank != 0 {
		n += 9
	}
	if m.Hold != 0 {
		n += 1 + sovShipStats(uint64(m.Hold))
	}
	if m.Engine != 0 {
		n += 9
	}
	if m.Speed != 0 {
		n += 1 + sovShipStats(uint64(m.Speed))
	}
	if m.Radar != 0 {
		n += 1 + sovShipStats(uint64(m.Radar))
	}
	if m.Attack != 0 {
		n += 9
	}
	if m.Shields != 0 {
		n += 9
	}
	if m.Evasion != 0 {
		n += 9
	}
	return n
}

func sovShipStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShipStats(x uint64) (n int) {
	return sovShipStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShipStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShipStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShipStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShipStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrity", wireType)
			}
			m.Integrity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Integrity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tank", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tank = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hold", wireType)
			}
			m.Hold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engine", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Engine = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radar", wireType)
			}
			m.Radar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radar |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attack", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Attack = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shields", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Shields = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evasion", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Evasion = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipShipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShipStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShipStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShipStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShipStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShipStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShipStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShipStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShipStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShipStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShipStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShipStats = fmt.Errorf("proto: unexpected end of group")
)
