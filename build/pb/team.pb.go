// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/team.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Team struct {
	ID      uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OwnerID uint32 `protobuf:"varint,2,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{0}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Team) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

// GetTeamDetails
type GetTeamDetailsRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetTeamDetailsRequest) Reset()         { *m = GetTeamDetailsRequest{} }
func (m *GetTeamDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTeamDetailsRequest) ProtoMessage()    {}
func (*GetTeamDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{1}
}
func (m *GetTeamDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamDetailsRequest.Merge(m, src)
}
func (m *GetTeamDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamDetailsRequest proto.InternalMessageInfo

func (m *GetTeamDetailsRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetTeamDetailsResponse struct {
	TeamID   uint32    `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	InTeam   bool      `protobuf:"varint,2,opt,name=InTeam,proto3" json:"InTeam,omitempty"`
	Owner    *Player   `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	NPlayers int32     `protobuf:"varint,4,opt,name=NPlayers,proto3" json:"NPlayers,omitempty"`
	Players  []*Player `protobuf:"bytes,5,rep,name=Players,proto3" json:"Players,omitempty"`
}

func (m *GetTeamDetailsResponse) Reset()         { *m = GetTeamDetailsResponse{} }
func (m *GetTeamDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTeamDetailsResponse) ProtoMessage()    {}
func (*GetTeamDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{2}
}
func (m *GetTeamDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamDetailsResponse.Merge(m, src)
}
func (m *GetTeamDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamDetailsResponse proto.InternalMessageInfo

func (m *GetTeamDetailsResponse) GetTeamID() uint32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *GetTeamDetailsResponse) GetInTeam() bool {
	if m != nil {
		return m.InTeam
	}
	return false
}

func (m *GetTeamDetailsResponse) GetOwner() *Player {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetTeamDetailsResponse) GetNPlayers() int32 {
	if m != nil {
		return m.NPlayers
	}
	return 0
}

func (m *GetTeamDetailsResponse) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

// CreateTeam
type CreateTeamRequest struct {
	OwnerID uint32 `protobuf:"varint,1,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
}

func (m *CreateTeamRequest) Reset()         { *m = CreateTeamRequest{} }
func (m *CreateTeamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTeamRequest) ProtoMessage()    {}
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{3}
}
func (m *CreateTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamRequest.Merge(m, src)
}
func (m *CreateTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamRequest proto.InternalMessageInfo

func (m *CreateTeamRequest) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

type CreateTeamResponse struct {
}

func (m *CreateTeamResponse) Reset()         { *m = CreateTeamResponse{} }
func (m *CreateTeamResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTeamResponse) ProtoMessage()    {}
func (*CreateTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{4}
}
func (m *CreateTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamResponse.Merge(m, src)
}
func (m *CreateTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamResponse proto.InternalMessageInfo

// AddPlayerToTeam
type AddPlayerToTeamRequest struct {
	PlayerUsername string `protobuf:"bytes,1,opt,name=PlayerUsername,proto3" json:"PlayerUsername,omitempty"`
	TeamID         uint32 `protobuf:"varint,2,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
}

func (m *AddPlayerToTeamRequest) Reset()         { *m = AddPlayerToTeamRequest{} }
func (m *AddPlayerToTeamRequest) String() string { return proto.CompactTextString(m) }
func (*AddPlayerToTeamRequest) ProtoMessage()    {}
func (*AddPlayerToTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{5}
}
func (m *AddPlayerToTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerToTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerToTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerToTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerToTeamRequest.Merge(m, src)
}
func (m *AddPlayerToTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerToTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerToTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerToTeamRequest proto.InternalMessageInfo

func (m *AddPlayerToTeamRequest) GetPlayerUsername() string {
	if m != nil {
		return m.PlayerUsername
	}
	return ""
}

func (m *AddPlayerToTeamRequest) GetTeamID() uint32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type AddPlayerToTeamResponse struct {
}

func (m *AddPlayerToTeamResponse) Reset()         { *m = AddPlayerToTeamResponse{} }
func (m *AddPlayerToTeamResponse) String() string { return proto.CompactTextString(m) }
func (*AddPlayerToTeamResponse) ProtoMessage()    {}
func (*AddPlayerToTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{6}
}
func (m *AddPlayerToTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerToTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerToTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerToTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerToTeamResponse.Merge(m, src)
}
func (m *AddPlayerToTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerToTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerToTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerToTeamResponse proto.InternalMessageInfo

// RemovePlayerToTeam
type RemovePlayerToTeamRequest struct {
	PlayerUsername string `protobuf:"bytes,1,opt,name=PlayerUsername,proto3" json:"PlayerUsername,omitempty"`
	TeamID         uint32 `protobuf:"varint,2,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
}

func (m *RemovePlayerToTeamRequest) Reset()         { *m = RemovePlayerToTeamRequest{} }
func (m *RemovePlayerToTeamRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerToTeamRequest) ProtoMessage()    {}
func (*RemovePlayerToTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{7}
}
func (m *RemovePlayerToTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerToTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerToTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerToTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerToTeamRequest.Merge(m, src)
}
func (m *RemovePlayerToTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerToTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerToTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerToTeamRequest proto.InternalMessageInfo

func (m *RemovePlayerToTeamRequest) GetPlayerUsername() string {
	if m != nil {
		return m.PlayerUsername
	}
	return ""
}

func (m *RemovePlayerToTeamRequest) GetTeamID() uint32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type RemovePlayerToTeamResponse struct {
}

func (m *RemovePlayerToTeamResponse) Reset()         { *m = RemovePlayerToTeamResponse{} }
func (m *RemovePlayerToTeamResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerToTeamResponse) ProtoMessage()    {}
func (*RemovePlayerToTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{8}
}
func (m *RemovePlayerToTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerToTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerToTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerToTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerToTeamResponse.Merge(m, src)
}
func (m *RemovePlayerToTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerToTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerToTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerToTeamResponse proto.InternalMessageInfo

// RemovePlayerFromTeam
type RemovePlayerFromTeamRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	TeamID   uint32 `protobuf:"varint,2,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
}

func (m *RemovePlayerFromTeamRequest) Reset()         { *m = RemovePlayerFromTeamRequest{} }
func (m *RemovePlayerFromTeamRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerFromTeamRequest) ProtoMessage()    {}
func (*RemovePlayerFromTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{9}
}
func (m *RemovePlayerFromTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerFromTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerFromTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerFromTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerFromTeamRequest.Merge(m, src)
}
func (m *RemovePlayerFromTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerFromTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerFromTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerFromTeamRequest proto.InternalMessageInfo

func (m *RemovePlayerFromTeamRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *RemovePlayerFromTeamRequest) GetTeamID() uint32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type RemovePlayerFromTeamResponse struct {
}

func (m *RemovePlayerFromTeamResponse) Reset()         { *m = RemovePlayerFromTeamResponse{} }
func (m *RemovePlayerFromTeamResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerFromTeamResponse) ProtoMessage()    {}
func (*RemovePlayerFromTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec6203540fc6e4a, []int{10}
}
func (m *RemovePlayerFromTeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerFromTeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerFromTeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerFromTeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerFromTeamResponse.Merge(m, src)
}
func (m *RemovePlayerFromTeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerFromTeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerFromTeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerFromTeamResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Team)(nil), "team.Team")
	proto.RegisterType((*GetTeamDetailsRequest)(nil), "team.GetTeamDetailsRequest")
	proto.RegisterType((*GetTeamDetailsResponse)(nil), "team.GetTeamDetailsResponse")
	proto.RegisterType((*CreateTeamRequest)(nil), "team.CreateTeamRequest")
	proto.RegisterType((*CreateTeamResponse)(nil), "team.CreateTeamResponse")
	proto.RegisterType((*AddPlayerToTeamRequest)(nil), "team.AddPlayerToTeamRequest")
	proto.RegisterType((*AddPlayerToTeamResponse)(nil), "team.AddPlayerToTeamResponse")
	proto.RegisterType((*RemovePlayerToTeamRequest)(nil), "team.RemovePlayerToTeamRequest")
	proto.RegisterType((*RemovePlayerToTeamResponse)(nil), "team.RemovePlayerToTeamResponse")
	proto.RegisterType((*RemovePlayerFromTeamRequest)(nil), "team.RemovePlayerFromTeamRequest")
	proto.RegisterType((*RemovePlayerFromTeamResponse)(nil), "team.RemovePlayerFromTeamResponse")
}

func init() { proto.RegisterFile("proto/team.proto", fileDescriptor_bec6203540fc6e4a) }

var fileDescriptor_bec6203540fc6e4a = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xbb, 0x4e, 0xeb, 0x40,
	0x10, 0xcd, 0x3a, 0xce, 0xe3, 0xce, 0xd5, 0x8d, 0x2e, 0x2b, 0x08, 0x4e, 0x88, 0x56, 0x96, 0x85,
	0x90, 0x1b, 0x02, 0x22, 0x25, 0x15, 0x60, 0x81, 0xdc, 0xf0, 0xb0, 0x82, 0x84, 0xa0, 0x72, 0x94,
	0x29, 0x90, 0xe2, 0x07, 0xb6, 0x01, 0xf1, 0x17, 0x7c, 0x0c, 0x1f, 0x41, 0x99, 0x92, 0x12, 0x25,
	0x3f, 0x82, 0x76, 0xd7, 0xb6, 0x96, 0x10, 0xe8, 0xe8, 0xe6, 0x9c, 0xb3, 0x73, 0xce, 0xcc, 0x68,
	0xe1, 0x7f, 0x9c, 0x44, 0x59, 0xb4, 0x93, 0xa1, 0x1f, 0xf4, 0x45, 0x49, 0x75, 0x5e, 0x77, 0xa9,
	0xe4, 0xe3, 0x89, 0xff, 0x84, 0x89, 0x54, 0xac, 0x5d, 0xd0, 0x87, 0xe8, 0x07, 0xb4, 0x05, 0x9a,
	0xeb, 0x18, 0xc4, 0x24, 0xf6, 0x3f, 0x4f, 0x73, 0x1d, 0x6a, 0x40, 0xe3, 0xec, 0x31, 0xc4, 0xc4,
	0x75, 0x0c, 0x4d, 0x90, 0x05, 0xb4, 0x06, 0xb0, 0x76, 0x82, 0x19, 0x6f, 0x72, 0x30, 0xf3, 0x6f,
	0x27, 0xa9, 0x87, 0x77, 0xf7, 0x98, 0x66, 0xb4, 0x0b, 0xcd, 0x73, 0x61, 0x5d, 0x1a, 0x95, 0xd8,
	0x7a, 0x21, 0xd0, 0x5e, 0xec, 0x4a, 0xe3, 0x28, 0x4c, 0x91, 0xb6, 0xa1, 0xce, 0xe9, 0xb2, 0x29,
	0x47, 0x9c, 0x77, 0x43, 0x5e, 0x8b, 0x01, 0x9a, 0x5e, 0x8e, 0xe8, 0x26, 0xd4, 0xc4, 0x28, 0x46,
	0xd5, 0x24, 0xf6, 0xdf, 0xbd, 0x56, 0x3f, 0xdf, 0x47, 0x66, 0x79, 0x52, 0xe4, 0xc3, 0x9c, 0x4a,
	0x26, 0x35, 0x74, 0x93, 0xd8, 0x35, 0xaf, 0xc4, 0xd4, 0x86, 0x46, 0x21, 0xd5, 0xcc, 0xea, 0x12,
	0x8f, 0x42, 0xb6, 0xb6, 0x61, 0xe5, 0x28, 0x41, 0x3f, 0x43, 0x9e, 0x5c, 0xec, 0xa9, 0x9c, 0x86,
	0x7c, 0x3e, 0xcd, 0x2a, 0x50, 0xf5, 0xb9, 0x5c, 0xd0, 0xba, 0x82, 0xf6, 0xc1, 0x78, 0x2c, 0x2d,
	0x87, 0x91, 0xea, 0xb4, 0x05, 0x2d, 0x49, 0x5f, 0xa6, 0x98, 0x84, 0x7e, 0x80, 0xc2, 0xf0, 0x8f,
	0xb7, 0xc0, 0x2a, 0x27, 0xd2, 0xd4, 0x13, 0x59, 0x1d, 0x58, 0xff, 0xe2, 0x9c, 0x87, 0xde, 0x40,
	0xc7, 0xc3, 0x20, 0x7a, 0xc0, 0xdf, 0xc8, 0xed, 0x41, 0x77, 0x99, 0x79, 0x1e, 0x7d, 0x01, 0x1b,
	0xaa, 0x7a, 0x9c, 0x44, 0x81, 0x1a, 0xfe, 0xc3, 0x37, 0xf9, 0x36, 0x90, 0x41, 0x6f, 0xb9, 0xa5,
	0x8c, 0x3c, 0x64, 0xaf, 0x33, 0x46, 0xa6, 0x33, 0x46, 0xde, 0x67, 0x8c, 0x3c, 0xcf, 0x59, 0x65,
	0x3a, 0x67, 0x95, 0xb7, 0x39, 0xab, 0x5c, 0xeb, 0xfd, 0xfd, 0x78, 0x34, 0xaa, 0x8b, 0xcf, 0x3e,
	0xf8, 0x08, 0x00, 0x00, 0xff, 0xff, 0xda, 0x65, 0x61, 0xb4, 0x1a, 0x03, 0x00, 0x00,
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NPlayers != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.NPlayers))
		i--
		dAtA[i] = 0x20
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.InTeam {
		i--
		if m.InTeam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddPlayerToTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerToTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerToTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerUsername) > 0 {
		i -= len(m.PlayerUsername)
		copy(dAtA[i:], m.PlayerUsername)
		i = encodeVarintTeam(dAtA, i, uint64(len(m.PlayerUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPlayerToTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerToTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerToTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemovePlayerToTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerToTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerToTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerUsername) > 0 {
		i -= len(m.PlayerUsername)
		copy(dAtA[i:], m.PlayerUsername)
		i = encodeVarintTeam(dAtA, i, uint64(len(m.PlayerUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemovePlayerToTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerToTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerToTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemovePlayerFromTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerFromTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerFromTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemovePlayerFromTeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerFromTeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerFromTeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTeam(dAtA []byte, offset int, v uint64) int {
	offset -= sovTeam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTeam(uint64(m.ID))
	}
	if m.OwnerID != 0 {
		n += 1 + sovTeam(uint64(m.OwnerID))
	}
	return n
}

func (m *GetTeamDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovTeam(uint64(m.PlayerID))
	}
	return n
}

func (m *GetTeamDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	if m.InTeam {
		n += 2
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovTeam(uint64(l))
	}
	if m.NPlayers != 0 {
		n += 1 + sovTeam(uint64(m.NPlayers))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	return n
}

func (m *CreateTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OwnerID != 0 {
		n += 1 + sovTeam(uint64(m.OwnerID))
	}
	return n
}

func (m *CreateTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddPlayerToTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerUsername)
	if l > 0 {
		n += 1 + l + sovTeam(uint64(l))
	}
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	return n
}

func (m *AddPlayerToTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemovePlayerToTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerUsername)
	if l > 0 {
		n += 1 + l + sovTeam(uint64(l))
	}
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	return n
}

func (m *RemovePlayerToTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemovePlayerFromTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovTeam(uint64(m.PlayerID))
	}
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	return n
}

func (m *RemovePlayerFromTeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTeam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTeam(x uint64) (n int) {
	return sovTeam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTeam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InTeam = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Player{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NPlayers", wireType)
			}
			m.NPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NPlayers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &Player{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerToTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerToTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerToTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerToTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerToTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerToTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerToTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerToTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerToTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerToTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerToTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerToTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerFromTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerFromTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerFromTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerFromTeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerFromTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerFromTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTeam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTeam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTeam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTeam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTeam = fmt.Errorf("proto: unexpected end of group")
)
