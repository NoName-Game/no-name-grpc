// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/timezone.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Timezone struct {
	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *Timezone) Reset()         { *m = Timezone{} }
func (m *Timezone) String() string { return proto.CompactTextString(m) }
func (*Timezone) ProtoMessage()    {}
func (*Timezone) Descriptor() ([]byte, []int) {
	return fileDescriptor_b196135ca602f380, []int{0}
}
func (m *Timezone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timezone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timezone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timezone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timezone.Merge(m, src)
}
func (m *Timezone) XXX_Size() int {
	return m.Size()
}
func (m *Timezone) XXX_DiscardUnknown() {
	xxx_messageInfo_Timezone.DiscardUnknown(m)
}

var xxx_messageInfo_Timezone proto.InternalMessageInfo

func (m *Timezone) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Timezone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Timezone) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// GetTimezoneByDescription
type GetTimezoneByDescriptionRequest struct {
	Description string `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *GetTimezoneByDescriptionRequest) Reset()         { *m = GetTimezoneByDescriptionRequest{} }
func (m *GetTimezoneByDescriptionRequest) String() string { return proto.CompactTextString(m) }
func (*GetTimezoneByDescriptionRequest) ProtoMessage()    {}
func (*GetTimezoneByDescriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b196135ca602f380, []int{1}
}
func (m *GetTimezoneByDescriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTimezoneByDescriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTimezoneByDescriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTimezoneByDescriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimezoneByDescriptionRequest.Merge(m, src)
}
func (m *GetTimezoneByDescriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTimezoneByDescriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimezoneByDescriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimezoneByDescriptionRequest proto.InternalMessageInfo

func (m *GetTimezoneByDescriptionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GetTimezoneByDescriptionResponse struct {
	Timezone *Timezone `protobuf:"bytes,1,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
}

func (m *GetTimezoneByDescriptionResponse) Reset()         { *m = GetTimezoneByDescriptionResponse{} }
func (m *GetTimezoneByDescriptionResponse) String() string { return proto.CompactTextString(m) }
func (*GetTimezoneByDescriptionResponse) ProtoMessage()    {}
func (*GetTimezoneByDescriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b196135ca602f380, []int{2}
}
func (m *GetTimezoneByDescriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTimezoneByDescriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTimezoneByDescriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTimezoneByDescriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimezoneByDescriptionResponse.Merge(m, src)
}
func (m *GetTimezoneByDescriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTimezoneByDescriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimezoneByDescriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimezoneByDescriptionResponse proto.InternalMessageInfo

func (m *GetTimezoneByDescriptionResponse) GetTimezone() *Timezone {
	if m != nil {
		return m.Timezone
	}
	return nil
}

// GetTimezoneBySlug
type GetTimezoneByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *GetTimezoneByNameRequest) Reset()         { *m = GetTimezoneByNameRequest{} }
func (m *GetTimezoneByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetTimezoneByNameRequest) ProtoMessage()    {}
func (*GetTimezoneByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b196135ca602f380, []int{3}
}
func (m *GetTimezoneByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTimezoneByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTimezoneByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTimezoneByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimezoneByNameRequest.Merge(m, src)
}
func (m *GetTimezoneByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTimezoneByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimezoneByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimezoneByNameRequest proto.InternalMessageInfo

func (m *GetTimezoneByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetTimezoneByNameResponse struct {
	Timezone *Timezone `protobuf:"bytes,1,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
}

func (m *GetTimezoneByNameResponse) Reset()         { *m = GetTimezoneByNameResponse{} }
func (m *GetTimezoneByNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetTimezoneByNameResponse) ProtoMessage()    {}
func (*GetTimezoneByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b196135ca602f380, []int{4}
}
func (m *GetTimezoneByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTimezoneByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTimezoneByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTimezoneByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimezoneByNameResponse.Merge(m, src)
}
func (m *GetTimezoneByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTimezoneByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimezoneByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimezoneByNameResponse proto.InternalMessageInfo

func (m *GetTimezoneByNameResponse) GetTimezone() *Timezone {
	if m != nil {
		return m.Timezone
	}
	return nil
}

// GetTimezones
type GetAllTimezonesRequest struct {
}

func (m *GetAllTimezonesRequest) Reset()         { *m = GetAllTimezonesRequest{} }
func (m *GetAllTimezonesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllTimezonesRequest) ProtoMessage()    {}
func (*GetAllTimezonesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b196135ca602f380, []int{5}
}
func (m *GetAllTimezonesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllTimezonesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllTimezonesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllTimezonesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllTimezonesRequest.Merge(m, src)
}
func (m *GetAllTimezonesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllTimezonesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllTimezonesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllTimezonesRequest proto.InternalMessageInfo

type GetAllTimezonesResponse struct {
	Timezones []*Timezone `protobuf:"bytes,1,rep,name=Timezones,proto3" json:"Timezones,omitempty"`
}

func (m *GetAllTimezonesResponse) Reset()         { *m = GetAllTimezonesResponse{} }
func (m *GetAllTimezonesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllTimezonesResponse) ProtoMessage()    {}
func (*GetAllTimezonesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b196135ca602f380, []int{6}
}
func (m *GetAllTimezonesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllTimezonesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllTimezonesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllTimezonesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllTimezonesResponse.Merge(m, src)
}
func (m *GetAllTimezonesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllTimezonesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllTimezonesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllTimezonesResponse proto.InternalMessageInfo

func (m *GetAllTimezonesResponse) GetTimezones() []*Timezone {
	if m != nil {
		return m.Timezones
	}
	return nil
}

func init() {
	proto.RegisterType((*Timezone)(nil), "timezone.Timezone")
	proto.RegisterType((*GetTimezoneByDescriptionRequest)(nil), "timezone.GetTimezoneByDescriptionRequest")
	proto.RegisterType((*GetTimezoneByDescriptionResponse)(nil), "timezone.GetTimezoneByDescriptionResponse")
	proto.RegisterType((*GetTimezoneByNameRequest)(nil), "timezone.GetTimezoneByNameRequest")
	proto.RegisterType((*GetTimezoneByNameResponse)(nil), "timezone.GetTimezoneByNameResponse")
	proto.RegisterType((*GetAllTimezonesRequest)(nil), "timezone.GetAllTimezonesRequest")
	proto.RegisterType((*GetAllTimezonesResponse)(nil), "timezone.GetAllTimezonesResponse")
}

func init() { proto.RegisterFile("proto/timezone.proto", fileDescriptor_b196135ca602f380) }

var fileDescriptor_b196135ca602f380 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xc9, 0xcc, 0x4d, 0xad, 0xca, 0xcf, 0x4b, 0xd5, 0x03, 0x73, 0x85, 0x38, 0x60,
	0x7c, 0xa5, 0x00, 0x2e, 0x8e, 0x10, 0x28, 0x5b, 0x88, 0x8f, 0x8b, 0xc9, 0xd3, 0x45, 0x82, 0x51,
	0x81, 0x51, 0x83, 0x37, 0x88, 0xc9, 0xd3, 0x45, 0x48, 0x88, 0x8b, 0xc5, 0x2f, 0x31, 0x37, 0x55,
	0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x16, 0x52, 0xe0, 0xe2, 0x76, 0x49, 0x2d, 0x4e,
	0x2e, 0xca, 0x2c, 0x28, 0xc9, 0xcc, 0xcf, 0x93, 0x60, 0x06, 0x4b, 0x21, 0x0b, 0x29, 0x39, 0x73,
	0xc9, 0xbb, 0xa7, 0x96, 0xc0, 0x0c, 0x75, 0xaa, 0x44, 0x92, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x41, 0x37, 0x84, 0x11, 0xd3, 0x90, 0x20, 0x2e, 0x05, 0xdc, 0x86, 0x14, 0x17, 0xe4, 0xe7,
	0x15, 0xa7, 0x0a, 0xe9, 0x21, 0x9c, 0x0e, 0x36, 0x82, 0xdb, 0x48, 0x48, 0x0f, 0xee, 0x4f, 0x98,
	0x4c, 0x10, 0x5c, 0x8d, 0x92, 0x1e, 0x97, 0x04, 0x8a, 0x99, 0x20, 0xff, 0xc0, 0x5c, 0x04, 0xf3,
	0x2a, 0x23, 0xc2, 0xab, 0x4a, 0xde, 0x5c, 0x92, 0x58, 0xd4, 0x93, 0x69, 0xb9, 0x04, 0x97, 0x98,
	0x7b, 0x6a, 0x89, 0x63, 0x4e, 0x0e, 0x4c, 0xa4, 0x18, 0x6a, 0xb5, 0x92, 0x37, 0x97, 0x38, 0x86,
	0x0c, 0xd4, 0x12, 0x03, 0x2e, 0x4e, 0xb8, 0xa0, 0x04, 0xa3, 0x02, 0x33, 0x0e, 0x5b, 0x10, 0x8a,
	0x9c, 0xe4, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09,
	0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x45, 0xcf, 0xba,
	0x20, 0x29, 0x89, 0x0d, 0x1c, 0xff, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x30, 0xc5,
	0x87, 0x17, 0x02, 0x00, 0x00,
}

func (m *Timezone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timezone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timezone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTimezone(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTimezone(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintTimezone(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTimezoneByDescriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTimezoneByDescriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTimezoneByDescriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTimezone(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTimezoneByDescriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTimezoneByDescriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTimezoneByDescriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timezone != nil {
		{
			size, err := m.Timezone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimezone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTimezoneByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTimezoneByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTimezoneByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTimezone(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTimezoneByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTimezoneByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTimezoneByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timezone != nil {
		{
			size, err := m.Timezone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimezone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllTimezonesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllTimezonesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllTimezonesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllTimezonesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllTimezonesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllTimezonesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Timezones) > 0 {
		for iNdEx := len(m.Timezones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Timezones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimezone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimezone(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimezone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Timezone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTimezone(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTimezone(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTimezone(uint64(l))
	}
	return n
}

func (m *GetTimezoneByDescriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTimezone(uint64(l))
	}
	return n
}

func (m *GetTimezoneByDescriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timezone != nil {
		l = m.Timezone.Size()
		n += 1 + l + sovTimezone(uint64(l))
	}
	return n
}

func (m *GetTimezoneByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTimezone(uint64(l))
	}
	return n
}

func (m *GetTimezoneByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timezone != nil {
		l = m.Timezone.Size()
		n += 1 + l + sovTimezone(uint64(l))
	}
	return n
}

func (m *GetAllTimezonesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllTimezonesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Timezones) > 0 {
		for _, e := range m.Timezones {
			l = e.Size()
			n += 1 + l + sovTimezone(uint64(l))
		}
	}
	return n
}

func sovTimezone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimezone(x uint64) (n int) {
	return sovTimezone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Timezone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timezone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timezone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimezone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimezone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimezone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimezone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimezone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimezone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTimezoneByDescriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTimezoneByDescriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTimezoneByDescriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimezone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimezone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimezone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimezone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTimezoneByDescriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTimezoneByDescriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTimezoneByDescriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimezone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimezone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timezone == nil {
				m.Timezone = &Timezone{}
			}
			if err := m.Timezone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimezone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimezone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTimezoneByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTimezoneByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTimezoneByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimezone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimezone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimezone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimezone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTimezoneByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTimezoneByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTimezoneByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimezone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimezone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timezone == nil {
				m.Timezone = &Timezone{}
			}
			if err := m.Timezone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimezone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimezone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllTimezonesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllTimezonesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllTimezonesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTimezone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimezone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllTimezonesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllTimezonesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllTimezonesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimezone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimezone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezones = append(m.Timezones, &Timezone{})
			if err := m.Timezones[len(m.Timezones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimezone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimezone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimezone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimezone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimezone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimezone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimezone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimezone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimezone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimezone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimezone = fmt.Errorf("proto: unexpected end of group")
)
