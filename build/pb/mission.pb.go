// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/mission.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mission struct {
	ID                uint32           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MissionCategoryID uint32           `protobuf:"varint,2,opt,name=MissionCategoryID,proto3" json:"MissionCategoryID,omitempty"`
	MissionCategory   *MissionCategory `protobuf:"bytes,3,opt,name=MissionCategory,proto3" json:"MissionCategory,omitempty"`
	Payload           string           `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (m *Mission) Reset()         { *m = Mission{} }
func (m *Mission) String() string { return proto.CompactTextString(m) }
func (*Mission) ProtoMessage()    {}
func (*Mission) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{0}
}
func (m *Mission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mission.Merge(m, src)
}
func (m *Mission) XXX_Size() int {
	return m.Size()
}
func (m *Mission) XXX_DiscardUnknown() {
	xxx_messageInfo_Mission.DiscardUnknown(m)
}

var xxx_messageInfo_Mission proto.InternalMessageInfo

func (m *Mission) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Mission) GetMissionCategoryID() uint32 {
	if m != nil {
		return m.MissionCategoryID
	}
	return 0
}

func (m *Mission) GetMissionCategory() *MissionCategory {
	if m != nil {
		return m.MissionCategory
	}
	return nil
}

func (m *Mission) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// GetMission
type GetMissionRequest struct {
	MissionID uint32 `protobuf:"varint,1,opt,name=MissionID,proto3" json:"MissionID,omitempty"`
}

func (m *GetMissionRequest) Reset()         { *m = GetMissionRequest{} }
func (m *GetMissionRequest) String() string { return proto.CompactTextString(m) }
func (*GetMissionRequest) ProtoMessage()    {}
func (*GetMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{1}
}
func (m *GetMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionRequest.Merge(m, src)
}
func (m *GetMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionRequest proto.InternalMessageInfo

func (m *GetMissionRequest) GetMissionID() uint32 {
	if m != nil {
		return m.MissionID
	}
	return 0
}

type GetMissionResponse struct {
	Mission *Mission `protobuf:"bytes,1,opt,name=Mission,proto3" json:"Mission,omitempty"`
}

func (m *GetMissionResponse) Reset()         { *m = GetMissionResponse{} }
func (m *GetMissionResponse) String() string { return proto.CompactTextString(m) }
func (*GetMissionResponse) ProtoMessage()    {}
func (*GetMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{2}
}
func (m *GetMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionResponse.Merge(m, src)
}
func (m *GetMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionResponse proto.InternalMessageInfo

func (m *GetMissionResponse) GetMission() *Mission {
	if m != nil {
		return m.Mission
	}
	return nil
}

// NewMission
type NewMissionRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *NewMissionRequest) Reset()         { *m = NewMissionRequest{} }
func (m *NewMissionRequest) String() string { return proto.CompactTextString(m) }
func (*NewMissionRequest) ProtoMessage()    {}
func (*NewMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{3}
}
func (m *NewMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMissionRequest.Merge(m, src)
}
func (m *NewMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewMissionRequest proto.InternalMessageInfo

func (m *NewMissionRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type NewMissionResponse struct {
	Mission *Mission `protobuf:"bytes,1,opt,name=Mission,proto3" json:"Mission,omitempty"`
}

func (m *NewMissionResponse) Reset()         { *m = NewMissionResponse{} }
func (m *NewMissionResponse) String() string { return proto.CompactTextString(m) }
func (*NewMissionResponse) ProtoMessage()    {}
func (*NewMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{4}
}
func (m *NewMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMissionResponse.Merge(m, src)
}
func (m *NewMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewMissionResponse proto.InternalMessageInfo

func (m *NewMissionResponse) GetMission() *Mission {
	if m != nil {
		return m.Mission
	}
	return nil
}

// CheckMission
type CheckMissionRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *CheckMissionRequest) Reset()         { *m = CheckMissionRequest{} }
func (m *CheckMissionRequest) String() string { return proto.CompactTextString(m) }
func (*CheckMissionRequest) ProtoMessage()    {}
func (*CheckMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{5}
}
func (m *CheckMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMissionRequest.Merge(m, src)
}
func (m *CheckMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMissionRequest proto.InternalMessageInfo

func (m *CheckMissionRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type CheckMissionResponse struct {
	InMission bool     `protobuf:"varint,1,opt,name=InMission,proto3" json:"InMission,omitempty"`
	Completed bool     `protobuf:"varint,2,opt,name=Completed,proto3" json:"Completed,omitempty"`
	Mission   *Mission `protobuf:"bytes,3,opt,name=Mission,proto3" json:"Mission,omitempty"`
}

func (m *CheckMissionResponse) Reset()         { *m = CheckMissionResponse{} }
func (m *CheckMissionResponse) String() string { return proto.CompactTextString(m) }
func (*CheckMissionResponse) ProtoMessage()    {}
func (*CheckMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{6}
}
func (m *CheckMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMissionResponse.Merge(m, src)
}
func (m *CheckMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMissionResponse proto.InternalMessageInfo

func (m *CheckMissionResponse) GetInMission() bool {
	if m != nil {
		return m.InMission
	}
	return false
}

func (m *CheckMissionResponse) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *CheckMissionResponse) GetMission() *Mission {
	if m != nil {
		return m.Mission
	}
	return nil
}

// AcceptMission
type AcceptMissionRequest struct {
	PlayerID  uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	MissionID uint32 `protobuf:"varint,2,opt,name=MissionID,proto3" json:"MissionID,omitempty"`
}

func (m *AcceptMissionRequest) Reset()         { *m = AcceptMissionRequest{} }
func (m *AcceptMissionRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptMissionRequest) ProtoMessage()    {}
func (*AcceptMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{7}
}
func (m *AcceptMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptMissionRequest.Merge(m, src)
}
func (m *AcceptMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *AcceptMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptMissionRequest proto.InternalMessageInfo

func (m *AcceptMissionRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *AcceptMissionRequest) GetMissionID() uint32 {
	if m != nil {
		return m.MissionID
	}
	return 0
}

type AcceptMissionResponse struct {
}

func (m *AcceptMissionResponse) Reset()         { *m = AcceptMissionResponse{} }
func (m *AcceptMissionResponse) String() string { return proto.CompactTextString(m) }
func (*AcceptMissionResponse) ProtoMessage()    {}
func (*AcceptMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{8}
}
func (m *AcceptMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptMissionResponse.Merge(m, src)
}
func (m *AcceptMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *AcceptMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptMissionResponse proto.InternalMessageInfo

// LeaveMission
type LeaveMissionRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *LeaveMissionRequest) Reset()         { *m = LeaveMissionRequest{} }
func (m *LeaveMissionRequest) String() string { return proto.CompactTextString(m) }
func (*LeaveMissionRequest) ProtoMessage()    {}
func (*LeaveMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{9}
}
func (m *LeaveMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveMissionRequest.Merge(m, src)
}
func (m *LeaveMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeaveMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveMissionRequest proto.InternalMessageInfo

func (m *LeaveMissionRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type LeaveMissionResponse struct {
}

func (m *LeaveMissionResponse) Reset()         { *m = LeaveMissionResponse{} }
func (m *LeaveMissionResponse) String() string { return proto.CompactTextString(m) }
func (*LeaveMissionResponse) ProtoMessage()    {}
func (*LeaveMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{10}
}
func (m *LeaveMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveMissionResponse.Merge(m, src)
}
func (m *LeaveMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeaveMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveMissionResponse proto.InternalMessageInfo

// GetMissionReward
type GetMissionRewardRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetMissionRewardRequest) Reset()         { *m = GetMissionRewardRequest{} }
func (m *GetMissionRewardRequest) String() string { return proto.CompactTextString(m) }
func (*GetMissionRewardRequest) ProtoMessage()    {}
func (*GetMissionRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{11}
}
func (m *GetMissionRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionRewardRequest.Merge(m, src)
}
func (m *GetMissionRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionRewardRequest proto.InternalMessageInfo

func (m *GetMissionRewardRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetMissionRewardResponse struct {
	Money   int32 `protobuf:"varint,1,opt,name=Money,proto3" json:"Money,omitempty"`
	Diamond int32 `protobuf:"varint,2,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	Exp     int32 `protobuf:"varint,3,opt,name=Exp,proto3" json:"Exp,omitempty"`
}

func (m *GetMissionRewardResponse) Reset()         { *m = GetMissionRewardResponse{} }
func (m *GetMissionRewardResponse) String() string { return proto.CompactTextString(m) }
func (*GetMissionRewardResponse) ProtoMessage()    {}
func (*GetMissionRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{12}
}
func (m *GetMissionRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionRewardResponse.Merge(m, src)
}
func (m *GetMissionRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionRewardResponse proto.InternalMessageInfo

func (m *GetMissionRewardResponse) GetMoney() int32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *GetMissionRewardResponse) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *GetMissionRewardResponse) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

// CheckMissionReward
type CheckMissionRewardRequest struct {
	MissionID uint32 `protobuf:"varint,1,opt,name=MissionID,proto3" json:"MissionID,omitempty"`
}

func (m *CheckMissionRewardRequest) Reset()         { *m = CheckMissionRewardRequest{} }
func (m *CheckMissionRewardRequest) String() string { return proto.CompactTextString(m) }
func (*CheckMissionRewardRequest) ProtoMessage()    {}
func (*CheckMissionRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{13}
}
func (m *CheckMissionRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckMissionRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckMissionRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckMissionRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMissionRewardRequest.Merge(m, src)
}
func (m *CheckMissionRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckMissionRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMissionRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMissionRewardRequest proto.InternalMessageInfo

func (m *CheckMissionRewardRequest) GetMissionID() uint32 {
	if m != nil {
		return m.MissionID
	}
	return 0
}

type CheckMissionRewardResponse struct {
	Money   int32 `protobuf:"varint,1,opt,name=Money,proto3" json:"Money,omitempty"`
	Diamond int32 `protobuf:"varint,2,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	Exp     int32 `protobuf:"varint,3,opt,name=Exp,proto3" json:"Exp,omitempty"`
}

func (m *CheckMissionRewardResponse) Reset()         { *m = CheckMissionRewardResponse{} }
func (m *CheckMissionRewardResponse) String() string { return proto.CompactTextString(m) }
func (*CheckMissionRewardResponse) ProtoMessage()    {}
func (*CheckMissionRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{14}
}
func (m *CheckMissionRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckMissionRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckMissionRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckMissionRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMissionRewardResponse.Merge(m, src)
}
func (m *CheckMissionRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckMissionRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMissionRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMissionRewardResponse proto.InternalMessageInfo

func (m *CheckMissionRewardResponse) GetMoney() int32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *CheckMissionRewardResponse) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *CheckMissionRewardResponse) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type TopMissionList struct {
	Mission *Mission `protobuf:"bytes,1,opt,name=Mission,proto3" json:"Mission,omitempty"`
	Counter int64    `protobuf:"varint,2,opt,name=Counter,proto3" json:"Counter,omitempty"`
}

func (m *TopMissionList) Reset()         { *m = TopMissionList{} }
func (m *TopMissionList) String() string { return proto.CompactTextString(m) }
func (*TopMissionList) ProtoMessage()    {}
func (*TopMissionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{15}
}
func (m *TopMissionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopMissionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopMissionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopMissionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopMissionList.Merge(m, src)
}
func (m *TopMissionList) XXX_Size() int {
	return m.Size()
}
func (m *TopMissionList) XXX_DiscardUnknown() {
	xxx_messageInfo_TopMissionList.DiscardUnknown(m)
}

var xxx_messageInfo_TopMissionList proto.InternalMessageInfo

func (m *TopMissionList) GetMission() *Mission {
	if m != nil {
		return m.Mission
	}
	return nil
}

func (m *TopMissionList) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

// GetMissionsMostCompleted
type GetMissionsMostCompletedRequest struct {
}

func (m *GetMissionsMostCompletedRequest) Reset()         { *m = GetMissionsMostCompletedRequest{} }
func (m *GetMissionsMostCompletedRequest) String() string { return proto.CompactTextString(m) }
func (*GetMissionsMostCompletedRequest) ProtoMessage()    {}
func (*GetMissionsMostCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{16}
}
func (m *GetMissionsMostCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionsMostCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionsMostCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionsMostCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionsMostCompletedRequest.Merge(m, src)
}
func (m *GetMissionsMostCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionsMostCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionsMostCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionsMostCompletedRequest proto.InternalMessageInfo

type GetMissionsMostCompletedResponse struct {
	Missions []*TopMissionList `protobuf:"bytes,1,rep,name=Missions,proto3" json:"Missions,omitempty"`
}

func (m *GetMissionsMostCompletedResponse) Reset()         { *m = GetMissionsMostCompletedResponse{} }
func (m *GetMissionsMostCompletedResponse) String() string { return proto.CompactTextString(m) }
func (*GetMissionsMostCompletedResponse) ProtoMessage()    {}
func (*GetMissionsMostCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{17}
}
func (m *GetMissionsMostCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionsMostCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionsMostCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionsMostCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionsMostCompletedResponse.Merge(m, src)
}
func (m *GetMissionsMostCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionsMostCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionsMostCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionsMostCompletedResponse proto.InternalMessageInfo

func (m *GetMissionsMostCompletedResponse) GetMissions() []*TopMissionList {
	if m != nil {
		return m.Missions
	}
	return nil
}

// GetMissionsMostLeaved
type GetMissionsMostLeavedRequest struct {
}

func (m *GetMissionsMostLeavedRequest) Reset()         { *m = GetMissionsMostLeavedRequest{} }
func (m *GetMissionsMostLeavedRequest) String() string { return proto.CompactTextString(m) }
func (*GetMissionsMostLeavedRequest) ProtoMessage()    {}
func (*GetMissionsMostLeavedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{18}
}
func (m *GetMissionsMostLeavedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionsMostLeavedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionsMostLeavedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionsMostLeavedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionsMostLeavedRequest.Merge(m, src)
}
func (m *GetMissionsMostLeavedRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionsMostLeavedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionsMostLeavedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionsMostLeavedRequest proto.InternalMessageInfo

type GetMissionsMostLeavedResponse struct {
	Missions []*TopMissionList `protobuf:"bytes,1,rep,name=Missions,proto3" json:"Missions,omitempty"`
}

func (m *GetMissionsMostLeavedResponse) Reset()         { *m = GetMissionsMostLeavedResponse{} }
func (m *GetMissionsMostLeavedResponse) String() string { return proto.CompactTextString(m) }
func (*GetMissionsMostLeavedResponse) ProtoMessage()    {}
func (*GetMissionsMostLeavedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b676c29a8cc6ae, []int{19}
}
func (m *GetMissionsMostLeavedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionsMostLeavedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionsMostLeavedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionsMostLeavedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionsMostLeavedResponse.Merge(m, src)
}
func (m *GetMissionsMostLeavedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionsMostLeavedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionsMostLeavedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionsMostLeavedResponse proto.InternalMessageInfo

func (m *GetMissionsMostLeavedResponse) GetMissions() []*TopMissionList {
	if m != nil {
		return m.Missions
	}
	return nil
}

func init() {
	proto.RegisterType((*Mission)(nil), "mission.Mission")
	proto.RegisterType((*GetMissionRequest)(nil), "mission.GetMissionRequest")
	proto.RegisterType((*GetMissionResponse)(nil), "mission.GetMissionResponse")
	proto.RegisterType((*NewMissionRequest)(nil), "mission.NewMissionRequest")
	proto.RegisterType((*NewMissionResponse)(nil), "mission.NewMissionResponse")
	proto.RegisterType((*CheckMissionRequest)(nil), "mission.CheckMissionRequest")
	proto.RegisterType((*CheckMissionResponse)(nil), "mission.CheckMissionResponse")
	proto.RegisterType((*AcceptMissionRequest)(nil), "mission.AcceptMissionRequest")
	proto.RegisterType((*AcceptMissionResponse)(nil), "mission.AcceptMissionResponse")
	proto.RegisterType((*LeaveMissionRequest)(nil), "mission.LeaveMissionRequest")
	proto.RegisterType((*LeaveMissionResponse)(nil), "mission.LeaveMissionResponse")
	proto.RegisterType((*GetMissionRewardRequest)(nil), "mission.GetMissionRewardRequest")
	proto.RegisterType((*GetMissionRewardResponse)(nil), "mission.GetMissionRewardResponse")
	proto.RegisterType((*CheckMissionRewardRequest)(nil), "mission.CheckMissionRewardRequest")
	proto.RegisterType((*CheckMissionRewardResponse)(nil), "mission.CheckMissionRewardResponse")
	proto.RegisterType((*TopMissionList)(nil), "mission.TopMissionList")
	proto.RegisterType((*GetMissionsMostCompletedRequest)(nil), "mission.GetMissionsMostCompletedRequest")
	proto.RegisterType((*GetMissionsMostCompletedResponse)(nil), "mission.GetMissionsMostCompletedResponse")
	proto.RegisterType((*GetMissionsMostLeavedRequest)(nil), "mission.GetMissionsMostLeavedRequest")
	proto.RegisterType((*GetMissionsMostLeavedResponse)(nil), "mission.GetMissionsMostLeavedResponse")
}

func init() { proto.RegisterFile("proto/mission.proto", fileDescriptor_19b676c29a8cc6ae) }

var fileDescriptor_19b676c29a8cc6ae = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xc6, 0x0d, 0x49, 0x26, 0xa2, 0x34, 0xdb, 0x40, 0x4c, 0x14, 0x8c, 0xeb, 0x53, 0x84,
	0x50, 0xaa, 0xa6, 0xe2, 0x80, 0xb8, 0x00, 0x09, 0x42, 0x11, 0x0d, 0x8a, 0x56, 0x15, 0x48, 0x08,
	0x81, 0xdc, 0x64, 0x05, 0x11, 0x89, 0xd7, 0xd8, 0x5b, 0x4a, 0x2e, 0x3c, 0x03, 0x4f, 0xc2, 0x73,
	0x70, 0xec, 0x91, 0x23, 0x4a, 0x5e, 0x04, 0x79, 0xbd, 0x5e, 0xff, 0x84, 0x42, 0x02, 0xbd, 0x79,
	0x66, 0xbe, 0x6f, 0xbe, 0x6f, 0x66, 0x47, 0x86, 0x5d, 0xd7, 0x63, 0x9c, 0xed, 0xcf, 0x26, 0xbe,
	0x3f, 0x61, 0x4e, 0x5b, 0x44, 0xb8, 0x28, 0xc3, 0x46, 0x33, 0x55, 0x7d, 0x3b, 0xb2, 0x39, 0x7d,
	0xc7, 0xbc, 0x79, 0x08, 0xb3, 0xbe, 0x21, 0x28, 0x0e, 0xc2, 0x12, 0xde, 0x86, 0x7c, 0xbf, 0xa7,
	0x23, 0x13, 0xb5, 0xae, 0x92, 0x7c, 0xbf, 0x87, 0xef, 0x42, 0x55, 0x96, 0xba, 0x92, 0xd4, 0xef,
	0xe9, 0x79, 0x51, 0x5e, 0x2d, 0xe0, 0x67, 0x70, 0x2d, 0x93, 0xd4, 0x35, 0x13, 0xb5, 0x2a, 0x9d,
	0xbd, 0xf6, 0x8a, 0x76, 0x06, 0x48, 0xb2, 0x4c, 0xac, 0x43, 0x71, 0x68, 0xcf, 0xa7, 0xcc, 0x1e,
	0xeb, 0x5b, 0x26, 0x6a, 0x95, 0x49, 0x14, 0x5a, 0x07, 0x50, 0x7d, 0x4a, 0xb9, 0xc4, 0x13, 0xfa,
	0xf1, 0x94, 0xfa, 0x1c, 0x37, 0xa1, 0x2c, 0x33, 0x6a, 0x80, 0x38, 0x61, 0x3d, 0x04, 0x9c, 0xa4,
	0xf8, 0x2e, 0x73, 0x7c, 0x8a, 0xef, 0xa8, 0xc1, 0x05, 0xa3, 0xd2, 0xd9, 0x89, 0x7c, 0x46, 0xf6,
	0x48, 0x04, 0xb0, 0xf6, 0xa1, 0xfa, 0x9c, 0x9e, 0x65, 0x44, 0x1b, 0x50, 0x1a, 0x4e, 0xed, 0x39,
	0xf5, 0x94, 0xa6, 0x8a, 0x03, 0xc9, 0x24, 0xe1, 0x1f, 0x24, 0x0f, 0x60, 0xb7, 0xfb, 0x9e, 0x8e,
	0x3e, 0x6c, 0x20, 0xfa, 0x05, 0x6a, 0x69, 0x8a, 0x94, 0x6d, 0x42, 0xb9, 0xef, 0x24, 0x85, 0x4b,
	0x24, 0x4e, 0x04, 0xd5, 0x2e, 0x9b, 0xb9, 0x53, 0xca, 0xe9, 0x58, 0xbc, 0x6e, 0x89, 0xc4, 0x89,
	0xa4, 0x65, 0xed, 0x6f, 0x96, 0x87, 0x50, 0x7b, 0x34, 0x1a, 0x51, 0x97, 0xaf, 0xef, 0x39, 0xfd,
	0x72, 0xf9, 0xec, 0xcb, 0xd5, 0xe1, 0x7a, 0xa6, 0x63, 0x38, 0x52, 0xb0, 0x9d, 0x23, 0x6a, 0x7f,
	0xa2, 0x1b, 0x6c, 0xe7, 0x06, 0xd4, 0xd2, 0x14, 0xd9, 0xea, 0x1e, 0xd4, 0x93, 0xd7, 0x71, 0x66,
	0x7b, 0xe3, 0x75, 0xda, 0xbd, 0x06, 0x7d, 0x95, 0x26, 0x17, 0x5e, 0x83, 0xc2, 0x80, 0x39, 0x74,
	0x2e, 0x48, 0x05, 0x12, 0x06, 0xc1, 0x4d, 0xf7, 0x26, 0xf6, 0x8c, 0x39, 0xe1, 0x9a, 0x0b, 0x24,
	0x0a, 0xf1, 0x0e, 0x68, 0x4f, 0x3e, 0xbb, 0x62, 0xc1, 0x05, 0x12, 0x7c, 0x5a, 0xf7, 0xe1, 0x66,
	0xfa, 0x29, 0x93, 0xb6, 0xfe, 0x7c, 0xed, 0x6f, 0xa0, 0xf1, 0x3b, 0xea, 0xa5, 0x59, 0x7b, 0x01,
	0xdb, 0xc7, 0xcc, 0x95, 0xdd, 0x8f, 0x26, 0x3e, 0xdf, 0xe4, 0xac, 0x03, 0xa5, 0x2e, 0x3b, 0x75,
	0x38, 0xf5, 0x84, 0x92, 0x46, 0xa2, 0xd0, 0xda, 0x83, 0xdb, 0xf1, 0x42, 0xfd, 0x01, 0xf3, 0xb9,
	0xba, 0x42, 0x39, 0xb8, 0xf5, 0x12, 0xcc, 0x8b, 0x21, 0x72, 0xc0, 0x43, 0x28, 0x45, 0x00, 0x1d,
	0x99, 0x5a, 0xab, 0xd2, 0xa9, 0x2b, 0x37, 0x69, 0xdf, 0x44, 0x01, 0x2d, 0x03, 0x9a, 0x99, 0xc6,
	0xe2, 0x54, 0x94, 0xf0, 0x31, 0xdc, 0xba, 0xa0, 0xfe, 0x1f, 0xaa, 0x8f, 0x8d, 0xef, 0x0b, 0x03,
	0x9d, 0x2f, 0x0c, 0xf4, 0x73, 0x61, 0xa0, 0xaf, 0x4b, 0x23, 0x77, 0xbe, 0x34, 0x72, 0x3f, 0x96,
	0x46, 0xee, 0xd5, 0x56, 0xfb, 0x81, 0x7b, 0x72, 0x72, 0x45, 0xfc, 0xa2, 0x0f, 0x7f, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x6f, 0xd6, 0xfe, 0xdb, 0xe0, 0x05, 0x00, 0x00,
}

func (m *Mission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMission(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if m.MissionCategory != nil {
		{
			size, err := m.MissionCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMission(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MissionCategoryID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.MissionCategoryID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissionID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.MissionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mission != nil {
		{
			size, err := m.Mission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMission(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mission != nil {
		{
			size, err := m.Mission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMission(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mission != nil {
		{
			size, err := m.Mission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMission(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.InMission {
		i--
		if m.InMission {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AcceptMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissionID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.MissionID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AcceptMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LeaveMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeaveMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMissionRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exp != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x18
	}
	if m.Diamond != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.Diamond))
		i--
		dAtA[i] = 0x10
	}
	if m.Money != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckMissionRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckMissionRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckMissionRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissionID != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.MissionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckMissionRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckMissionRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckMissionRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exp != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x18
	}
	if m.Diamond != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.Diamond))
		i--
		dAtA[i] = 0x10
	}
	if m.Money != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopMissionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopMissionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopMissionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintMission(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.Mission != nil {
		{
			size, err := m.Mission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMission(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionsMostCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionsMostCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionsMostCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMissionsMostCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionsMostCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionsMostCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Missions) > 0 {
		for iNdEx := len(m.Missions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Missions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMission(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionsMostLeavedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionsMostLeavedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionsMostLeavedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMissionsMostLeavedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionsMostLeavedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionsMostLeavedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Missions) > 0 {
		for iNdEx := len(m.Missions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Missions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMission(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMission(dAtA []byte, offset int, v uint64) int {
	offset -= sovMission(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Mission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMission(uint64(m.ID))
	}
	if m.MissionCategoryID != 0 {
		n += 1 + sovMission(uint64(m.MissionCategoryID))
	}
	if m.MissionCategory != nil {
		l = m.MissionCategory.Size()
		n += 1 + l + sovMission(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMission(uint64(l))
	}
	return n
}

func (m *GetMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissionID != 0 {
		n += 1 + sovMission(uint64(m.MissionID))
	}
	return n
}

func (m *GetMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mission != nil {
		l = m.Mission.Size()
		n += 1 + l + sovMission(uint64(l))
	}
	return n
}

func (m *NewMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovMission(uint64(m.PlayerID))
	}
	return n
}

func (m *NewMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mission != nil {
		l = m.Mission.Size()
		n += 1 + l + sovMission(uint64(l))
	}
	return n
}

func (m *CheckMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovMission(uint64(m.PlayerID))
	}
	return n
}

func (m *CheckMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InMission {
		n += 2
	}
	if m.Completed {
		n += 2
	}
	if m.Mission != nil {
		l = m.Mission.Size()
		n += 1 + l + sovMission(uint64(l))
	}
	return n
}

func (m *AcceptMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovMission(uint64(m.PlayerID))
	}
	if m.MissionID != 0 {
		n += 1 + sovMission(uint64(m.MissionID))
	}
	return n
}

func (m *AcceptMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LeaveMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovMission(uint64(m.PlayerID))
	}
	return n
}

func (m *LeaveMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMissionRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovMission(uint64(m.PlayerID))
	}
	return n
}

func (m *GetMissionRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Money != 0 {
		n += 1 + sovMission(uint64(m.Money))
	}
	if m.Diamond != 0 {
		n += 1 + sovMission(uint64(m.Diamond))
	}
	if m.Exp != 0 {
		n += 1 + sovMission(uint64(m.Exp))
	}
	return n
}

func (m *CheckMissionRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissionID != 0 {
		n += 1 + sovMission(uint64(m.MissionID))
	}
	return n
}

func (m *CheckMissionRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Money != 0 {
		n += 1 + sovMission(uint64(m.Money))
	}
	if m.Diamond != 0 {
		n += 1 + sovMission(uint64(m.Diamond))
	}
	if m.Exp != 0 {
		n += 1 + sovMission(uint64(m.Exp))
	}
	return n
}

func (m *TopMissionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mission != nil {
		l = m.Mission.Size()
		n += 1 + l + sovMission(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovMission(uint64(m.Counter))
	}
	return n
}

func (m *GetMissionsMostCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMissionsMostCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Missions) > 0 {
		for _, e := range m.Missions {
			l = e.Size()
			n += 1 + l + sovMission(uint64(l))
		}
	}
	return n
}

func (m *GetMissionsMostLeavedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMissionsMostLeavedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Missions) > 0 {
		for _, e := range m.Missions {
			l = e.Size()
			n += 1 + l + sovMission(uint64(l))
		}
	}
	return n
}

func sovMission(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMission(x uint64) (n int) {
	return sovMission(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionCategoryID", wireType)
			}
			m.MissionCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MissionCategory == nil {
				m.MissionCategory = &MissionCategory{}
			}
			if err := m.MissionCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionID", wireType)
			}
			m.MissionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mission == nil {
				m.Mission = &Mission{}
			}
			if err := m.Mission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mission == nil {
				m.Mission = &Mission{}
			}
			if err := m.Mission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMission", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMission = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mission == nil {
				m.Mission = &Mission{}
			}
			if err := m.Mission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionID", wireType)
			}
			m.MissionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckMissionRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckMissionRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckMissionRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionID", wireType)
			}
			m.MissionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckMissionRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckMissionRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckMissionRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopMissionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopMissionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopMissionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mission == nil {
				m.Mission = &Mission{}
			}
			if err := m.Mission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionsMostCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionsMostCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionsMostCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionsMostCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionsMostCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionsMostCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Missions = append(m.Missions, &TopMissionList{})
			if err := m.Missions[len(m.Missions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionsMostLeavedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionsMostLeavedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionsMostLeavedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionsMostLeavedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionsMostLeavedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionsMostLeavedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Missions = append(m.Missions, &TopMissionList{})
			if err := m.Missions[len(m.Missions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMission(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMission
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMission
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMission
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMission
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMission        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMission          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMission = fmt.Errorf("proto: unexpected end of group")
)
