// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/planet_map.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlanetMap struct {
	ID                   uint32     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CellGrid             string     `protobuf:"bytes,2,opt,name=CellGrid,proto3" json:"CellGrid,omitempty"`
	StartPositionX       int32      `protobuf:"varint,3,opt,name=StartPositionX,proto3" json:"StartPositionX,omitempty"`
	StartPositionY       int32      `protobuf:"varint,4,opt,name=StartPositionY,proto3" json:"StartPositionY,omitempty"`
	Enemies              []*Enemy   `protobuf:"bytes,5,rep,name=Enemies,proto3" json:"Enemies,omitempty"`
	Tresures             []*Tresure `protobuf:"bytes,6,rep,name=Tresures,proto3" json:"Tresures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PlanetMap) Reset()         { *m = PlanetMap{} }
func (m *PlanetMap) String() string { return proto.CompactTextString(m) }
func (*PlanetMap) ProtoMessage()    {}
func (*PlanetMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c76a6df7491a6a50, []int{0}
}
func (m *PlanetMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlanetMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlanetMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlanetMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanetMap.Merge(m, src)
}
func (m *PlanetMap) XXX_Size() int {
	return m.Size()
}
func (m *PlanetMap) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanetMap.DiscardUnknown(m)
}

var xxx_messageInfo_PlanetMap proto.InternalMessageInfo

func (m *PlanetMap) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PlanetMap) GetCellGrid() string {
	if m != nil {
		return m.CellGrid
	}
	return ""
}

func (m *PlanetMap) GetStartPositionX() int32 {
	if m != nil {
		return m.StartPositionX
	}
	return 0
}

func (m *PlanetMap) GetStartPositionY() int32 {
	if m != nil {
		return m.StartPositionY
	}
	return 0
}

func (m *PlanetMap) GetEnemies() []*Enemy {
	if m != nil {
		return m.Enemies
	}
	return nil
}

func (m *PlanetMap) GetTresures() []*Tresure {
	if m != nil {
		return m.Tresures
	}
	return nil
}

// GetMapByID
type GetPlanetMapByIDRequest struct {
	PlanetMapID          uint32   `protobuf:"varint,1,opt,name=PlanetMapID,proto3" json:"PlanetMapID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlanetMapByIDRequest) Reset()         { *m = GetPlanetMapByIDRequest{} }
func (m *GetPlanetMapByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlanetMapByIDRequest) ProtoMessage()    {}
func (*GetPlanetMapByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c76a6df7491a6a50, []int{1}
}
func (m *GetPlanetMapByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetMapByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetMapByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetMapByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetMapByIDRequest.Merge(m, src)
}
func (m *GetPlanetMapByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetMapByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetMapByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetMapByIDRequest proto.InternalMessageInfo

func (m *GetPlanetMapByIDRequest) GetPlanetMapID() uint32 {
	if m != nil {
		return m.PlanetMapID
	}
	return 0
}

type GetPlanetMapByIDResponse struct {
	PlanetMap            *PlanetMap `protobuf:"bytes,1,opt,name=PlanetMap,proto3" json:"PlanetMap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetPlanetMapByIDResponse) Reset()         { *m = GetPlanetMapByIDResponse{} }
func (m *GetPlanetMapByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlanetMapByIDResponse) ProtoMessage()    {}
func (*GetPlanetMapByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c76a6df7491a6a50, []int{2}
}
func (m *GetPlanetMapByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetMapByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetMapByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetMapByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetMapByIDResponse.Merge(m, src)
}
func (m *GetPlanetMapByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetMapByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetMapByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetMapByIDResponse proto.InternalMessageInfo

func (m *GetPlanetMapByIDResponse) GetPlanetMap() *PlanetMap {
	if m != nil {
		return m.PlanetMap
	}
	return nil
}

func init() {
	proto.RegisterType((*PlanetMap)(nil), "planet_map.PlanetMap")
	proto.RegisterType((*GetPlanetMapByIDRequest)(nil), "planet_map.GetPlanetMapByIDRequest")
	proto.RegisterType((*GetPlanetMapByIDResponse)(nil), "planet_map.GetPlanetMapByIDResponse")
}

func init() { proto.RegisterFile("proto/planet_map.proto", fileDescriptor_c76a6df7491a6a50) }

var fileDescriptor_c76a6df7491a6a50 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x99, 0xfe, 0x7d, 0xed, 0xc9, 0x67, 0xd1, 0x11, 0x75, 0xc8, 0x22, 0x84, 0x2c, 0x4a,
	0x16, 0x12, 0xa1, 0x5d, 0x76, 0x57, 0x23, 0x25, 0x0b, 0xb1, 0x8c, 0x2e, 0xac, 0x1b, 0x49, 0xf1,
	0x2c, 0x02, 0xf9, 0x19, 0x33, 0xd3, 0x45, 0xee, 0xd0, 0xa5, 0x37, 0x20, 0x48, 0xae, 0x44, 0xcc,
	0xd8, 0x69, 0xb0, 0x2e, 0xf3, 0xbc, 0xcf, 0x0b, 0x79, 0xe7, 0xc0, 0xb9, 0x28, 0x0b, 0x55, 0x5c,
	0x89, 0x34, 0xce, 0x51, 0x3d, 0x67, 0xb1, 0x08, 0x1a, 0x40, 0x61, 0x4f, 0xec, 0x13, 0xed, 0x60,
	0x8e, 0x59, 0xa5, 0x63, 0xfb, 0x54, 0x23, 0x55, 0xa2, 0xdc, 0x96, 0xa8, 0xa1, 0xf7, 0x41, 0x60,
	0xb4, 0x6a, 0x6a, 0xb7, 0xb1, 0xa0, 0x63, 0xe8, 0x44, 0x21, 0x23, 0x2e, 0xf1, 0x8f, 0x78, 0x27,
	0x0a, 0xa9, 0x0d, 0xc3, 0x6b, 0x4c, 0xd3, 0x65, 0x99, 0xbc, 0xb0, 0x8e, 0x4b, 0xfc, 0x11, 0x37,
	0xdf, 0x74, 0x02, 0xe3, 0x7b, 0x15, 0x97, 0x6a, 0x55, 0xc8, 0x44, 0x25, 0x45, 0xfe, 0xc8, 0xba,
	0x2e, 0xf1, 0xfb, 0xfc, 0x17, 0x3d, 0xf0, 0xd6, 0xac, 0xf7, 0x87, 0xb7, 0xa6, 0x13, 0xf8, 0x77,
	0x93, 0x63, 0x96, 0xa0, 0x64, 0x7d, 0xb7, 0xeb, 0x5b, 0xd3, 0xff, 0x81, 0xfe, 0xfb, 0x6f, 0x5a,
	0xf1, 0x5d, 0x48, 0x2f, 0x61, 0xf8, 0xa0, 0x27, 0x48, 0x36, 0x68, 0xc4, 0xe3, 0x60, 0xb7, 0xe9,
	0x27, 0xe0, 0xc6, 0xf0, 0xe6, 0x70, 0xb1, 0x44, 0x65, 0x16, 0x2e, 0xaa, 0x28, 0xe4, 0xf8, 0xba,
	0x45, 0xa9, 0xa8, 0x0b, 0x96, 0xe1, 0x66, 0x75, 0x1b, 0x79, 0x77, 0xc0, 0x0e, 0xcb, 0x52, 0x14,
	0xb9, 0x44, 0x3a, 0x6b, 0xbd, 0x5b, 0xd3, 0xb5, 0xa6, 0x67, 0x41, 0xeb, 0x24, 0x26, 0xe4, 0x7b,
	0x6f, 0x41, 0xdf, 0x6a, 0x87, 0xbc, 0xd7, 0x0e, 0xf9, 0xac, 0x1d, 0xf2, 0xd4, 0x0b, 0xe6, 0x62,
	0xb3, 0x19, 0x34, 0x87, 0x98, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x61, 0x0d, 0x2c, 0xa5, 0xd6,
	0x01, 0x00, 0x00,
}

func (m *PlanetMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanetMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlanetMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tresures) > 0 {
		for iNdEx := len(m.Tresures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tresures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlanetMap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Enemies) > 0 {
		for iNdEx := len(m.Enemies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Enemies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlanetMap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.StartPositionY != 0 {
		i = encodeVarintPlanetMap(dAtA, i, uint64(m.StartPositionY))
		i--
		dAtA[i] = 0x20
	}
	if m.StartPositionX != 0 {
		i = encodeVarintPlanetMap(dAtA, i, uint64(m.StartPositionX))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CellGrid) > 0 {
		i -= len(m.CellGrid)
		copy(dAtA[i:], m.CellGrid)
		i = encodeVarintPlanetMap(dAtA, i, uint64(len(m.CellGrid)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPlanetMap(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetMapByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetMapByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetMapByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlanetMapID != 0 {
		i = encodeVarintPlanetMap(dAtA, i, uint64(m.PlanetMapID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetMapByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetMapByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetMapByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlanetMap != nil {
		{
			size, err := m.PlanetMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanetMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlanetMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlanetMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlanetMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlanetMap(uint64(m.ID))
	}
	l = len(m.CellGrid)
	if l > 0 {
		n += 1 + l + sovPlanetMap(uint64(l))
	}
	if m.StartPositionX != 0 {
		n += 1 + sovPlanetMap(uint64(m.StartPositionX))
	}
	if m.StartPositionY != 0 {
		n += 1 + sovPlanetMap(uint64(m.StartPositionY))
	}
	if len(m.Enemies) > 0 {
		for _, e := range m.Enemies {
			l = e.Size()
			n += 1 + l + sovPlanetMap(uint64(l))
		}
	}
	if len(m.Tresures) > 0 {
		for _, e := range m.Tresures {
			l = e.Size()
			n += 1 + l + sovPlanetMap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPlanetMapByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetMapID != 0 {
		n += 1 + sovPlanetMap(uint64(m.PlanetMapID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPlanetMapByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetMap != nil {
		l = m.PlanetMap.Size()
		n += 1 + l + sovPlanetMap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPlanetMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlanetMap(x uint64) (n int) {
	return sovPlanetMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlanetMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanetMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanetMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanetMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellGrid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlanetMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellGrid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPositionX", wireType)
			}
			m.StartPositionX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPositionX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPositionY", wireType)
			}
			m.StartPositionY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPositionY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanetMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enemies = append(m.Enemies, &Enemy{})
			if err := m.Enemies[len(m.Enemies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tresures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanetMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tresures = append(m.Tresures, &Tresure{})
			if err := m.Tresures[len(m.Tresures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanetMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetMapByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanetMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetMapByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetMapByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetMapID", wireType)
			}
			m.PlanetMapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetMapID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlanetMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetMapByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanetMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetMapByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetMapByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanetMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanetMap == nil {
				m.PlanetMap = &PlanetMap{}
			}
			if err := m.PlanetMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanetMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlanetMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlanetMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlanetMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlanetMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlanetMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlanetMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlanetMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlanetMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlanetMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlanetMap = fmt.Errorf("proto: unexpected end of group")
)
