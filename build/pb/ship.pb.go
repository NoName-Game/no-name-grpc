// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/ship.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ship struct {
	ID             uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PlayerID       uint32        `protobuf:"varint,3,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	RarityID       uint32        `protobuf:"varint,5,opt,name=RarityID,proto3" json:"RarityID,omitempty"`
	Rarity         *Rarity       `protobuf:"bytes,6,opt,name=Rarity,proto3" json:"Rarity,omitempty"`
	ShipCategoryID uint32        `protobuf:"varint,7,opt,name=ShipCategoryID,proto3" json:"ShipCategoryID,omitempty"`
	ShipCategory   *ShipCategory `protobuf:"bytes,8,opt,name=ShipCategory,proto3" json:"ShipCategory,omitempty"`
	Integrity      uint32        `protobuf:"varint,9,opt,name=Integrity,proto3" json:"Integrity,omitempty"`
	Tank           float64       `protobuf:"fixed64,10,opt,name=Tank,proto3" json:"Tank,omitempty"`
	Engine         float64       `protobuf:"fixed64,11,opt,name=Engine,proto3" json:"Engine,omitempty"`
	Speed          float64       `protobuf:"fixed64,12,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Radar          int32         `protobuf:"varint,13,opt,name=Radar,proto3" json:"Radar,omitempty"`
	Equipped       bool          `protobuf:"varint,14,opt,name=Equipped,proto3" json:"Equipped,omitempty"`
}

func (m *Ship) Reset()         { *m = Ship{} }
func (m *Ship) String() string { return proto.CompactTextString(m) }
func (*Ship) ProtoMessage()    {}
func (*Ship) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{0}
}
func (m *Ship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ship.Merge(m, src)
}
func (m *Ship) XXX_Size() int {
	return m.Size()
}
func (m *Ship) XXX_DiscardUnknown() {
	xxx_messageInfo_Ship.DiscardUnknown(m)
}

var xxx_messageInfo_Ship proto.InternalMessageInfo

func (m *Ship) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Ship) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ship) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *Ship) GetRarityID() uint32 {
	if m != nil {
		return m.RarityID
	}
	return 0
}

func (m *Ship) GetRarity() *Rarity {
	if m != nil {
		return m.Rarity
	}
	return nil
}

func (m *Ship) GetShipCategoryID() uint32 {
	if m != nil {
		return m.ShipCategoryID
	}
	return 0
}

func (m *Ship) GetShipCategory() *ShipCategory {
	if m != nil {
		return m.ShipCategory
	}
	return nil
}

func (m *Ship) GetIntegrity() uint32 {
	if m != nil {
		return m.Integrity
	}
	return 0
}

func (m *Ship) GetTank() float64 {
	if m != nil {
		return m.Tank
	}
	return 0
}

func (m *Ship) GetEngine() float64 {
	if m != nil {
		return m.Engine
	}
	return 0
}

func (m *Ship) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Ship) GetRadar() int32 {
	if m != nil {
		return m.Radar
	}
	return 0
}

func (m *Ship) GetEquipped() bool {
	if m != nil {
		return m.Equipped
	}
	return false
}

// GetShipByID
type GetShipByIDRequest struct {
	ShipID uint32 `protobuf:"varint,1,opt,name=ShipID,proto3" json:"ShipID,omitempty"`
}

func (m *GetShipByIDRequest) Reset()         { *m = GetShipByIDRequest{} }
func (m *GetShipByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetShipByIDRequest) ProtoMessage()    {}
func (*GetShipByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{1}
}
func (m *GetShipByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShipByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShipByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShipByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShipByIDRequest.Merge(m, src)
}
func (m *GetShipByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShipByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShipByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShipByIDRequest proto.InternalMessageInfo

func (m *GetShipByIDRequest) GetShipID() uint32 {
	if m != nil {
		return m.ShipID
	}
	return 0
}

type GetShipByIDResponse struct {
	Ship *Ship `protobuf:"bytes,1,opt,name=Ship,proto3" json:"Ship,omitempty"`
}

func (m *GetShipByIDResponse) Reset()         { *m = GetShipByIDResponse{} }
func (m *GetShipByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetShipByIDResponse) ProtoMessage()    {}
func (*GetShipByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{2}
}
func (m *GetShipByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShipByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShipByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShipByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShipByIDResponse.Merge(m, src)
}
func (m *GetShipByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetShipByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShipByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShipByIDResponse proto.InternalMessageInfo

func (m *GetShipByIDResponse) GetShip() *Ship {
	if m != nil {
		return m.Ship
	}
	return nil
}

// GetPlayerShips
type GetPlayerShipsRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerShipsRequest) Reset()         { *m = GetPlayerShipsRequest{} }
func (m *GetPlayerShipsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerShipsRequest) ProtoMessage()    {}
func (*GetPlayerShipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{3}
}
func (m *GetPlayerShipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerShipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerShipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerShipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerShipsRequest.Merge(m, src)
}
func (m *GetPlayerShipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerShipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerShipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerShipsRequest proto.InternalMessageInfo

func (m *GetPlayerShipsRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerShipsResponse struct {
	Ships []*Ship `protobuf:"bytes,1,rep,name=Ships,proto3" json:"Ships,omitempty"`
}

func (m *GetPlayerShipsResponse) Reset()         { *m = GetPlayerShipsResponse{} }
func (m *GetPlayerShipsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerShipsResponse) ProtoMessage()    {}
func (*GetPlayerShipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{4}
}
func (m *GetPlayerShipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerShipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerShipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerShipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerShipsResponse.Merge(m, src)
}
func (m *GetPlayerShipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerShipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerShipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerShipsResponse proto.InternalMessageInfo

func (m *GetPlayerShipsResponse) GetShips() []*Ship {
	if m != nil {
		return m.Ships
	}
	return nil
}

// GetPlayerShipEquipped
type GetPlayerShipEquippedRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerShipEquippedRequest) Reset()         { *m = GetPlayerShipEquippedRequest{} }
func (m *GetPlayerShipEquippedRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerShipEquippedRequest) ProtoMessage()    {}
func (*GetPlayerShipEquippedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{5}
}
func (m *GetPlayerShipEquippedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerShipEquippedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerShipEquippedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerShipEquippedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerShipEquippedRequest.Merge(m, src)
}
func (m *GetPlayerShipEquippedRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerShipEquippedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerShipEquippedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerShipEquippedRequest proto.InternalMessageInfo

func (m *GetPlayerShipEquippedRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerShipEquippedResponse struct {
	Ship *Ship `protobuf:"bytes,1,opt,name=Ship,proto3" json:"Ship,omitempty"`
}

func (m *GetPlayerShipEquippedResponse) Reset()         { *m = GetPlayerShipEquippedResponse{} }
func (m *GetPlayerShipEquippedResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerShipEquippedResponse) ProtoMessage()    {}
func (*GetPlayerShipEquippedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{6}
}
func (m *GetPlayerShipEquippedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerShipEquippedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerShipEquippedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerShipEquippedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerShipEquippedResponse.Merge(m, src)
}
func (m *GetPlayerShipEquippedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerShipEquippedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerShipEquippedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerShipEquippedResponse proto.InternalMessageInfo

func (m *GetPlayerShipEquippedResponse) GetShip() *Ship {
	if m != nil {
		return m.Ship
	}
	return nil
}

// EquipShip
type EquipShipRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	ShipID   uint32 `protobuf:"varint,2,opt,name=ShipID,proto3" json:"ShipID,omitempty"`
}

func (m *EquipShipRequest) Reset()         { *m = EquipShipRequest{} }
func (m *EquipShipRequest) String() string { return proto.CompactTextString(m) }
func (*EquipShipRequest) ProtoMessage()    {}
func (*EquipShipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{7}
}
func (m *EquipShipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipShipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipShipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipShipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipShipRequest.Merge(m, src)
}
func (m *EquipShipRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquipShipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipShipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquipShipRequest proto.InternalMessageInfo

func (m *EquipShipRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *EquipShipRequest) GetShipID() uint32 {
	if m != nil {
		return m.ShipID
	}
	return 0
}

type EquipShipResponse struct {
}

func (m *EquipShipResponse) Reset()         { *m = EquipShipResponse{} }
func (m *EquipShipResponse) String() string { return proto.CompactTextString(m) }
func (*EquipShipResponse) ProtoMessage()    {}
func (*EquipShipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4da4eb6c09d7c152, []int{8}
}
func (m *EquipShipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipShipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipShipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipShipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipShipResponse.Merge(m, src)
}
func (m *EquipShipResponse) XXX_Size() int {
	return m.Size()
}
func (m *EquipShipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipShipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EquipShipResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Ship)(nil), "ship.Ship")
	proto.RegisterType((*GetShipByIDRequest)(nil), "ship.GetShipByIDRequest")
	proto.RegisterType((*GetShipByIDResponse)(nil), "ship.GetShipByIDResponse")
	proto.RegisterType((*GetPlayerShipsRequest)(nil), "ship.GetPlayerShipsRequest")
	proto.RegisterType((*GetPlayerShipsResponse)(nil), "ship.GetPlayerShipsResponse")
	proto.RegisterType((*GetPlayerShipEquippedRequest)(nil), "ship.GetPlayerShipEquippedRequest")
	proto.RegisterType((*GetPlayerShipEquippedResponse)(nil), "ship.GetPlayerShipEquippedResponse")
	proto.RegisterType((*EquipShipRequest)(nil), "ship.EquipShipRequest")
	proto.RegisterType((*EquipShipResponse)(nil), "ship.EquipShipResponse")
}

func init() { proto.RegisterFile("proto/ship.proto", fileDescriptor_4da4eb6c09d7c152) }

var fileDescriptor_4da4eb6c09d7c152 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0x89, 0x6d, 0x92, 0x49, 0x6b, 0x95, 0x2d, 0x54, 0x4b, 0x28, 0xab, 0x95, 0x0f,
	0x95, 0x0f, 0xc8, 0x48, 0xad, 0xb8, 0x94, 0x43, 0xa5, 0xe2, 0x52, 0xf9, 0x82, 0xd0, 0x96, 0x13,
	0x17, 0xe4, 0x92, 0x55, 0x6a, 0x01, 0xf6, 0xd6, 0x76, 0x0f, 0x79, 0x00, 0xee, 0x3c, 0x16, 0xc7,
	0x1e, 0x39, 0xa2, 0xe4, 0x45, 0xd0, 0xce, 0x3a, 0xa9, 0x1d, 0x09, 0x91, 0xdb, 0xcc, 0x6f, 0x66,
	0xf6, 0x3f, 0x1f, 0x5a, 0xd8, 0xd3, 0x65, 0x51, 0x17, 0xaf, 0xaa, 0x9b, 0x4c, 0x47, 0x68, 0x52,
	0xc7, 0xd8, 0x13, 0x6a, 0x79, 0x99, 0x96, 0x59, 0x3d, 0xb7, 0x91, 0xc9, 0xb3, 0x87, 0xdc, 0xcf,
	0x5f, 0xd2, 0x5a, 0xcd, 0x8a, 0xb2, 0x09, 0x05, 0x3f, 0x06, 0xe0, 0x5c, 0xdd, 0x64, 0x9a, 0xfa,
	0xd0, 0x4f, 0x62, 0x46, 0x04, 0x09, 0x77, 0x65, 0x3f, 0x89, 0x29, 0x05, 0xe7, 0x7d, 0xfa, 0x5d,
	0xb1, 0xbe, 0x20, 0xe1, 0x48, 0xa2, 0x4d, 0x27, 0x30, 0xfc, 0xf0, 0x2d, 0x9d, 0xab, 0x32, 0x89,
	0xd9, 0x00, 0x33, 0xd7, 0xbe, 0x89, 0x49, 0xd4, 0x4c, 0x62, 0xe6, 0xda, 0xd8, 0xca, 0xa7, 0x47,
	0xe0, 0x59, 0x9b, 0x79, 0x82, 0x84, 0xe3, 0x63, 0x3f, 0x6a, 0xda, 0xb3, 0x54, 0x36, 0x51, 0x7a,
	0x04, 0xbe, 0xe9, 0xe5, 0x6d, 0xd3, 0x62, 0x12, 0xb3, 0x47, 0xf8, 0xd2, 0x06, 0xa5, 0x67, 0xb0,
	0xd3, 0x26, 0x6c, 0x88, 0xaf, 0x3e, 0x8f, 0xba, 0x03, 0xb6, 0x53, 0x64, 0xa7, 0x80, 0x1e, 0xc2,
	0x28, 0xc9, 0x6b, 0x35, 0xc3, 0x9e, 0x46, 0xa8, 0xf1, 0x00, 0xcc, 0xe8, 0x1f, 0xd3, 0xfc, 0x2b,
	0x03, 0x41, 0x42, 0x22, 0xd1, 0xa6, 0x07, 0xe0, 0x5d, 0xe4, 0xb3, 0x2c, 0x57, 0x6c, 0x8c, 0xb4,
	0xf1, 0xe8, 0x13, 0x70, 0xaf, 0xb4, 0x52, 0x53, 0xb6, 0x83, 0xd8, 0x3a, 0x86, 0xca, 0x74, 0x9a,
	0x96, 0x6c, 0x57, 0x90, 0xd0, 0x95, 0xd6, 0x31, 0x2b, 0xba, 0xb8, 0xbd, 0xcb, 0xb4, 0x56, 0x53,
	0xe6, 0x0b, 0x12, 0x0e, 0xe5, 0xda, 0x0f, 0x5e, 0x02, 0xbd, 0x54, 0xb5, 0x69, 0xf2, 0x7c, 0x9e,
	0xc4, 0x52, 0xdd, 0xde, 0xa9, 0xaa, 0x36, 0xaa, 0x06, 0xad, 0x0f, 0xd3, 0x78, 0xc1, 0x6b, 0xd8,
	0xef, 0x64, 0x57, 0xba, 0xc8, 0x2b, 0x45, 0xb9, 0xbd, 0x25, 0x26, 0x8f, 0x8f, 0x01, 0xf7, 0x81,
	0x6b, 0x90, 0xc8, 0x83, 0x13, 0x78, 0x7a, 0xa9, 0x6a, 0x7b, 0x32, 0x03, 0xaa, 0x95, 0x4e, 0xfb,
	0xb0, 0xa4, 0x7b, 0xd8, 0xe0, 0x14, 0x0e, 0x36, 0x8b, 0x1a, 0x39, 0x01, 0x2e, 0x02, 0x46, 0xc4,
	0x60, 0x43, 0xcf, 0x06, 0x82, 0x53, 0x38, 0xec, 0xd4, 0xae, 0xc6, 0xdd, 0x46, 0xf7, 0x0c, 0x5e,
	0xfc, 0xa3, 0x76, 0xcb, 0x69, 0xdf, 0xc1, 0x1e, 0xd6, 0x20, 0xfa, 0xbf, 0x60, 0x6b, 0xd9, 0xfd,
	0xce, 0xb2, 0xf7, 0xe1, 0x71, 0xeb, 0x1d, 0x2b, 0x7e, 0xce, 0x7f, 0x2d, 0x38, 0xb9, 0x5f, 0x70,
	0xf2, 0x67, 0xc1, 0xc9, 0xcf, 0x25, 0xef, 0xdd, 0x2f, 0x79, 0xef, 0xf7, 0x92, 0xf7, 0x3e, 0x39,
	0xd1, 0x1b, 0x7d, 0x7d, 0xed, 0xe1, 0xf7, 0x3a, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x55, 0xc5,
	0x22, 0x43, 0xa7, 0x03, 0x00, 0x00,
}

func (m *Ship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Equipped {
		i--
		if m.Equipped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Radar != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.Radar))
		i--
		dAtA[i] = 0x68
	}
	if m.Speed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i--
		dAtA[i] = 0x61
	}
	if m.Engine != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Engine))))
		i--
		dAtA[i] = 0x59
	}
	if m.Tank != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tank))))
		i--
		dAtA[i] = 0x51
	}
	if m.Integrity != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.Integrity))
		i--
		dAtA[i] = 0x48
	}
	if m.ShipCategory != nil {
		{
			size, err := m.ShipCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ShipCategoryID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.ShipCategoryID))
		i--
		dAtA[i] = 0x38
	}
	if m.Rarity != nil {
		{
			size, err := m.Rarity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RarityID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.RarityID))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintShip(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetShipByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShipByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShipByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShipID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.ShipID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetShipByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShipByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShipByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ship != nil {
		{
			size, err := m.Ship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerShipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerShipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerShipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerShipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerShipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerShipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ships) > 0 {
		for iNdEx := len(m.Ships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShip(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerShipEquippedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerShipEquippedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerShipEquippedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerShipEquippedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerShipEquippedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerShipEquippedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ship != nil {
		{
			size, err := m.Ship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EquipShipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipShipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipShipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShipID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.ShipID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintShip(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EquipShipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipShipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipShipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintShip(dAtA []byte, offset int, v uint64) int {
	offset -= sovShip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovShip(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovShip(uint64(l))
	}
	if m.PlayerID != 0 {
		n += 1 + sovShip(uint64(m.PlayerID))
	}
	if m.RarityID != 0 {
		n += 1 + sovShip(uint64(m.RarityID))
	}
	if m.Rarity != nil {
		l = m.Rarity.Size()
		n += 1 + l + sovShip(uint64(l))
	}
	if m.ShipCategoryID != 0 {
		n += 1 + sovShip(uint64(m.ShipCategoryID))
	}
	if m.ShipCategory != nil {
		l = m.ShipCategory.Size()
		n += 1 + l + sovShip(uint64(l))
	}
	if m.Integrity != 0 {
		n += 1 + sovShip(uint64(m.Integrity))
	}
	if m.Tank != 0 {
		n += 9
	}
	if m.Engine != 0 {
		n += 9
	}
	if m.Speed != 0 {
		n += 9
	}
	if m.Radar != 0 {
		n += 1 + sovShip(uint64(m.Radar))
	}
	if m.Equipped {
		n += 2
	}
	return n
}

func (m *GetShipByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShipID != 0 {
		n += 1 + sovShip(uint64(m.ShipID))
	}
	return n
}

func (m *GetShipByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ship != nil {
		l = m.Ship.Size()
		n += 1 + l + sovShip(uint64(l))
	}
	return n
}

func (m *GetPlayerShipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovShip(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerShipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ships) > 0 {
		for _, e := range m.Ships {
			l = e.Size()
			n += 1 + l + sovShip(uint64(l))
		}
	}
	return n
}

func (m *GetPlayerShipEquippedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovShip(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerShipEquippedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ship != nil {
		l = m.Ship.Size()
		n += 1 + l + sovShip(uint64(l))
	}
	return n
}

func (m *EquipShipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovShip(uint64(m.PlayerID))
	}
	if m.ShipID != 0 {
		n += 1 + sovShip(uint64(m.ShipID))
	}
	return n
}

func (m *EquipShipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovShip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShip(x uint64) (n int) {
	return sovShip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RarityID", wireType)
			}
			m.RarityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RarityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rarity == nil {
				m.Rarity = &Rarity{}
			}
			if err := m.Rarity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipCategoryID", wireType)
			}
			m.ShipCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShipCategory == nil {
				m.ShipCategory = &ShipCategory{}
			}
			if err := m.ShipCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrity", wireType)
			}
			m.Integrity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Integrity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tank", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tank = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engine", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Engine = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radar", wireType)
			}
			m.Radar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radar |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Equipped = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShipByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShipByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShipByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipID", wireType)
			}
			m.ShipID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShipByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShipByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShipByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ship == nil {
				m.Ship = &Ship{}
			}
			if err := m.Ship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerShipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerShipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerShipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerShipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerShipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerShipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ships = append(m.Ships, &Ship{})
			if err := m.Ships[len(m.Ships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerShipEquippedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerShipEquippedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerShipEquippedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerShipEquippedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerShipEquippedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerShipEquippedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ship == nil {
				m.Ship = &Ship{}
			}
			if err := m.Ship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipShipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipShipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipShipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipID", wireType)
			}
			m.ShipID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipShipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipShipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipShipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShip = fmt.Errorf("proto: unexpected end of group")
)
