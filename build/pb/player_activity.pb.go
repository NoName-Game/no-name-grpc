// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/player_activity.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlayerActivity struct {
	ID         uint32           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PlayerID   uint32           `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Controller string           `protobuf:"bytes,3,opt,name=Controller,proto3" json:"Controller,omitempty"`
	Payload    string           `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
	ToNotify   bool             `protobuf:"varint,5,opt,name=ToNotify,proto3" json:"ToNotify,omitempty"`
	FinishAt   *types.Timestamp `protobuf:"bytes,6,opt,name=FinishAt,proto3" json:"FinishAt,omitempty"`
}

func (m *PlayerActivity) Reset()         { *m = PlayerActivity{} }
func (m *PlayerActivity) String() string { return proto.CompactTextString(m) }
func (*PlayerActivity) ProtoMessage()    {}
func (*PlayerActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{0}
}
func (m *PlayerActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerActivity.Merge(m, src)
}
func (m *PlayerActivity) XXX_Size() int {
	return m.Size()
}
func (m *PlayerActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerActivity.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerActivity proto.InternalMessageInfo

func (m *PlayerActivity) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PlayerActivity) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *PlayerActivity) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *PlayerActivity) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *PlayerActivity) GetToNotify() bool {
	if m != nil {
		return m.ToNotify
	}
	return false
}

func (m *PlayerActivity) GetFinishAt() *types.Timestamp {
	if m != nil {
		return m.FinishAt
	}
	return nil
}

// GetPlayerActivityByID
type GetPlayerActivityByIDRequest struct {
	ActivityID uint32 `protobuf:"varint,1,opt,name=ActivityID,proto3" json:"ActivityID,omitempty"`
}

func (m *GetPlayerActivityByIDRequest) Reset()         { *m = GetPlayerActivityByIDRequest{} }
func (m *GetPlayerActivityByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerActivityByIDRequest) ProtoMessage()    {}
func (*GetPlayerActivityByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{1}
}
func (m *GetPlayerActivityByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerActivityByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerActivityByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerActivityByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerActivityByIDRequest.Merge(m, src)
}
func (m *GetPlayerActivityByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerActivityByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerActivityByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerActivityByIDRequest proto.InternalMessageInfo

func (m *GetPlayerActivityByIDRequest) GetActivityID() uint32 {
	if m != nil {
		return m.ActivityID
	}
	return 0
}

type GetPlayerActivityByIDResponse struct {
	PlayerActivity *PlayerActivity `protobuf:"bytes,1,opt,name=PlayerActivity,proto3" json:"PlayerActivity,omitempty"`
}

func (m *GetPlayerActivityByIDResponse) Reset()         { *m = GetPlayerActivityByIDResponse{} }
func (m *GetPlayerActivityByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerActivityByIDResponse) ProtoMessage()    {}
func (*GetPlayerActivityByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{2}
}
func (m *GetPlayerActivityByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerActivityByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerActivityByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerActivityByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerActivityByIDResponse.Merge(m, src)
}
func (m *GetPlayerActivityByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerActivityByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerActivityByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerActivityByIDResponse proto.InternalMessageInfo

func (m *GetPlayerActivityByIDResponse) GetPlayerActivity() *PlayerActivity {
	if m != nil {
		return m.PlayerActivity
	}
	return nil
}

// GetActivePlayerActivities
type GetActivePlayerActivitiesRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetActivePlayerActivitiesRequest) Reset()         { *m = GetActivePlayerActivitiesRequest{} }
func (m *GetActivePlayerActivitiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetActivePlayerActivitiesRequest) ProtoMessage()    {}
func (*GetActivePlayerActivitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{3}
}
func (m *GetActivePlayerActivitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActivePlayerActivitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActivePlayerActivitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActivePlayerActivitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActivePlayerActivitiesRequest.Merge(m, src)
}
func (m *GetActivePlayerActivitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActivePlayerActivitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActivePlayerActivitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActivePlayerActivitiesRequest proto.InternalMessageInfo

func (m *GetActivePlayerActivitiesRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetActivePlayerActivitiesResponse struct {
	Activities []*PlayerActivity `protobuf:"bytes,1,rep,name=Activities,proto3" json:"Activities,omitempty"`
}

func (m *GetActivePlayerActivitiesResponse) Reset()         { *m = GetActivePlayerActivitiesResponse{} }
func (m *GetActivePlayerActivitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetActivePlayerActivitiesResponse) ProtoMessage()    {}
func (*GetActivePlayerActivitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{4}
}
func (m *GetActivePlayerActivitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActivePlayerActivitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActivePlayerActivitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActivePlayerActivitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActivePlayerActivitiesResponse.Merge(m, src)
}
func (m *GetActivePlayerActivitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActivePlayerActivitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActivePlayerActivitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActivePlayerActivitiesResponse proto.InternalMessageInfo

func (m *GetActivePlayerActivitiesResponse) GetActivities() []*PlayerActivity {
	if m != nil {
		return m.Activities
	}
	return nil
}

// GetPlayerActivityToNotify
type GetPlayerActivityToNotifyRequest struct {
}

func (m *GetPlayerActivityToNotifyRequest) Reset()         { *m = GetPlayerActivityToNotifyRequest{} }
func (m *GetPlayerActivityToNotifyRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerActivityToNotifyRequest) ProtoMessage()    {}
func (*GetPlayerActivityToNotifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{5}
}
func (m *GetPlayerActivityToNotifyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerActivityToNotifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerActivityToNotifyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerActivityToNotifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerActivityToNotifyRequest.Merge(m, src)
}
func (m *GetPlayerActivityToNotifyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerActivityToNotifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerActivityToNotifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerActivityToNotifyRequest proto.InternalMessageInfo

type GetPlayerActivityToNotifyResponse struct {
	PlayerActivities []*PlayerActivity `protobuf:"bytes,1,rep,name=PlayerActivities,proto3" json:"PlayerActivities,omitempty"`
}

func (m *GetPlayerActivityToNotifyResponse) Reset()         { *m = GetPlayerActivityToNotifyResponse{} }
func (m *GetPlayerActivityToNotifyResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerActivityToNotifyResponse) ProtoMessage()    {}
func (*GetPlayerActivityToNotifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{6}
}
func (m *GetPlayerActivityToNotifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerActivityToNotifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerActivityToNotifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerActivityToNotifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerActivityToNotifyResponse.Merge(m, src)
}
func (m *GetPlayerActivityToNotifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerActivityToNotifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerActivityToNotifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerActivityToNotifyResponse proto.InternalMessageInfo

func (m *GetPlayerActivityToNotifyResponse) GetPlayerActivities() []*PlayerActivity {
	if m != nil {
		return m.PlayerActivities
	}
	return nil
}

// SetPlayerActivityNotified
type SetPlayerActivityNotifiedRequest struct {
	ActivityID uint32 `protobuf:"varint,1,opt,name=ActivityID,proto3" json:"ActivityID,omitempty"`
}

func (m *SetPlayerActivityNotifiedRequest) Reset()         { *m = SetPlayerActivityNotifiedRequest{} }
func (m *SetPlayerActivityNotifiedRequest) String() string { return proto.CompactTextString(m) }
func (*SetPlayerActivityNotifiedRequest) ProtoMessage()    {}
func (*SetPlayerActivityNotifiedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{7}
}
func (m *SetPlayerActivityNotifiedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPlayerActivityNotifiedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPlayerActivityNotifiedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPlayerActivityNotifiedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPlayerActivityNotifiedRequest.Merge(m, src)
}
func (m *SetPlayerActivityNotifiedRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetPlayerActivityNotifiedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPlayerActivityNotifiedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPlayerActivityNotifiedRequest proto.InternalMessageInfo

func (m *SetPlayerActivityNotifiedRequest) GetActivityID() uint32 {
	if m != nil {
		return m.ActivityID
	}
	return 0
}

type SetPlayerActivityNotifiedResponse struct {
}

func (m *SetPlayerActivityNotifiedResponse) Reset()         { *m = SetPlayerActivityNotifiedResponse{} }
func (m *SetPlayerActivityNotifiedResponse) String() string { return proto.CompactTextString(m) }
func (*SetPlayerActivityNotifiedResponse) ProtoMessage()    {}
func (*SetPlayerActivityNotifiedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{8}
}
func (m *SetPlayerActivityNotifiedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPlayerActivityNotifiedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPlayerActivityNotifiedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPlayerActivityNotifiedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPlayerActivityNotifiedResponse.Merge(m, src)
}
func (m *SetPlayerActivityNotifiedResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetPlayerActivityNotifiedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPlayerActivityNotifiedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetPlayerActivityNotifiedResponse proto.InternalMessageInfo

// CreatePlayerActivity
type CreatePlayerActivityRequest struct {
	PlayerActivity *PlayerActivity `protobuf:"bytes,1,opt,name=PlayerActivity,proto3" json:"PlayerActivity,omitempty"`
}

func (m *CreatePlayerActivityRequest) Reset()         { *m = CreatePlayerActivityRequest{} }
func (m *CreatePlayerActivityRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePlayerActivityRequest) ProtoMessage()    {}
func (*CreatePlayerActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{9}
}
func (m *CreatePlayerActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayerActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayerActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayerActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayerActivityRequest.Merge(m, src)
}
func (m *CreatePlayerActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayerActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayerActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayerActivityRequest proto.InternalMessageInfo

func (m *CreatePlayerActivityRequest) GetPlayerActivity() *PlayerActivity {
	if m != nil {
		return m.PlayerActivity
	}
	return nil
}

type CreatePlayerActivityResponse struct {
	PlayerActivity *PlayerActivity `protobuf:"bytes,1,opt,name=PlayerActivity,proto3" json:"PlayerActivity,omitempty"`
}

func (m *CreatePlayerActivityResponse) Reset()         { *m = CreatePlayerActivityResponse{} }
func (m *CreatePlayerActivityResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePlayerActivityResponse) ProtoMessage()    {}
func (*CreatePlayerActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{10}
}
func (m *CreatePlayerActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayerActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayerActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayerActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayerActivityResponse.Merge(m, src)
}
func (m *CreatePlayerActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayerActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayerActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayerActivityResponse proto.InternalMessageInfo

func (m *CreatePlayerActivityResponse) GetPlayerActivity() *PlayerActivity {
	if m != nil {
		return m.PlayerActivity
	}
	return nil
}

// UpdatePlayerActivity
type UpdatePlayerActivityRequest struct {
	PlayerActivity *PlayerActivity `protobuf:"bytes,1,opt,name=PlayerActivity,proto3" json:"PlayerActivity,omitempty"`
}

func (m *UpdatePlayerActivityRequest) Reset()         { *m = UpdatePlayerActivityRequest{} }
func (m *UpdatePlayerActivityRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePlayerActivityRequest) ProtoMessage()    {}
func (*UpdatePlayerActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{11}
}
func (m *UpdatePlayerActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePlayerActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePlayerActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePlayerActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePlayerActivityRequest.Merge(m, src)
}
func (m *UpdatePlayerActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePlayerActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePlayerActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePlayerActivityRequest proto.InternalMessageInfo

func (m *UpdatePlayerActivityRequest) GetPlayerActivity() *PlayerActivity {
	if m != nil {
		return m.PlayerActivity
	}
	return nil
}

type UpdatePlayerActivityResponse struct {
	PlayerActivity *PlayerActivity `protobuf:"bytes,1,opt,name=PlayerActivity,proto3" json:"PlayerActivity,omitempty"`
}

func (m *UpdatePlayerActivityResponse) Reset()         { *m = UpdatePlayerActivityResponse{} }
func (m *UpdatePlayerActivityResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePlayerActivityResponse) ProtoMessage()    {}
func (*UpdatePlayerActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{12}
}
func (m *UpdatePlayerActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePlayerActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePlayerActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePlayerActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePlayerActivityResponse.Merge(m, src)
}
func (m *UpdatePlayerActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePlayerActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePlayerActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePlayerActivityResponse proto.InternalMessageInfo

func (m *UpdatePlayerActivityResponse) GetPlayerActivity() *PlayerActivity {
	if m != nil {
		return m.PlayerActivity
	}
	return nil
}

// DeletePlayerActivity
type DeletePlayerActivityRequest struct {
	PlayerActivityID uint32 `protobuf:"varint,1,opt,name=PlayerActivityID,proto3" json:"PlayerActivityID,omitempty"`
	ForceDelete      bool   `protobuf:"varint,2,opt,name=ForceDelete,proto3" json:"ForceDelete,omitempty"`
}

func (m *DeletePlayerActivityRequest) Reset()         { *m = DeletePlayerActivityRequest{} }
func (m *DeletePlayerActivityRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePlayerActivityRequest) ProtoMessage()    {}
func (*DeletePlayerActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{13}
}
func (m *DeletePlayerActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePlayerActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePlayerActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePlayerActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePlayerActivityRequest.Merge(m, src)
}
func (m *DeletePlayerActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePlayerActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePlayerActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePlayerActivityRequest proto.InternalMessageInfo

func (m *DeletePlayerActivityRequest) GetPlayerActivityID() uint32 {
	if m != nil {
		return m.PlayerActivityID
	}
	return 0
}

func (m *DeletePlayerActivityRequest) GetForceDelete() bool {
	if m != nil {
		return m.ForceDelete
	}
	return false
}

type DeletePlayerActivityResponse struct {
}

func (m *DeletePlayerActivityResponse) Reset()         { *m = DeletePlayerActivityResponse{} }
func (m *DeletePlayerActivityResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePlayerActivityResponse) ProtoMessage()    {}
func (*DeletePlayerActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{14}
}
func (m *DeletePlayerActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePlayerActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePlayerActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePlayerActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePlayerActivityResponse.Merge(m, src)
}
func (m *DeletePlayerActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeletePlayerActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePlayerActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePlayerActivityResponse proto.InternalMessageInfo

// DeletePlayerActivityByController
type DeletePlayerActivityByControllerRequest struct {
	PlayerID   uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Controller string `protobuf:"bytes,2,opt,name=Controller,proto3" json:"Controller,omitempty"`
	Force      bool   `protobuf:"varint,3,opt,name=Force,proto3" json:"Force,omitempty"`
}

func (m *DeletePlayerActivityByControllerRequest) Reset() {
	*m = DeletePlayerActivityByControllerRequest{}
}
func (m *DeletePlayerActivityByControllerRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePlayerActivityByControllerRequest) ProtoMessage()    {}
func (*DeletePlayerActivityByControllerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{15}
}
func (m *DeletePlayerActivityByControllerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePlayerActivityByControllerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePlayerActivityByControllerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePlayerActivityByControllerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePlayerActivityByControllerRequest.Merge(m, src)
}
func (m *DeletePlayerActivityByControllerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePlayerActivityByControllerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePlayerActivityByControllerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePlayerActivityByControllerRequest proto.InternalMessageInfo

func (m *DeletePlayerActivityByControllerRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DeletePlayerActivityByControllerRequest) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *DeletePlayerActivityByControllerRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type DeletePlayerActivityByControllerResponse struct {
}

func (m *DeletePlayerActivityByControllerResponse) Reset() {
	*m = DeletePlayerActivityByControllerResponse{}
}
func (m *DeletePlayerActivityByControllerResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePlayerActivityByControllerResponse) ProtoMessage()    {}
func (*DeletePlayerActivityByControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbdea1a7436a3567, []int{16}
}
func (m *DeletePlayerActivityByControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePlayerActivityByControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePlayerActivityByControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePlayerActivityByControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePlayerActivityByControllerResponse.Merge(m, src)
}
func (m *DeletePlayerActivityByControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeletePlayerActivityByControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePlayerActivityByControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePlayerActivityByControllerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PlayerActivity)(nil), "player_activity.PlayerActivity")
	proto.RegisterType((*GetPlayerActivityByIDRequest)(nil), "player_activity.GetPlayerActivityByIDRequest")
	proto.RegisterType((*GetPlayerActivityByIDResponse)(nil), "player_activity.GetPlayerActivityByIDResponse")
	proto.RegisterType((*GetActivePlayerActivitiesRequest)(nil), "player_activity.GetActivePlayerActivitiesRequest")
	proto.RegisterType((*GetActivePlayerActivitiesResponse)(nil), "player_activity.GetActivePlayerActivitiesResponse")
	proto.RegisterType((*GetPlayerActivityToNotifyRequest)(nil), "player_activity.GetPlayerActivityToNotifyRequest")
	proto.RegisterType((*GetPlayerActivityToNotifyResponse)(nil), "player_activity.GetPlayerActivityToNotifyResponse")
	proto.RegisterType((*SetPlayerActivityNotifiedRequest)(nil), "player_activity.SetPlayerActivityNotifiedRequest")
	proto.RegisterType((*SetPlayerActivityNotifiedResponse)(nil), "player_activity.SetPlayerActivityNotifiedResponse")
	proto.RegisterType((*CreatePlayerActivityRequest)(nil), "player_activity.CreatePlayerActivityRequest")
	proto.RegisterType((*CreatePlayerActivityResponse)(nil), "player_activity.CreatePlayerActivityResponse")
	proto.RegisterType((*UpdatePlayerActivityRequest)(nil), "player_activity.UpdatePlayerActivityRequest")
	proto.RegisterType((*UpdatePlayerActivityResponse)(nil), "player_activity.UpdatePlayerActivityResponse")
	proto.RegisterType((*DeletePlayerActivityRequest)(nil), "player_activity.DeletePlayerActivityRequest")
	proto.RegisterType((*DeletePlayerActivityResponse)(nil), "player_activity.DeletePlayerActivityResponse")
	proto.RegisterType((*DeletePlayerActivityByControllerRequest)(nil), "player_activity.DeletePlayerActivityByControllerRequest")
	proto.RegisterType((*DeletePlayerActivityByControllerResponse)(nil), "player_activity.DeletePlayerActivityByControllerResponse")
}

func init() { proto.RegisterFile("proto/player_activity.proto", fileDescriptor_cbdea1a7436a3567) }

var fileDescriptor_cbdea1a7436a3567 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xa6, 0x1f, 0x98, 0x89, 0x28, 0xc8, 0xe2, 0x60, 0x25, 0xc1, 0x75, 0x97, 0x03, 0x56,
	0x0f, 0x8e, 0x54, 0x24, 0x2e, 0x48, 0x45, 0x4d, 0xad, 0x46, 0x11, 0x12, 0xaa, 0x4c, 0xb9, 0x70,
	0x41, 0x4e, 0x33, 0x49, 0x57, 0xb8, 0x59, 0x63, 0x6f, 0x91, 0x2c, 0xfe, 0x04, 0x3f, 0x0b, 0x71,
	0xea, 0x91, 0x23, 0x4a, 0xfe, 0x08, 0xea, 0xfa, 0xa3, 0xf6, 0xe6, 0x83, 0x1c, 0xa2, 0x1e, 0xe7,
	0xcd, 0xbc, 0x99, 0xf7, 0xbc, 0xe3, 0x81, 0x56, 0x18, 0x71, 0xc1, 0x3b, 0x61, 0xe0, 0x27, 0x18,
	0x7d, 0xf1, 0x2f, 0x05, 0xfb, 0xce, 0x44, 0xe2, 0x48, 0x54, 0x7f, 0xaa, 0xc0, 0xcd, 0xfd, 0x31,
	0xe7, 0xe3, 0x00, 0x3b, 0x32, 0x3d, 0xb8, 0x19, 0x75, 0x04, 0xbb, 0xc6, 0x58, 0xf8, 0xd7, 0x61,
	0xca, 0xa0, 0xbf, 0x09, 0xec, 0x9d, 0x4b, 0xd2, 0x49, 0xc6, 0xd1, 0xf7, 0xa0, 0xde, 0x77, 0x0d,
	0x62, 0x11, 0xfb, 0x89, 0x57, 0xef, 0xbb, 0x7a, 0x13, 0xb4, 0xb4, 0xa2, 0xef, 0x1a, 0x75, 0x89,
	0x16, 0xb1, 0x6e, 0x02, 0x9c, 0xf2, 0x89, 0x88, 0x78, 0x10, 0x60, 0x64, 0x6c, 0x59, 0xc4, 0x7e,
	0xec, 0x95, 0x10, 0xdd, 0x80, 0x47, 0xe7, 0x7e, 0x12, 0x70, 0x7f, 0x68, 0x6c, 0xcb, 0x64, 0x1e,
	0xde, 0x75, 0xbd, 0xe0, 0x1f, 0xb8, 0x60, 0xa3, 0xc4, 0xd8, 0xb1, 0x88, 0xad, 0x79, 0x45, 0xac,
	0xbf, 0x01, 0xed, 0x8c, 0x4d, 0x58, 0x7c, 0x75, 0x22, 0x8c, 0x5d, 0x8b, 0xd8, 0x8d, 0xa3, 0xa6,
	0x93, 0x1a, 0x71, 0x72, 0x23, 0xce, 0x45, 0x6e, 0xc4, 0x2b, 0x6a, 0xe9, 0x31, 0xb4, 0x7b, 0x28,
	0xaa, 0x76, 0xba, 0x49, 0xdf, 0xf5, 0xf0, 0xdb, 0x0d, 0xc6, 0xe2, 0x4e, 0x6d, 0x0e, 0x17, 0x0e,
	0x4b, 0x08, 0xbd, 0x82, 0x17, 0x4b, 0xf8, 0x71, 0xc8, 0x27, 0x31, 0xea, 0x3d, 0xf5, 0x63, 0xc9,
	0x26, 0x8d, 0xa3, 0x7d, 0x47, 0x7d, 0x8f, 0x6a, 0x99, 0xa7, 0xd0, 0xe8, 0x31, 0x58, 0x3d, 0x14,
	0x32, 0xc4, 0x4a, 0x8a, 0x61, 0x9c, 0xab, 0x2d, 0x7f, 0x77, 0x52, 0xfd, 0xee, 0x74, 0x08, 0x07,
	0x2b, 0xf8, 0x99, 0xda, 0x77, 0x85, 0x5d, 0x86, 0xb1, 0x41, 0xac, 0xad, 0x75, 0x94, 0x96, 0x28,
	0x94, 0x4a, 0x95, 0xd5, 0x82, 0xfc, 0x91, 0x32, 0x95, 0x34, 0x94, 0x4a, 0x96, 0xd5, 0x64, 0x4a,
	0xde, 0xc3, 0x33, 0x55, 0xe5, 0xba, 0x7a, 0xe6, 0x88, 0xb4, 0x0b, 0xd6, 0x47, 0x75, 0xa2, 0x9c,
	0xc7, 0x70, 0xb8, 0xee, 0x4b, 0xbf, 0x84, 0x83, 0x15, 0x3d, 0x52, 0xd5, 0x74, 0x04, 0xad, 0xd3,
	0x08, 0x7d, 0x81, 0x8a, 0xa4, 0x6c, 0xc6, 0xc6, 0x96, 0x61, 0x0c, 0xed, 0xc5, 0x73, 0x36, 0xbd,
	0x75, 0x23, 0x68, 0x7d, 0x0a, 0x87, 0x0f, 0x62, 0x68, 0xf1, 0x9c, 0x4d, 0x1b, 0xfa, 0x0a, 0x2d,
	0x17, 0x03, 0x5c, 0x66, 0xe8, 0x50, 0x59, 0xbb, 0xfb, 0x5d, 0x98, 0xc3, 0x75, 0x0b, 0x1a, 0x67,
	0x3c, 0xba, 0xc4, 0xb4, 0x9f, 0x3c, 0x74, 0x9a, 0x57, 0x86, 0xa8, 0x09, 0xed, 0xc5, 0xc3, 0xb2,
	0x75, 0xf9, 0x01, 0xaf, 0x16, 0xe5, 0xbb, 0xc9, 0xfd, 0x3d, 0x5c, 0xe3, 0xd7, 0x56, 0x4e, 0x6a,
	0x7d, 0xee, 0xa4, 0x3e, 0x87, 0x1d, 0xa9, 0x4a, 0x5e, 0x5b, 0xcd, 0x4b, 0x03, 0x7a, 0x08, 0xf6,
	0xff, 0x87, 0xa7, 0x42, 0xbb, 0xe6, 0xaf, 0xa9, 0x49, 0x6e, 0xa7, 0x26, 0xf9, 0x3b, 0x35, 0xc9,
	0xcf, 0x99, 0x59, 0xbb, 0x9d, 0x99, 0xb5, 0x3f, 0x33, 0xb3, 0xf6, 0x79, 0xdb, 0x79, 0x1b, 0x0e,
	0x06, 0xbb, 0xf2, 0xc8, 0xbe, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xc2, 0x50, 0xc2, 0x6b,
	0x06, 0x00, 0x00,
}

func (m *PlayerActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinishAt != nil {
		{
			size, err := m.FinishAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ToNotify {
		i--
		if m.ToNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPlayerActivity(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintPlayerActivity(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlayerActivity(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPlayerActivity(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerActivityByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerActivityByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerActivityByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityID != 0 {
		i = encodeVarintPlayerActivity(dAtA, i, uint64(m.ActivityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerActivityByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerActivityByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerActivityByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerActivity != nil {
		{
			size, err := m.PlayerActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActivePlayerActivitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActivePlayerActivitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActivePlayerActivitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintPlayerActivity(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActivePlayerActivitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActivePlayerActivitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActivePlayerActivitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for iNdEx := len(m.Activities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerActivityToNotifyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerActivityToNotifyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerActivityToNotifyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPlayerActivityToNotifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerActivityToNotifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerActivityToNotifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerActivities) > 0 {
		for iNdEx := len(m.PlayerActivities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerActivities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetPlayerActivityNotifiedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPlayerActivityNotifiedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPlayerActivityNotifiedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityID != 0 {
		i = encodeVarintPlayerActivity(dAtA, i, uint64(m.ActivityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetPlayerActivityNotifiedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPlayerActivityNotifiedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPlayerActivityNotifiedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreatePlayerActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayerActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePlayerActivityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerActivity != nil {
		{
			size, err := m.PlayerActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePlayerActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayerActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePlayerActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerActivity != nil {
		{
			size, err := m.PlayerActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePlayerActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePlayerActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePlayerActivityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerActivity != nil {
		{
			size, err := m.PlayerActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePlayerActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePlayerActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePlayerActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerActivity != nil {
		{
			size, err := m.PlayerActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletePlayerActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePlayerActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePlayerActivityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceDelete {
		i--
		if m.ForceDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerActivityID != 0 {
		i = encodeVarintPlayerActivity(dAtA, i, uint64(m.PlayerActivityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePlayerActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePlayerActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePlayerActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeletePlayerActivityByControllerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePlayerActivityByControllerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePlayerActivityByControllerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintPlayerActivity(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlayerActivity(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePlayerActivityByControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePlayerActivityByControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePlayerActivityByControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPlayerActivity(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerActivity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlayerActivity(uint64(m.ID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovPlayerActivity(uint64(m.PlayerID))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	if m.ToNotify {
		n += 2
	}
	if m.FinishAt != nil {
		l = m.FinishAt.Size()
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	return n
}

func (m *GetPlayerActivityByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityID != 0 {
		n += 1 + sovPlayerActivity(uint64(m.ActivityID))
	}
	return n
}

func (m *GetPlayerActivityByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerActivity != nil {
		l = m.PlayerActivity.Size()
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	return n
}

func (m *GetActivePlayerActivitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerActivity(uint64(m.PlayerID))
	}
	return n
}

func (m *GetActivePlayerActivitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for _, e := range m.Activities {
			l = e.Size()
			n += 1 + l + sovPlayerActivity(uint64(l))
		}
	}
	return n
}

func (m *GetPlayerActivityToNotifyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPlayerActivityToNotifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerActivities) > 0 {
		for _, e := range m.PlayerActivities {
			l = e.Size()
			n += 1 + l + sovPlayerActivity(uint64(l))
		}
	}
	return n
}

func (m *SetPlayerActivityNotifiedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityID != 0 {
		n += 1 + sovPlayerActivity(uint64(m.ActivityID))
	}
	return n
}

func (m *SetPlayerActivityNotifiedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreatePlayerActivityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerActivity != nil {
		l = m.PlayerActivity.Size()
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	return n
}

func (m *CreatePlayerActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerActivity != nil {
		l = m.PlayerActivity.Size()
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	return n
}

func (m *UpdatePlayerActivityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerActivity != nil {
		l = m.PlayerActivity.Size()
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	return n
}

func (m *UpdatePlayerActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerActivity != nil {
		l = m.PlayerActivity.Size()
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	return n
}

func (m *DeletePlayerActivityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerActivityID != 0 {
		n += 1 + sovPlayerActivity(uint64(m.PlayerActivityID))
	}
	if m.ForceDelete {
		n += 2
	}
	return n
}

func (m *DeletePlayerActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeletePlayerActivityByControllerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerActivity(uint64(m.PlayerID))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovPlayerActivity(uint64(l))
	}
	if m.Force {
		n += 2
	}
	return n
}

func (m *DeletePlayerActivityByControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPlayerActivity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerActivity(x uint64) (n int) {
	return sovPlayerActivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToNotify = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinishAt == nil {
				m.FinishAt = &types.Timestamp{}
			}
			if err := m.FinishAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerActivityByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerActivityByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerActivityByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			m.ActivityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerActivityByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerActivityByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerActivityByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerActivity == nil {
				m.PlayerActivity = &PlayerActivity{}
			}
			if err := m.PlayerActivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActivePlayerActivitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActivePlayerActivitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActivePlayerActivitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActivePlayerActivitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActivePlayerActivitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActivePlayerActivitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activities = append(m.Activities, &PlayerActivity{})
			if err := m.Activities[len(m.Activities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerActivityToNotifyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerActivityToNotifyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerActivityToNotifyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerActivityToNotifyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerActivityToNotifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerActivityToNotifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerActivities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerActivities = append(m.PlayerActivities, &PlayerActivity{})
			if err := m.PlayerActivities[len(m.PlayerActivities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPlayerActivityNotifiedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPlayerActivityNotifiedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPlayerActivityNotifiedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			m.ActivityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPlayerActivityNotifiedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPlayerActivityNotifiedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPlayerActivityNotifiedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayerActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayerActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayerActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerActivity == nil {
				m.PlayerActivity = &PlayerActivity{}
			}
			if err := m.PlayerActivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayerActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayerActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayerActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerActivity == nil {
				m.PlayerActivity = &PlayerActivity{}
			}
			if err := m.PlayerActivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePlayerActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePlayerActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePlayerActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerActivity == nil {
				m.PlayerActivity = &PlayerActivity{}
			}
			if err := m.PlayerActivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePlayerActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePlayerActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePlayerActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerActivity == nil {
				m.PlayerActivity = &PlayerActivity{}
			}
			if err := m.PlayerActivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePlayerActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePlayerActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePlayerActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerActivityID", wireType)
			}
			m.PlayerActivityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerActivityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDelete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePlayerActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePlayerActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePlayerActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePlayerActivityByControllerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePlayerActivityByControllerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePlayerActivityByControllerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePlayerActivityByControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePlayerActivityByControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePlayerActivityByControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerActivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerActivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerActivity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerActivity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerActivity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerActivity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerActivity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerActivity = fmt.Errorf("proto: unexpected end of group")
)
