// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/mission_category.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MissionCategory struct {
	ID   uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug string `protobuf:"bytes,3,opt,name=Slug,proto3" json:"Slug,omitempty"`
}

func (m *MissionCategory) Reset()         { *m = MissionCategory{} }
func (m *MissionCategory) String() string { return proto.CompactTextString(m) }
func (*MissionCategory) ProtoMessage()    {}
func (*MissionCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae05f8237883399, []int{0}
}
func (m *MissionCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionCategory.Merge(m, src)
}
func (m *MissionCategory) XXX_Size() int {
	return m.Size()
}
func (m *MissionCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionCategory.DiscardUnknown(m)
}

var xxx_messageInfo_MissionCategory proto.InternalMessageInfo

func (m *MissionCategory) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MissionCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MissionCategory) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// Struct per la tipologia di mission
type MissionResourcesFinding struct {
	ResourceQty uint32 `protobuf:"varint,1,opt,name=ResourceQty,proto3" json:"ResourceQty,omitempty"`
	ResourceID  uint32 `protobuf:"varint,2,opt,name=ResourceID,proto3" json:"ResourceID,omitempty"`
}

func (m *MissionResourcesFinding) Reset()         { *m = MissionResourcesFinding{} }
func (m *MissionResourcesFinding) String() string { return proto.CompactTextString(m) }
func (*MissionResourcesFinding) ProtoMessage()    {}
func (*MissionResourcesFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae05f8237883399, []int{1}
}
func (m *MissionResourcesFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionResourcesFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionResourcesFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionResourcesFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionResourcesFinding.Merge(m, src)
}
func (m *MissionResourcesFinding) XXX_Size() int {
	return m.Size()
}
func (m *MissionResourcesFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionResourcesFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MissionResourcesFinding proto.InternalMessageInfo

func (m *MissionResourcesFinding) GetResourceQty() uint32 {
	if m != nil {
		return m.ResourceQty
	}
	return 0
}

func (m *MissionResourcesFinding) GetResourceID() uint32 {
	if m != nil {
		return m.ResourceID
	}
	return 0
}

type MissionKillMob struct {
	EnemyID uint32 `protobuf:"varint,1,opt,name=EnemyID,proto3" json:"EnemyID,omitempty"`
}

func (m *MissionKillMob) Reset()         { *m = MissionKillMob{} }
func (m *MissionKillMob) String() string { return proto.CompactTextString(m) }
func (*MissionKillMob) ProtoMessage()    {}
func (*MissionKillMob) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae05f8237883399, []int{2}
}
func (m *MissionKillMob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionKillMob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionKillMob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionKillMob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionKillMob.Merge(m, src)
}
func (m *MissionKillMob) XXX_Size() int {
	return m.Size()
}
func (m *MissionKillMob) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionKillMob.DiscardUnknown(m)
}

var xxx_messageInfo_MissionKillMob proto.InternalMessageInfo

func (m *MissionKillMob) GetEnemyID() uint32 {
	if m != nil {
		return m.EnemyID
	}
	return 0
}

type MissionPlanetFinding struct {
	PlanetID uint32 `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *MissionPlanetFinding) Reset()         { *m = MissionPlanetFinding{} }
func (m *MissionPlanetFinding) String() string { return proto.CompactTextString(m) }
func (*MissionPlanetFinding) ProtoMessage()    {}
func (*MissionPlanetFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae05f8237883399, []int{3}
}
func (m *MissionPlanetFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionPlanetFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionPlanetFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionPlanetFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionPlanetFinding.Merge(m, src)
}
func (m *MissionPlanetFinding) XXX_Size() int {
	return m.Size()
}
func (m *MissionPlanetFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionPlanetFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MissionPlanetFinding proto.InternalMessageInfo

func (m *MissionPlanetFinding) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

// GetAllMissionCategories
type GetAllMissionCategoriesRequest struct {
}

func (m *GetAllMissionCategoriesRequest) Reset()         { *m = GetAllMissionCategoriesRequest{} }
func (m *GetAllMissionCategoriesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllMissionCategoriesRequest) ProtoMessage()    {}
func (*GetAllMissionCategoriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae05f8237883399, []int{4}
}
func (m *GetAllMissionCategoriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllMissionCategoriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllMissionCategoriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllMissionCategoriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMissionCategoriesRequest.Merge(m, src)
}
func (m *GetAllMissionCategoriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllMissionCategoriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMissionCategoriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMissionCategoriesRequest proto.InternalMessageInfo

type GetAllMissionCategoriesResponse struct {
	MissionCategories []*MissionCategory `protobuf:"bytes,1,rep,name=MissionCategories,proto3" json:"MissionCategories,omitempty"`
}

func (m *GetAllMissionCategoriesResponse) Reset()         { *m = GetAllMissionCategoriesResponse{} }
func (m *GetAllMissionCategoriesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllMissionCategoriesResponse) ProtoMessage()    {}
func (*GetAllMissionCategoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae05f8237883399, []int{5}
}
func (m *GetAllMissionCategoriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllMissionCategoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllMissionCategoriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllMissionCategoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMissionCategoriesResponse.Merge(m, src)
}
func (m *GetAllMissionCategoriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllMissionCategoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMissionCategoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMissionCategoriesResponse proto.InternalMessageInfo

func (m *GetAllMissionCategoriesResponse) GetMissionCategories() []*MissionCategory {
	if m != nil {
		return m.MissionCategories
	}
	return nil
}

func init() {
	proto.RegisterType((*MissionCategory)(nil), "mission_category.MissionCategory")
	proto.RegisterType((*MissionResourcesFinding)(nil), "mission_category.MissionResourcesFinding")
	proto.RegisterType((*MissionKillMob)(nil), "mission_category.MissionKillMob")
	proto.RegisterType((*MissionPlanetFinding)(nil), "mission_category.MissionPlanetFinding")
	proto.RegisterType((*GetAllMissionCategoriesRequest)(nil), "mission_category.GetAllMissionCategoriesRequest")
	proto.RegisterType((*GetAllMissionCategoriesResponse)(nil), "mission_category.GetAllMissionCategoriesResponse")
}

func init() { proto.RegisterFile("proto/mission_category.proto", fileDescriptor_8ae05f8237883399) }

var fileDescriptor_8ae05f8237883399 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xcd, 0x2c, 0x2e, 0xce, 0xcc, 0xcf, 0x8b, 0x4f, 0x4e, 0x2c, 0x49, 0x4d, 0xcf,
	0x2f, 0xaa, 0xd4, 0x03, 0x0b, 0x0b, 0x09, 0xa0, 0x8b, 0x2b, 0x79, 0x72, 0xf1, 0xfb, 0x42, 0xc4,
	0x9c, 0xa1, 0x42, 0x42, 0x7c, 0x5c, 0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41,
	0x4c, 0x9e, 0x2e, 0x42, 0x42, 0x5c, 0x2c, 0x7e, 0x89, 0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x60, 0x36, 0x48, 0x2c, 0x38, 0xa7, 0x34, 0x5d, 0x82, 0x19, 0x22, 0x06, 0x62, 0x2b,
	0x45, 0x73, 0x89, 0x43, 0x8d, 0x0a, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x2d, 0x76, 0xcb,
	0xcc, 0x4b, 0xc9, 0xcc, 0x4b, 0x17, 0x52, 0xe0, 0xe2, 0x86, 0x89, 0x05, 0x96, 0x54, 0x42, 0xcd,
	0x46, 0x16, 0x12, 0x92, 0xe3, 0xe2, 0x82, 0x71, 0x3d, 0x5d, 0xc0, 0x56, 0xf1, 0x06, 0x21, 0x89,
	0x28, 0x69, 0x71, 0xf1, 0x41, 0x0d, 0xf7, 0xce, 0xcc, 0xc9, 0xf1, 0xcd, 0x4f, 0x12, 0x92, 0xe0,
	0x62, 0x77, 0xcd, 0x4b, 0xcd, 0xad, 0x84, 0xbb, 0x15, 0xc6, 0x55, 0x32, 0xe2, 0x12, 0x81, 0xaa,
	0x0d, 0xc8, 0x49, 0xcc, 0x4b, 0x2d, 0x81, 0xb9, 0x42, 0x8a, 0x8b, 0x03, 0x22, 0x00, 0xd7, 0x02,
	0xe7, 0x2b, 0x29, 0x70, 0xc9, 0xb9, 0xa7, 0x96, 0x38, 0xe6, 0xe4, 0xa0, 0x86, 0x46, 0x66, 0x6a,
	0x71, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x52, 0x11, 0x97, 0x3c, 0x4e, 0x15, 0xc5, 0x05,
	0xf9, 0x79, 0xc5, 0xa9, 0x42, 0xfe, 0x5c, 0x82, 0x18, 0x92, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc,
	0x46, 0x8a, 0x7a, 0x18, 0x51, 0x82, 0x16, 0xee, 0x41, 0x98, 0x7a, 0x9d, 0xe4, 0x4e, 0x3c, 0x92,
	0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c,
	0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x45, 0xcf, 0xba, 0x20, 0x29, 0x89, 0x0d, 0x1c,
	0xad, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x2a, 0xe0, 0xb3, 0xf6, 0x01, 0x00, 0x00,
}

func (m *MissionCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintMissionCategory(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMissionCategory(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintMissionCategory(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MissionResourcesFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionResourcesFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionResourcesFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResourceID != 0 {
		i = encodeVarintMissionCategory(dAtA, i, uint64(m.ResourceID))
		i--
		dAtA[i] = 0x10
	}
	if m.ResourceQty != 0 {
		i = encodeVarintMissionCategory(dAtA, i, uint64(m.ResourceQty))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MissionKillMob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionKillMob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionKillMob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnemyID != 0 {
		i = encodeVarintMissionCategory(dAtA, i, uint64(m.EnemyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MissionPlanetFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionPlanetFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionPlanetFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintMissionCategory(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllMissionCategoriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMissionCategoriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllMissionCategoriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllMissionCategoriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMissionCategoriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllMissionCategoriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissionCategories) > 0 {
		for iNdEx := len(m.MissionCategories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MissionCategories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMissionCategory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMissionCategory(dAtA []byte, offset int, v uint64) int {
	offset -= sovMissionCategory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MissionCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMissionCategory(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMissionCategory(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovMissionCategory(uint64(l))
	}
	return n
}

func (m *MissionResourcesFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceQty != 0 {
		n += 1 + sovMissionCategory(uint64(m.ResourceQty))
	}
	if m.ResourceID != 0 {
		n += 1 + sovMissionCategory(uint64(m.ResourceID))
	}
	return n
}

func (m *MissionKillMob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnemyID != 0 {
		n += 1 + sovMissionCategory(uint64(m.EnemyID))
	}
	return n
}

func (m *MissionPlanetFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovMissionCategory(uint64(m.PlanetID))
	}
	return n
}

func (m *GetAllMissionCategoriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllMissionCategoriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MissionCategories) > 0 {
		for _, e := range m.MissionCategories {
			l = e.Size()
			n += 1 + l + sovMissionCategory(uint64(l))
		}
	}
	return n
}

func sovMissionCategory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMissionCategory(x uint64) (n int) {
	return sovMissionCategory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MissionCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissionCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMissionCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMissionCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMissionCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionResourcesFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissionCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionResourcesFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionResourcesFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceQty", wireType)
			}
			m.ResourceQty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceQty |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			m.ResourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMissionCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionKillMob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissionCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionKillMob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionKillMob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyID", wireType)
			}
			m.EnemyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnemyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMissionCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionPlanetFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissionCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionPlanetFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionPlanetFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMissionCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMissionCategoriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissionCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllMissionCategoriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllMissionCategoriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMissionCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMissionCategoriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissionCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllMissionCategoriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllMissionCategoriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionCategories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMissionCategory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionCategories = append(m.MissionCategories, &MissionCategory{})
			if err := m.MissionCategories[len(m.MissionCategories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMissionCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMissionCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMissionCategory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMissionCategory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMissionCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMissionCategory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMissionCategory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMissionCategory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMissionCategory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMissionCategory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMissionCategory = fmt.Errorf("proto: unexpected end of group")
)
