// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/trap.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Trap struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Damage               int32    `protobuf:"varint,2,opt,name=Damage,proto3" json:"Damage,omitempty"`
	PlayerDie            bool     `protobuf:"varint,3,opt,name=PlayerDie,proto3" json:"PlayerDie,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trap) Reset()         { *m = Trap{} }
func (m *Trap) String() string { return proto.CompactTextString(m) }
func (*Trap) ProtoMessage()    {}
func (*Trap) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab32902182431596, []int{0}
}
func (m *Trap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trap.Merge(m, src)
}
func (m *Trap) XXX_Size() int {
	return m.Size()
}
func (m *Trap) XXX_DiscardUnknown() {
	xxx_messageInfo_Trap.DiscardUnknown(m)
}

var xxx_messageInfo_Trap proto.InternalMessageInfo

func (m *Trap) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Trap) GetDamage() int32 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *Trap) GetPlayerDie() bool {
	if m != nil {
		return m.PlayerDie
	}
	return false
}

func init() {
	proto.RegisterType((*Trap)(nil), "trap.Trap")
}

func init() { proto.RegisterFile("proto/trap.proto", fileDescriptor_ab32902182431596) }

var fileDescriptor_ab32902182431596 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x29, 0x4a, 0x2c, 0xd0, 0x03, 0x33, 0x85, 0x58, 0x40, 0x6c, 0x25, 0x1f, 0x2e,
	0x96, 0x90, 0xa2, 0xc4, 0x02, 0x21, 0x3e, 0x2e, 0x26, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xde, 0x20, 0x26, 0x4f, 0x17, 0x21, 0x31, 0x2e, 0x36, 0x97, 0xc4, 0xdc, 0xc4, 0xf4, 0x54, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x28, 0x4f, 0x48, 0x86, 0x8b, 0x33, 0x20, 0x27, 0xb1, 0x32,
	0xb5, 0xc8, 0x25, 0x33, 0x55, 0x82, 0x59, 0x81, 0x51, 0x83, 0x23, 0x08, 0x21, 0xe0, 0x24, 0x74,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x46, 0xb1, 0xe8, 0x59,
	0x17, 0x24, 0x25, 0xb1, 0x81, 0xad, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x2a, 0x3b,
	0x0f, 0x82, 0x00, 0x00, 0x00,
}

func (m *Trap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerDie {
		i--
		if m.PlayerDie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Damage != 0 {
		i = encodeVarintTrap(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintTrap(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrap(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Trap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTrap(uint64(m.ID))
	}
	if m.Damage != 0 {
		n += 1 + sovTrap(uint64(m.Damage))
	}
	if m.PlayerDie {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTrap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrap(x uint64) (n int) {
	return sovTrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Trap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDie = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrap = fmt.Errorf("proto: unexpected end of group")
)
