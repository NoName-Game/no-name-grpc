// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	_ "."
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoNameClient is the client API for NoName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoNameClient interface {
	// Armor
	GetArmorByID(ctx context.Context, in *_.GetArmorByIDRequest, opts ...grpc.CallOption) (*_.GetArmorByIDResponse, error)
	FindArmorByName(ctx context.Context, in *_.FindArmorByNameRequest, opts ...grpc.CallOption) (*_.FindArmorByNameResponse, error)
	UpdateArmor(ctx context.Context, in *_.UpdateArmorRequest, opts ...grpc.CallOption) (*_.UpdateArmorResponse, error)
	GetPlayerArmors(ctx context.Context, in *_.GetPlayerArmorsRequest, opts ...grpc.CallOption) (*_.GetPlayerArmorsResponse, error)
	GetPlayerArmorsEquipped(ctx context.Context, in *_.GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*_.GetPlayerArmorsEquippedResponse, error)
	// ArmorCategory
	GetAllArmorCategory(ctx context.Context, in *_.GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*_.GetAllArmorCategoryResponse, error)
	// Weapon
	GetWeaponByID(ctx context.Context, in *_.GetWeaponByIDRequest, opts ...grpc.CallOption) (*_.GetWeaponByIDResponse, error)
	FindWeaponByName(ctx context.Context, in *_.FindWeaponByNameRequest, opts ...grpc.CallOption) (*_.FindWeaponByNameResponse, error)
	UpdateWeapon(ctx context.Context, in *_.UpdateWeaponRequest, opts ...grpc.CallOption) (*_.UpdateWeaponResponse, error)
	GetPlayerWeapons(ctx context.Context, in *_.GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*_.GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(ctx context.Context, in *_.GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*_.GetPlayerWeaponEquippedResponse, error)
	// WeaponCategory
	GetAllWeaponCategory(ctx context.Context, in *_.GetAllWeaponCategoryRequest, opts ...grpc.CallOption) (*_.GetAllWeaponCategoryResponse, error)
	// Player
	GetPlayerByID(ctx context.Context, in *_.GetPlayerByIDRequest, opts ...grpc.CallOption) (*_.GetPlayerByIDResponse, error)
	GetPlayerByUsername(ctx context.Context, in *_.GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*_.GetPlayerByUsernameResponse, error)
	GetPlayerStats(ctx context.Context, in *_.GetPlayerStatsRequest, opts ...grpc.CallOption) (*_.GetPlayerStatsResponse, error)
	GetPlayerResources(ctx context.Context, in *_.GetPlayerResourcesRequest, opts ...grpc.CallOption) (*_.GetPlayerResourcesResponse, error)
	GetPlayerItems(ctx context.Context, in *_.GetPlayerItemsRequest, opts ...grpc.CallOption) (*_.GetPlayerItemsResponse, error)
	GetPlayerEconomy(ctx context.Context, in *_.GetPlayerEconomyRequest, opts ...grpc.CallOption) (*_.GetPlayerEconomyResponse, error)
	ManagePlayerInventory(ctx context.Context, in *_.ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*_.ManagePlayerInventoryResponse, error)
	// PlayerPosition
	CreatePlayerPosition(ctx context.Context, in *_.CreatePlayerPositionRequest, opts ...grpc.CallOption) (*_.CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(ctx context.Context, in *_.GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*_.GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(ctx context.Context, in *_.CountPlanetVisitedRequest, opts ...grpc.CallOption) (*_.CountPlanetVisitedResponse, error)
	CountSystemVisited(ctx context.Context, in *_.CountSystemVisitedRequest, opts ...grpc.CallOption) (*_.CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(ctx context.Context, in *_.CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*_.CountPlayerVisitedCurrentPlanetResponse, error)
	// Rests
	GetRestsInfo(ctx context.Context, in *_.GetRestsInfoRequest, opts ...grpc.CallOption) (*_.GetRestsInfoResponse, error)
	EndPlayerRest(ctx context.Context, in *_.EndPlayerRestRequest, opts ...grpc.CallOption) (*_.EndPlayerRestResponse, error)
	// SignIn
	SignIn(ctx context.Context, in *_.SignInRequest, opts ...grpc.CallOption) (*_.SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(ctx context.Context, in *_.GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*_.GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(ctx context.Context, in *_.GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*_.GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(ctx context.Context, in *_.GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*_.GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(ctx context.Context, in *_.CreatePlayerStateRequest, opts ...grpc.CallOption) (*_.CreatePlayerStateResponse, error)
	UpdatePlayerState(ctx context.Context, in *_.UpdatePlayerStateRequest, opts ...grpc.CallOption) (*_.UpdatePlayerStateResponse, error)
	DeletePlayerState(ctx context.Context, in *_.DeletePlayerStateRequest, opts ...grpc.CallOption) (*_.DeletePlayerStateResponse, error)
	// Enemy
	GetEnemyByID(ctx context.Context, in *_.GetEnemyByIDRequest, opts ...grpc.CallOption) (*_.GetEnemyByIDResponse, error)
	HitEnemy(ctx context.Context, in *_.HitEnemyRequest, opts ...grpc.CallOption) (*_.HitEnemyResponse, error)
	// Titan
	GetTitanByID(ctx context.Context, in *_.GetTitanByIDRequest, opts ...grpc.CallOption) (*_.GetTitanByIDResponse, error)
	GetTitanByName(ctx context.Context, in *_.GetTitanByNameRequest, opts ...grpc.CallOption) (*_.GetTitanByNameResponse, error)
	GetTitanByPlanetID(ctx context.Context, in *_.GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*_.GetTitanByPlanetIDResponse, error)
	HitTitan(ctx context.Context, in *_.HitTitanRequest, opts ...grpc.CallOption) (*_.HitTitanResponse, error)
	TitanDiscovered(ctx context.Context, in *_.TitanDiscoveredRequest, opts ...grpc.CallOption) (*_.TitanDiscoveredResponse, error)
	// Language
	FindLanguageBySlug(ctx context.Context, in *_.FindLanguageBySlugRequest, opts ...grpc.CallOption) (*_.FindLanguageBySlugResponse, error)
	FindLanguageByName(ctx context.Context, in *_.FindLanguageByNameRequest, opts ...grpc.CallOption) (*_.FindLanguageByNameResponse, error)
	GetAllLanguages(ctx context.Context, in *_.GetAllLanguagesRequest, opts ...grpc.CallOption) (*_.GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(ctx context.Context, in *_.GetAllNPCRequest, opts ...grpc.CallOption) (*_.GetAllNPCResponse, error)
	// NPC - Crafter
	CraftArmor(ctx context.Context, in *_.CraftArmorRequest, opts ...grpc.CallOption) (*_.CraftArmorResponse, error)
	CraftWeapon(ctx context.Context, in *_.CraftWeaponRequest, opts ...grpc.CallOption) (*_.CraftWeaponResponse, error)
	// NPC - Banck
	BankDeposit(ctx context.Context, in *_.BankDepositRequest, opts ...grpc.CallOption) (*_.BankDepositResponse, error)
	BankWithdraw(ctx context.Context, in *_.BankWithdrawRequest, opts ...grpc.CallOption) (*_.BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(ctx context.Context, in *_.GetPlanetByIDRequest, opts ...grpc.CallOption) (*_.GetPlanetByIDResponse, error)
	GetPlanetByCoordinate(ctx context.Context, in *_.GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*_.GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(ctx context.Context, in *_.GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*_.GetPlanetByMapIDResponse, error)
	// Map
	GetMapByID(ctx context.Context, in *_.GetMapByIDRequest, opts ...grpc.CallOption) (*_.GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(ctx context.Context, in *_.GetResourceByIDRequest, opts ...grpc.CallOption) (*_.GetResourceByIDResponse, error)
	GetResourceByName(ctx context.Context, in *_.GetResourceByNameRequest, opts ...grpc.CallOption) (*_.GetResourceByNameResponse, error)
	DropResource(ctx context.Context, in *_.DropResourceRequest, opts ...grpc.CallOption) (*_.DropResourceResponse, error)
	// Item
	GetAllItems(ctx context.Context, in *_.GetAllItemsRequest, opts ...grpc.CallOption) (*_.GetAllItemsResponse, error)
	GetItemsByCategoryID(ctx context.Context, in *_.GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*_.GetItemsByCategoryIDResponse, error)
	UseItem(ctx context.Context, in *_.UseItemRequest, opts ...grpc.CallOption) (*_.UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(ctx context.Context, in *_.GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*_.GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(ctx context.Context, in *_.GetShipRepairInfoRequest, opts ...grpc.CallOption) (*_.GetShipRepairInfoResponse, error)
	StartShipRepair(ctx context.Context, in *_.StartShipRepairRequest, opts ...grpc.CallOption) (*_.StartShipRepairResponse, error)
	EndShipRepair(ctx context.Context, in *_.EndShipRepairRequest, opts ...grpc.CallOption) (*_.EndShipRepairResponse, error)
	GetShipTravelInfo(ctx context.Context, in *_.GetShipTravelInfoRequest, opts ...grpc.CallOption) (*_.GetShipTravelInfoResponse, error)
	EndShipTravel(ctx context.Context, in *_.EndShipTravelRequest, opts ...grpc.CallOption) (*_.EndShipTravelResponse, error)
	GetPlayerShips(ctx context.Context, in *_.GetPlayerShipsRequest, opts ...grpc.CallOption) (*_.GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(ctx context.Context, in *_.GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*_.GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(ctx context.Context, in *_.CreateTransactionRequest, opts ...grpc.CallOption) (*_.CreateTransactionResponse, error)
	// Tresure
	DropTresure(ctx context.Context, in *_.DropTresureRequest, opts ...grpc.CallOption) (*_.DropTresureResponse, error)
	// Mission
	GetMission(ctx context.Context, in *_.GetMissionRequest, opts ...grpc.CallOption) (*_.GetMissionResponse, error)
	CheckMission(ctx context.Context, in *_.CheckMissionRequest, opts ...grpc.CallOption) (*_.CheckMissionResponse, error)
	GetMissionReward(ctx context.Context, in *_.GetMissionRewardRequest, opts ...grpc.CallOption) (*_.GetMissionRewardResponse, error)
}

type noNameClient struct {
	cc grpc.ClientConnInterface
}

func NewNoNameClient(cc grpc.ClientConnInterface) NoNameClient {
	return &noNameClient{cc}
}

func (c *noNameClient) GetArmorByID(ctx context.Context, in *_.GetArmorByIDRequest, opts ...grpc.CallOption) (*_.GetArmorByIDResponse, error) {
	out := new(_.GetArmorByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindArmorByName(ctx context.Context, in *_.FindArmorByNameRequest, opts ...grpc.CallOption) (*_.FindArmorByNameResponse, error) {
	out := new(_.FindArmorByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindArmorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateArmor(ctx context.Context, in *_.UpdateArmorRequest, opts ...grpc.CallOption) (*_.UpdateArmorResponse, error) {
	out := new(_.UpdateArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmors(ctx context.Context, in *_.GetPlayerArmorsRequest, opts ...grpc.CallOption) (*_.GetPlayerArmorsResponse, error) {
	out := new(_.GetPlayerArmorsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorsEquipped(ctx context.Context, in *_.GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*_.GetPlayerArmorsEquippedResponse, error) {
	out := new(_.GetPlayerArmorsEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorsEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllArmorCategory(ctx context.Context, in *_.GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*_.GetAllArmorCategoryResponse, error) {
	out := new(_.GetAllArmorCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllArmorCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetWeaponByID(ctx context.Context, in *_.GetWeaponByIDRequest, opts ...grpc.CallOption) (*_.GetWeaponByIDResponse, error) {
	out := new(_.GetWeaponByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetWeaponByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindWeaponByName(ctx context.Context, in *_.FindWeaponByNameRequest, opts ...grpc.CallOption) (*_.FindWeaponByNameResponse, error) {
	out := new(_.FindWeaponByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindWeaponByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateWeapon(ctx context.Context, in *_.UpdateWeaponRequest, opts ...grpc.CallOption) (*_.UpdateWeaponResponse, error) {
	out := new(_.UpdateWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeapons(ctx context.Context, in *_.GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*_.GetPlayerWeaponsResponse, error) {
	out := new(_.GetPlayerWeaponsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeapons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeaponEquipped(ctx context.Context, in *_.GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*_.GetPlayerWeaponEquippedResponse, error) {
	out := new(_.GetPlayerWeaponEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeaponEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllWeaponCategory(ctx context.Context, in *_.GetAllWeaponCategoryRequest, opts ...grpc.CallOption) (*_.GetAllWeaponCategoryResponse, error) {
	out := new(_.GetAllWeaponCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllWeaponCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByID(ctx context.Context, in *_.GetPlayerByIDRequest, opts ...grpc.CallOption) (*_.GetPlayerByIDResponse, error) {
	out := new(_.GetPlayerByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByUsername(ctx context.Context, in *_.GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*_.GetPlayerByUsernameResponse, error) {
	out := new(_.GetPlayerByUsernameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStats(ctx context.Context, in *_.GetPlayerStatsRequest, opts ...grpc.CallOption) (*_.GetPlayerStatsResponse, error) {
	out := new(_.GetPlayerStatsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerResources(ctx context.Context, in *_.GetPlayerResourcesRequest, opts ...grpc.CallOption) (*_.GetPlayerResourcesResponse, error) {
	out := new(_.GetPlayerResourcesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerItems(ctx context.Context, in *_.GetPlayerItemsRequest, opts ...grpc.CallOption) (*_.GetPlayerItemsResponse, error) {
	out := new(_.GetPlayerItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerEconomy(ctx context.Context, in *_.GetPlayerEconomyRequest, opts ...grpc.CallOption) (*_.GetPlayerEconomyResponse, error) {
	out := new(_.GetPlayerEconomyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerEconomy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ManagePlayerInventory(ctx context.Context, in *_.ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*_.ManagePlayerInventoryResponse, error) {
	out := new(_.ManagePlayerInventoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/ManagePlayerInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerPosition(ctx context.Context, in *_.CreatePlayerPositionRequest, opts ...grpc.CallOption) (*_.CreatePlayerPositionResponse, error) {
	out := new(_.CreatePlayerPositionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerCurrentPlanet(ctx context.Context, in *_.GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*_.GetPlayerCurrentPlanetResponse, error) {
	out := new(_.GetPlayerCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlanetVisited(ctx context.Context, in *_.CountPlanetVisitedRequest, opts ...grpc.CallOption) (*_.CountPlanetVisitedResponse, error) {
	out := new(_.CountPlanetVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlanetVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountSystemVisited(ctx context.Context, in *_.CountSystemVisitedRequest, opts ...grpc.CallOption) (*_.CountSystemVisitedResponse, error) {
	out := new(_.CountSystemVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountSystemVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlayerVisitedCurrentPlanet(ctx context.Context, in *_.CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*_.CountPlayerVisitedCurrentPlanetResponse, error) {
	out := new(_.CountPlayerVisitedCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlayerVisitedCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRestsInfo(ctx context.Context, in *_.GetRestsInfoRequest, opts ...grpc.CallOption) (*_.GetRestsInfoResponse, error) {
	out := new(_.GetRestsInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRestsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndPlayerRest(ctx context.Context, in *_.EndPlayerRestRequest, opts ...grpc.CallOption) (*_.EndPlayerRestResponse, error) {
	out := new(_.EndPlayerRestResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndPlayerRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SignIn(ctx context.Context, in *_.SignInRequest, opts ...grpc.CallOption) (*_.SignInResponse, error) {
	out := new(_.SignInResponse)
	err := c.cc.Invoke(ctx, "/NoName/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateByID(ctx context.Context, in *_.GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*_.GetPlayerStateByIDResponse, error) {
	out := new(_.GetPlayerStateByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetActivePlayerStates(ctx context.Context, in *_.GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*_.GetActivePlayerStatesResponse, error) {
	out := new(_.GetActivePlayerStatesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetActivePlayerStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateToNotify(ctx context.Context, in *_.GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*_.GetPlayerStateToNotifyResponse, error) {
	out := new(_.GetPlayerStateToNotifyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerState(ctx context.Context, in *_.CreatePlayerStateRequest, opts ...grpc.CallOption) (*_.CreatePlayerStateResponse, error) {
	out := new(_.CreatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdatePlayerState(ctx context.Context, in *_.UpdatePlayerStateRequest, opts ...grpc.CallOption) (*_.UpdatePlayerStateResponse, error) {
	out := new(_.UpdatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeletePlayerState(ctx context.Context, in *_.DeletePlayerStateRequest, opts ...grpc.CallOption) (*_.DeletePlayerStateResponse, error) {
	out := new(_.DeletePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeletePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetEnemyByID(ctx context.Context, in *_.GetEnemyByIDRequest, opts ...grpc.CallOption) (*_.GetEnemyByIDResponse, error) {
	out := new(_.GetEnemyByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetEnemyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitEnemy(ctx context.Context, in *_.HitEnemyRequest, opts ...grpc.CallOption) (*_.HitEnemyResponse, error) {
	out := new(_.HitEnemyResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByID(ctx context.Context, in *_.GetTitanByIDRequest, opts ...grpc.CallOption) (*_.GetTitanByIDResponse, error) {
	out := new(_.GetTitanByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByName(ctx context.Context, in *_.GetTitanByNameRequest, opts ...grpc.CallOption) (*_.GetTitanByNameResponse, error) {
	out := new(_.GetTitanByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByPlanetID(ctx context.Context, in *_.GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*_.GetTitanByPlanetIDResponse, error) {
	out := new(_.GetTitanByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitTitan(ctx context.Context, in *_.HitTitanRequest, opts ...grpc.CallOption) (*_.HitTitanResponse, error) {
	out := new(_.HitTitanResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitTitan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) TitanDiscovered(ctx context.Context, in *_.TitanDiscoveredRequest, opts ...grpc.CallOption) (*_.TitanDiscoveredResponse, error) {
	out := new(_.TitanDiscoveredResponse)
	err := c.cc.Invoke(ctx, "/NoName/TitanDiscovered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindLanguageBySlug(ctx context.Context, in *_.FindLanguageBySlugRequest, opts ...grpc.CallOption) (*_.FindLanguageBySlugResponse, error) {
	out := new(_.FindLanguageBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindLanguageBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) FindLanguageByName(ctx context.Context, in *_.FindLanguageByNameRequest, opts ...grpc.CallOption) (*_.FindLanguageByNameResponse, error) {
	out := new(_.FindLanguageByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/FindLanguageByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllLanguages(ctx context.Context, in *_.GetAllLanguagesRequest, opts ...grpc.CallOption) (*_.GetAllLanguagesResponse, error) {
	out := new(_.GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllNPC(ctx context.Context, in *_.GetAllNPCRequest, opts ...grpc.CallOption) (*_.GetAllNPCResponse, error) {
	out := new(_.GetAllNPCResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllNPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CraftArmor(ctx context.Context, in *_.CraftArmorRequest, opts ...grpc.CallOption) (*_.CraftArmorResponse, error) {
	out := new(_.CraftArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/CraftArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CraftWeapon(ctx context.Context, in *_.CraftWeaponRequest, opts ...grpc.CallOption) (*_.CraftWeaponResponse, error) {
	out := new(_.CraftWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/CraftWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankDeposit(ctx context.Context, in *_.BankDepositRequest, opts ...grpc.CallOption) (*_.BankDepositResponse, error) {
	out := new(_.BankDepositResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankWithdraw(ctx context.Context, in *_.BankWithdrawRequest, opts ...grpc.CallOption) (*_.BankWithdrawResponse, error) {
	out := new(_.BankWithdrawResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByID(ctx context.Context, in *_.GetPlanetByIDRequest, opts ...grpc.CallOption) (*_.GetPlanetByIDResponse, error) {
	out := new(_.GetPlanetByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByCoordinate(ctx context.Context, in *_.GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*_.GetPlanetByCoordinateResponse, error) {
	out := new(_.GetPlanetByCoordinateResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByMapID(ctx context.Context, in *_.GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*_.GetPlanetByMapIDResponse, error) {
	out := new(_.GetPlanetByMapIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByMapID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMapByID(ctx context.Context, in *_.GetMapByIDRequest, opts ...grpc.CallOption) (*_.GetMapByIDResponse, error) {
	out := new(_.GetMapByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByID(ctx context.Context, in *_.GetResourceByIDRequest, opts ...grpc.CallOption) (*_.GetResourceByIDResponse, error) {
	out := new(_.GetResourceByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByName(ctx context.Context, in *_.GetResourceByNameRequest, opts ...grpc.CallOption) (*_.GetResourceByNameResponse, error) {
	out := new(_.GetResourceByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropResource(ctx context.Context, in *_.DropResourceRequest, opts ...grpc.CallOption) (*_.DropResourceResponse, error) {
	out := new(_.DropResourceResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItems(ctx context.Context, in *_.GetAllItemsRequest, opts ...grpc.CallOption) (*_.GetAllItemsResponse, error) {
	out := new(_.GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetItemsByCategoryID(ctx context.Context, in *_.GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*_.GetItemsByCategoryIDResponse, error) {
	out := new(_.GetItemsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetItemsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UseItem(ctx context.Context, in *_.UseItemRequest, opts ...grpc.CallOption) (*_.UseItemResponse, error) {
	out := new(_.UseItemResponse)
	err := c.cc.Invoke(ctx, "/NoName/UseItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItemCategories(ctx context.Context, in *_.GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*_.GetAllItemCategoriesResponse, error) {
	out := new(_.GetAllItemCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItemCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipRepairInfo(ctx context.Context, in *_.GetShipRepairInfoRequest, opts ...grpc.CallOption) (*_.GetShipRepairInfoResponse, error) {
	out := new(_.GetShipRepairInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipRepairInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartShipRepair(ctx context.Context, in *_.StartShipRepairRequest, opts ...grpc.CallOption) (*_.StartShipRepairResponse, error) {
	out := new(_.StartShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipRepair(ctx context.Context, in *_.EndShipRepairRequest, opts ...grpc.CallOption) (*_.EndShipRepairResponse, error) {
	out := new(_.EndShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipTravelInfo(ctx context.Context, in *_.GetShipTravelInfoRequest, opts ...grpc.CallOption) (*_.GetShipTravelInfoResponse, error) {
	out := new(_.GetShipTravelInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipTravelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipTravel(ctx context.Context, in *_.EndShipTravelRequest, opts ...grpc.CallOption) (*_.EndShipTravelResponse, error) {
	out := new(_.EndShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShips(ctx context.Context, in *_.GetPlayerShipsRequest, opts ...grpc.CallOption) (*_.GetPlayerShipsResponse, error) {
	out := new(_.GetPlayerShipsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShipEquipped(ctx context.Context, in *_.GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*_.GetPlayerShipEquippedResponse, error) {
	out := new(_.GetPlayerShipEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShipEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreateTransaction(ctx context.Context, in *_.CreateTransactionRequest, opts ...grpc.CallOption) (*_.CreateTransactionResponse, error) {
	out := new(_.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropTresure(ctx context.Context, in *_.DropTresureRequest, opts ...grpc.CallOption) (*_.DropTresureResponse, error) {
	out := new(_.DropTresureResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropTresure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMission(ctx context.Context, in *_.GetMissionRequest, opts ...grpc.CallOption) (*_.GetMissionResponse, error) {
	out := new(_.GetMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckMission(ctx context.Context, in *_.CheckMissionRequest, opts ...grpc.CallOption) (*_.CheckMissionResponse, error) {
	out := new(_.CheckMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMissionReward(ctx context.Context, in *_.GetMissionRewardRequest, opts ...grpc.CallOption) (*_.GetMissionRewardResponse, error) {
	out := new(_.GetMissionRewardResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMissionReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoNameServer is the server API for NoName service.
// All implementations must embed UnimplementedNoNameServer
// for forward compatibility
type NoNameServer interface {
	// Armor
	GetArmorByID(context.Context, *_.GetArmorByIDRequest) (*_.GetArmorByIDResponse, error)
	FindArmorByName(context.Context, *_.FindArmorByNameRequest) (*_.FindArmorByNameResponse, error)
	UpdateArmor(context.Context, *_.UpdateArmorRequest) (*_.UpdateArmorResponse, error)
	GetPlayerArmors(context.Context, *_.GetPlayerArmorsRequest) (*_.GetPlayerArmorsResponse, error)
	GetPlayerArmorsEquipped(context.Context, *_.GetPlayerArmorsEquippedRequest) (*_.GetPlayerArmorsEquippedResponse, error)
	// ArmorCategory
	GetAllArmorCategory(context.Context, *_.GetAllArmorCategoryRequest) (*_.GetAllArmorCategoryResponse, error)
	// Weapon
	GetWeaponByID(context.Context, *_.GetWeaponByIDRequest) (*_.GetWeaponByIDResponse, error)
	FindWeaponByName(context.Context, *_.FindWeaponByNameRequest) (*_.FindWeaponByNameResponse, error)
	UpdateWeapon(context.Context, *_.UpdateWeaponRequest) (*_.UpdateWeaponResponse, error)
	GetPlayerWeapons(context.Context, *_.GetPlayerWeaponsRequest) (*_.GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(context.Context, *_.GetPlayerWeaponEquippedRequest) (*_.GetPlayerWeaponEquippedResponse, error)
	// WeaponCategory
	GetAllWeaponCategory(context.Context, *_.GetAllWeaponCategoryRequest) (*_.GetAllWeaponCategoryResponse, error)
	// Player
	GetPlayerByID(context.Context, *_.GetPlayerByIDRequest) (*_.GetPlayerByIDResponse, error)
	GetPlayerByUsername(context.Context, *_.GetPlayerByUsernameRequest) (*_.GetPlayerByUsernameResponse, error)
	GetPlayerStats(context.Context, *_.GetPlayerStatsRequest) (*_.GetPlayerStatsResponse, error)
	GetPlayerResources(context.Context, *_.GetPlayerResourcesRequest) (*_.GetPlayerResourcesResponse, error)
	GetPlayerItems(context.Context, *_.GetPlayerItemsRequest) (*_.GetPlayerItemsResponse, error)
	GetPlayerEconomy(context.Context, *_.GetPlayerEconomyRequest) (*_.GetPlayerEconomyResponse, error)
	ManagePlayerInventory(context.Context, *_.ManagePlayerInventoryRequest) (*_.ManagePlayerInventoryResponse, error)
	// PlayerPosition
	CreatePlayerPosition(context.Context, *_.CreatePlayerPositionRequest) (*_.CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(context.Context, *_.GetPlayerCurrentPlanetRequest) (*_.GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(context.Context, *_.CountPlanetVisitedRequest) (*_.CountPlanetVisitedResponse, error)
	CountSystemVisited(context.Context, *_.CountSystemVisitedRequest) (*_.CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(context.Context, *_.CountPlayerVisitedCurrentPlanetRequest) (*_.CountPlayerVisitedCurrentPlanetResponse, error)
	// Rests
	GetRestsInfo(context.Context, *_.GetRestsInfoRequest) (*_.GetRestsInfoResponse, error)
	EndPlayerRest(context.Context, *_.EndPlayerRestRequest) (*_.EndPlayerRestResponse, error)
	// SignIn
	SignIn(context.Context, *_.SignInRequest) (*_.SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(context.Context, *_.GetPlayerStateByIDRequest) (*_.GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(context.Context, *_.GetActivePlayerStatesRequest) (*_.GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(context.Context, *_.GetPlayerStateToNotifyRequest) (*_.GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(context.Context, *_.CreatePlayerStateRequest) (*_.CreatePlayerStateResponse, error)
	UpdatePlayerState(context.Context, *_.UpdatePlayerStateRequest) (*_.UpdatePlayerStateResponse, error)
	DeletePlayerState(context.Context, *_.DeletePlayerStateRequest) (*_.DeletePlayerStateResponse, error)
	// Enemy
	GetEnemyByID(context.Context, *_.GetEnemyByIDRequest) (*_.GetEnemyByIDResponse, error)
	HitEnemy(context.Context, *_.HitEnemyRequest) (*_.HitEnemyResponse, error)
	// Titan
	GetTitanByID(context.Context, *_.GetTitanByIDRequest) (*_.GetTitanByIDResponse, error)
	GetTitanByName(context.Context, *_.GetTitanByNameRequest) (*_.GetTitanByNameResponse, error)
	GetTitanByPlanetID(context.Context, *_.GetTitanByPlanetIDRequest) (*_.GetTitanByPlanetIDResponse, error)
	HitTitan(context.Context, *_.HitTitanRequest) (*_.HitTitanResponse, error)
	TitanDiscovered(context.Context, *_.TitanDiscoveredRequest) (*_.TitanDiscoveredResponse, error)
	// Language
	FindLanguageBySlug(context.Context, *_.FindLanguageBySlugRequest) (*_.FindLanguageBySlugResponse, error)
	FindLanguageByName(context.Context, *_.FindLanguageByNameRequest) (*_.FindLanguageByNameResponse, error)
	GetAllLanguages(context.Context, *_.GetAllLanguagesRequest) (*_.GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(context.Context, *_.GetAllNPCRequest) (*_.GetAllNPCResponse, error)
	// NPC - Crafter
	CraftArmor(context.Context, *_.CraftArmorRequest) (*_.CraftArmorResponse, error)
	CraftWeapon(context.Context, *_.CraftWeaponRequest) (*_.CraftWeaponResponse, error)
	// NPC - Banck
	BankDeposit(context.Context, *_.BankDepositRequest) (*_.BankDepositResponse, error)
	BankWithdraw(context.Context, *_.BankWithdrawRequest) (*_.BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(context.Context, *_.GetPlanetByIDRequest) (*_.GetPlanetByIDResponse, error)
	GetPlanetByCoordinate(context.Context, *_.GetPlanetByCoordinateRequest) (*_.GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(context.Context, *_.GetPlanetByMapIDRequest) (*_.GetPlanetByMapIDResponse, error)
	// Map
	GetMapByID(context.Context, *_.GetMapByIDRequest) (*_.GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(context.Context, *_.GetResourceByIDRequest) (*_.GetResourceByIDResponse, error)
	GetResourceByName(context.Context, *_.GetResourceByNameRequest) (*_.GetResourceByNameResponse, error)
	DropResource(context.Context, *_.DropResourceRequest) (*_.DropResourceResponse, error)
	// Item
	GetAllItems(context.Context, *_.GetAllItemsRequest) (*_.GetAllItemsResponse, error)
	GetItemsByCategoryID(context.Context, *_.GetItemsByCategoryIDRequest) (*_.GetItemsByCategoryIDResponse, error)
	UseItem(context.Context, *_.UseItemRequest) (*_.UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(context.Context, *_.GetAllItemCategoriesRequest) (*_.GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(context.Context, *_.GetShipRepairInfoRequest) (*_.GetShipRepairInfoResponse, error)
	StartShipRepair(context.Context, *_.StartShipRepairRequest) (*_.StartShipRepairResponse, error)
	EndShipRepair(context.Context, *_.EndShipRepairRequest) (*_.EndShipRepairResponse, error)
	GetShipTravelInfo(context.Context, *_.GetShipTravelInfoRequest) (*_.GetShipTravelInfoResponse, error)
	EndShipTravel(context.Context, *_.EndShipTravelRequest) (*_.EndShipTravelResponse, error)
	GetPlayerShips(context.Context, *_.GetPlayerShipsRequest) (*_.GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(context.Context, *_.GetPlayerShipEquippedRequest) (*_.GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(context.Context, *_.CreateTransactionRequest) (*_.CreateTransactionResponse, error)
	// Tresure
	DropTresure(context.Context, *_.DropTresureRequest) (*_.DropTresureResponse, error)
	// Mission
	GetMission(context.Context, *_.GetMissionRequest) (*_.GetMissionResponse, error)
	CheckMission(context.Context, *_.CheckMissionRequest) (*_.CheckMissionResponse, error)
	GetMissionReward(context.Context, *_.GetMissionRewardRequest) (*_.GetMissionRewardResponse, error)
	mustEmbedUnimplementedNoNameServer()
}

// UnimplementedNoNameServer must be embedded to have forward compatible implementations.
type UnimplementedNoNameServer struct {
}

func (*UnimplementedNoNameServer) GetArmorByID(context.Context, *_.GetArmorByIDRequest) (*_.GetArmorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByID not implemented")
}
func (*UnimplementedNoNameServer) FindArmorByName(context.Context, *_.FindArmorByNameRequest) (*_.FindArmorByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArmorByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateArmor(context.Context, *_.UpdateArmorRequest) (*_.UpdateArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArmor not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmors(context.Context, *_.GetPlayerArmorsRequest) (*_.GetPlayerArmorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmors not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorsEquipped(context.Context, *_.GetPlayerArmorsEquippedRequest) (*_.GetPlayerArmorsEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorsEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetAllArmorCategory(context.Context, *_.GetAllArmorCategoryRequest) (*_.GetAllArmorCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArmorCategory not implemented")
}
func (*UnimplementedNoNameServer) GetWeaponByID(context.Context, *_.GetWeaponByIDRequest) (*_.GetWeaponByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByID not implemented")
}
func (*UnimplementedNoNameServer) FindWeaponByName(context.Context, *_.FindWeaponByNameRequest) (*_.FindWeaponByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWeaponByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateWeapon(context.Context, *_.UpdateWeaponRequest) (*_.UpdateWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeapon not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeapons(context.Context, *_.GetPlayerWeaponsRequest) (*_.GetPlayerWeaponsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeapons not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeaponEquipped(context.Context, *_.GetPlayerWeaponEquippedRequest) (*_.GetPlayerWeaponEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeaponEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetAllWeaponCategory(context.Context, *_.GetAllWeaponCategoryRequest) (*_.GetAllWeaponCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWeaponCategory not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByID(context.Context, *_.GetPlayerByIDRequest) (*_.GetPlayerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByUsername(context.Context, *_.GetPlayerByUsernameRequest) (*_.GetPlayerByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByUsername not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStats(context.Context, *_.GetPlayerStatsRequest) (*_.GetPlayerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStats not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerResources(context.Context, *_.GetPlayerResourcesRequest) (*_.GetPlayerResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerResources not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerItems(context.Context, *_.GetPlayerItemsRequest) (*_.GetPlayerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItems not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerEconomy(context.Context, *_.GetPlayerEconomyRequest) (*_.GetPlayerEconomyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEconomy not implemented")
}
func (*UnimplementedNoNameServer) ManagePlayerInventory(context.Context, *_.ManagePlayerInventoryRequest) (*_.ManagePlayerInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagePlayerInventory not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerPosition(context.Context, *_.CreatePlayerPositionRequest) (*_.CreatePlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerPosition not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerCurrentPlanet(context.Context, *_.GetPlayerCurrentPlanetRequest) (*_.GetPlayerCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) CountPlanetVisited(context.Context, *_.CountPlanetVisitedRequest) (*_.CountPlanetVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlanetVisited not implemented")
}
func (*UnimplementedNoNameServer) CountSystemVisited(context.Context, *_.CountSystemVisitedRequest) (*_.CountSystemVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSystemVisited not implemented")
}
func (*UnimplementedNoNameServer) CountPlayerVisitedCurrentPlanet(context.Context, *_.CountPlayerVisitedCurrentPlanetRequest) (*_.CountPlayerVisitedCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlayerVisitedCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) GetRestsInfo(context.Context, *_.GetRestsInfoRequest) (*_.GetRestsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestsInfo not implemented")
}
func (*UnimplementedNoNameServer) EndPlayerRest(context.Context, *_.EndPlayerRestRequest) (*_.EndPlayerRestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPlayerRest not implemented")
}
func (*UnimplementedNoNameServer) SignIn(context.Context, *_.SignInRequest) (*_.SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateByID(context.Context, *_.GetPlayerStateByIDRequest) (*_.GetPlayerStateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateByID not implemented")
}
func (*UnimplementedNoNameServer) GetActivePlayerStates(context.Context, *_.GetActivePlayerStatesRequest) (*_.GetActivePlayerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlayerStates not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateToNotify(context.Context, *_.GetPlayerStateToNotifyRequest) (*_.GetPlayerStateToNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateToNotify not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerState(context.Context, *_.CreatePlayerStateRequest) (*_.CreatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) UpdatePlayerState(context.Context, *_.UpdatePlayerStateRequest) (*_.UpdatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) DeletePlayerState(context.Context, *_.DeletePlayerStateRequest) (*_.DeletePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerState not implemented")
}
func (*UnimplementedNoNameServer) GetEnemyByID(context.Context, *_.GetEnemyByIDRequest) (*_.GetEnemyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemyByID not implemented")
}
func (*UnimplementedNoNameServer) HitEnemy(context.Context, *_.HitEnemyRequest) (*_.HitEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitEnemy not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByID(context.Context, *_.GetTitanByIDRequest) (*_.GetTitanByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByID not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByName(context.Context, *_.GetTitanByNameRequest) (*_.GetTitanByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByName not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByPlanetID(context.Context, *_.GetTitanByPlanetIDRequest) (*_.GetTitanByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) HitTitan(context.Context, *_.HitTitanRequest) (*_.HitTitanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitTitan not implemented")
}
func (*UnimplementedNoNameServer) TitanDiscovered(context.Context, *_.TitanDiscoveredRequest) (*_.TitanDiscoveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitanDiscovered not implemented")
}
func (*UnimplementedNoNameServer) FindLanguageBySlug(context.Context, *_.FindLanguageBySlugRequest) (*_.FindLanguageBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLanguageBySlug not implemented")
}
func (*UnimplementedNoNameServer) FindLanguageByName(context.Context, *_.FindLanguageByNameRequest) (*_.FindLanguageByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLanguageByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllLanguages(context.Context, *_.GetAllLanguagesRequest) (*_.GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (*UnimplementedNoNameServer) GetAllNPC(context.Context, *_.GetAllNPCRequest) (*_.GetAllNPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNPC not implemented")
}
func (*UnimplementedNoNameServer) CraftArmor(context.Context, *_.CraftArmorRequest) (*_.CraftArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CraftArmor not implemented")
}
func (*UnimplementedNoNameServer) CraftWeapon(context.Context, *_.CraftWeaponRequest) (*_.CraftWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CraftWeapon not implemented")
}
func (*UnimplementedNoNameServer) BankDeposit(context.Context, *_.BankDepositRequest) (*_.BankDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankDeposit not implemented")
}
func (*UnimplementedNoNameServer) BankWithdraw(context.Context, *_.BankWithdrawRequest) (*_.BankWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankWithdraw not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByID(context.Context, *_.GetPlanetByIDRequest) (*_.GetPlanetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByCoordinate(context.Context, *_.GetPlanetByCoordinateRequest) (*_.GetPlanetByCoordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByCoordinate not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByMapID(context.Context, *_.GetPlanetByMapIDRequest) (*_.GetPlanetByMapIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByMapID not implemented")
}
func (*UnimplementedNoNameServer) GetMapByID(context.Context, *_.GetMapByIDRequest) (*_.GetMapByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByID(context.Context, *_.GetResourceByIDRequest) (*_.GetResourceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByName(context.Context, *_.GetResourceByNameRequest) (*_.GetResourceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByName not implemented")
}
func (*UnimplementedNoNameServer) DropResource(context.Context, *_.DropResourceRequest) (*_.DropResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropResource not implemented")
}
func (*UnimplementedNoNameServer) GetAllItems(context.Context, *_.GetAllItemsRequest) (*_.GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (*UnimplementedNoNameServer) GetItemsByCategoryID(context.Context, *_.GetItemsByCategoryIDRequest) (*_.GetItemsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) UseItem(context.Context, *_.UseItemRequest) (*_.UseItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (*UnimplementedNoNameServer) GetAllItemCategories(context.Context, *_.GetAllItemCategoriesRequest) (*_.GetAllItemCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemCategories not implemented")
}
func (*UnimplementedNoNameServer) GetShipRepairInfo(context.Context, *_.GetShipRepairInfoRequest) (*_.GetShipRepairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipRepairInfo not implemented")
}
func (*UnimplementedNoNameServer) StartShipRepair(context.Context, *_.StartShipRepairRequest) (*_.StartShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartShipRepair not implemented")
}
func (*UnimplementedNoNameServer) EndShipRepair(context.Context, *_.EndShipRepairRequest) (*_.EndShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipRepair not implemented")
}
func (*UnimplementedNoNameServer) GetShipTravelInfo(context.Context, *_.GetShipTravelInfoRequest) (*_.GetShipTravelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipTravelInfo not implemented")
}
func (*UnimplementedNoNameServer) EndShipTravel(context.Context, *_.EndShipTravelRequest) (*_.EndShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipTravel not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShips(context.Context, *_.GetPlayerShipsRequest) (*_.GetPlayerShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShips not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShipEquipped(context.Context, *_.GetPlayerShipEquippedRequest) (*_.GetPlayerShipEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShipEquipped not implemented")
}
func (*UnimplementedNoNameServer) CreateTransaction(context.Context, *_.CreateTransactionRequest) (*_.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedNoNameServer) DropTresure(context.Context, *_.DropTresureRequest) (*_.DropTresureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTresure not implemented")
}
func (*UnimplementedNoNameServer) GetMission(context.Context, *_.GetMissionRequest) (*_.GetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (*UnimplementedNoNameServer) CheckMission(context.Context, *_.CheckMissionRequest) (*_.CheckMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMission not implemented")
}
func (*UnimplementedNoNameServer) GetMissionReward(context.Context, *_.GetMissionRewardRequest) (*_.GetMissionRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionReward not implemented")
}
func (*UnimplementedNoNameServer) mustEmbedUnimplementedNoNameServer() {}

func RegisterNoNameServer(s *grpc.Server, srv NoNameServer) {
	s.RegisterService(&_NoName_serviceDesc, srv)
}

func _NoName_GetArmorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetArmorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByID(ctx, req.(*_.GetArmorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindArmorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.FindArmorByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindArmorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindArmorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindArmorByName(ctx, req.(*_.FindArmorByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.UpdateArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateArmor(ctx, req.(*_.UpdateArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerArmorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmors(ctx, req.(*_.GetPlayerArmorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorsEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerArmorsEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorsEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, req.(*_.GetPlayerArmorsEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllArmorCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetAllArmorCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllArmorCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, req.(*_.GetAllArmorCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetWeaponByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetWeaponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetWeaponByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetWeaponByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetWeaponByID(ctx, req.(*_.GetWeaponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindWeaponByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.FindWeaponByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindWeaponByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindWeaponByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindWeaponByName(ctx, req.(*_.FindWeaponByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.UpdateWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateWeapon(ctx, req.(*_.UpdateWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeapons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerWeaponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeapons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, req.(*_.GetPlayerWeaponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeaponEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerWeaponEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeaponEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, req.(*_.GetPlayerWeaponEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllWeaponCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetAllWeaponCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllWeaponCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllWeaponCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllWeaponCategory(ctx, req.(*_.GetAllWeaponCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByID(ctx, req.(*_.GetPlayerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, req.(*_.GetPlayerByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStats(ctx, req.(*_.GetPlayerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerResources(ctx, req.(*_.GetPlayerResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerItems(ctx, req.(*_.GetPlayerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerEconomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerEconomyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerEconomy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, req.(*_.GetPlayerEconomyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ManagePlayerInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.ManagePlayerInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ManagePlayerInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, req.(*_.ManagePlayerInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CreatePlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, req.(*_.CreatePlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, req.(*_.GetPlayerCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlanetVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CountPlanetVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlanetVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlanetVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlanetVisited(ctx, req.(*_.CountPlanetVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountSystemVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CountSystemVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountSystemVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountSystemVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountSystemVisited(ctx, req.(*_.CountSystemVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlayerVisitedCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CountPlayerVisitedCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlayerVisitedCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, req.(*_.CountPlayerVisitedCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRestsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetRestsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRestsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRestsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRestsInfo(ctx, req.(*_.GetRestsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndPlayerRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.EndPlayerRestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndPlayerRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndPlayerRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndPlayerRest(ctx, req.(*_.EndPlayerRestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SignIn(ctx, req.(*_.SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerStateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, req.(*_.GetPlayerStateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetActivePlayerStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetActivePlayerStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetActivePlayerStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, req.(*_.GetActivePlayerStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerStateToNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, req.(*_.GetPlayerStateToNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CreatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerState(ctx, req.(*_.CreatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.UpdatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdatePlayerState(ctx, req.(*_.UpdatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeletePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.DeletePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeletePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeletePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeletePlayerState(ctx, req.(*_.DeletePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetEnemyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetEnemyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetEnemyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetEnemyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetEnemyByID(ctx, req.(*_.GetEnemyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.HitEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitEnemy(ctx, req.(*_.HitEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetTitanByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByID(ctx, req.(*_.GetTitanByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetTitanByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByName(ctx, req.(*_.GetTitanByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetTitanByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, req.(*_.GetTitanByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitTitan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.HitTitanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitTitan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitTitan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitTitan(ctx, req.(*_.HitTitanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_TitanDiscovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.TitanDiscoveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).TitanDiscovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/TitanDiscovered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).TitanDiscovered(ctx, req.(*_.TitanDiscoveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindLanguageBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.FindLanguageBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindLanguageBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindLanguageBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindLanguageBySlug(ctx, req.(*_.FindLanguageBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_FindLanguageByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.FindLanguageByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).FindLanguageByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/FindLanguageByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).FindLanguageByName(ctx, req.(*_.FindLanguageByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllLanguages(ctx, req.(*_.GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetAllNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllNPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllNPC(ctx, req.(*_.GetAllNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CraftArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CraftArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CraftArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CraftArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CraftArmor(ctx, req.(*_.CraftArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CraftWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CraftWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CraftWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CraftWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CraftWeapon(ctx, req.(*_.CraftWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.BankDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankDeposit(ctx, req.(*_.BankDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.BankWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankWithdraw(ctx, req.(*_.BankWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlanetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByID(ctx, req.(*_.GetPlanetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlanetByCoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, req.(*_.GetPlanetByCoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByMapID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlanetByMapIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByMapID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, req.(*_.GetPlanetByMapIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetMapByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMapByID(ctx, req.(*_.GetMapByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetResourceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByID(ctx, req.(*_.GetResourceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetResourceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByName(ctx, req.(*_.GetResourceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.DropResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropResource(ctx, req.(*_.DropResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItems(ctx, req.(*_.GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetItemsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetItemsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetItemsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, req.(*_.GetItemsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UseItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UseItem(ctx, req.(*_.UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItemCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetAllItemCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItemCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItemCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItemCategories(ctx, req.(*_.GetAllItemCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipRepairInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetShipRepairInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipRepairInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, req.(*_.GetShipRepairInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.StartShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartShipRepair(ctx, req.(*_.StartShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.EndShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipRepair(ctx, req.(*_.EndShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipTravelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetShipTravelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipTravelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, req.(*_.GetShipTravelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.EndShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipTravel(ctx, req.(*_.EndShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShips(ctx, req.(*_.GetPlayerShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShipEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetPlayerShipEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShipEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, req.(*_.GetPlayerShipEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreateTransaction(ctx, req.(*_.CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropTresure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.DropTresureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropTresure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropTresure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropTresure(ctx, req.(*_.DropTresureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMission(ctx, req.(*_.GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.CheckMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckMission(ctx, req.(*_.CheckMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMissionReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_.GetMissionRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMissionReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMissionReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMissionReward(ctx, req.(*_.GetMissionRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NoName",
	HandlerType: (*NoNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArmorByID",
			Handler:    _NoName_GetArmorByID_Handler,
		},
		{
			MethodName: "FindArmorByName",
			Handler:    _NoName_FindArmorByName_Handler,
		},
		{
			MethodName: "UpdateArmor",
			Handler:    _NoName_UpdateArmor_Handler,
		},
		{
			MethodName: "GetPlayerArmors",
			Handler:    _NoName_GetPlayerArmors_Handler,
		},
		{
			MethodName: "GetPlayerArmorsEquipped",
			Handler:    _NoName_GetPlayerArmorsEquipped_Handler,
		},
		{
			MethodName: "GetAllArmorCategory",
			Handler:    _NoName_GetAllArmorCategory_Handler,
		},
		{
			MethodName: "GetWeaponByID",
			Handler:    _NoName_GetWeaponByID_Handler,
		},
		{
			MethodName: "FindWeaponByName",
			Handler:    _NoName_FindWeaponByName_Handler,
		},
		{
			MethodName: "UpdateWeapon",
			Handler:    _NoName_UpdateWeapon_Handler,
		},
		{
			MethodName: "GetPlayerWeapons",
			Handler:    _NoName_GetPlayerWeapons_Handler,
		},
		{
			MethodName: "GetPlayerWeaponEquipped",
			Handler:    _NoName_GetPlayerWeaponEquipped_Handler,
		},
		{
			MethodName: "GetAllWeaponCategory",
			Handler:    _NoName_GetAllWeaponCategory_Handler,
		},
		{
			MethodName: "GetPlayerByID",
			Handler:    _NoName_GetPlayerByID_Handler,
		},
		{
			MethodName: "GetPlayerByUsername",
			Handler:    _NoName_GetPlayerByUsername_Handler,
		},
		{
			MethodName: "GetPlayerStats",
			Handler:    _NoName_GetPlayerStats_Handler,
		},
		{
			MethodName: "GetPlayerResources",
			Handler:    _NoName_GetPlayerResources_Handler,
		},
		{
			MethodName: "GetPlayerItems",
			Handler:    _NoName_GetPlayerItems_Handler,
		},
		{
			MethodName: "GetPlayerEconomy",
			Handler:    _NoName_GetPlayerEconomy_Handler,
		},
		{
			MethodName: "ManagePlayerInventory",
			Handler:    _NoName_ManagePlayerInventory_Handler,
		},
		{
			MethodName: "CreatePlayerPosition",
			Handler:    _NoName_CreatePlayerPosition_Handler,
		},
		{
			MethodName: "GetPlayerCurrentPlanet",
			Handler:    _NoName_GetPlayerCurrentPlanet_Handler,
		},
		{
			MethodName: "CountPlanetVisited",
			Handler:    _NoName_CountPlanetVisited_Handler,
		},
		{
			MethodName: "CountSystemVisited",
			Handler:    _NoName_CountSystemVisited_Handler,
		},
		{
			MethodName: "CountPlayerVisitedCurrentPlanet",
			Handler:    _NoName_CountPlayerVisitedCurrentPlanet_Handler,
		},
		{
			MethodName: "GetRestsInfo",
			Handler:    _NoName_GetRestsInfo_Handler,
		},
		{
			MethodName: "EndPlayerRest",
			Handler:    _NoName_EndPlayerRest_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _NoName_SignIn_Handler,
		},
		{
			MethodName: "GetPlayerStateByID",
			Handler:    _NoName_GetPlayerStateByID_Handler,
		},
		{
			MethodName: "GetActivePlayerStates",
			Handler:    _NoName_GetActivePlayerStates_Handler,
		},
		{
			MethodName: "GetPlayerStateToNotify",
			Handler:    _NoName_GetPlayerStateToNotify_Handler,
		},
		{
			MethodName: "CreatePlayerState",
			Handler:    _NoName_CreatePlayerState_Handler,
		},
		{
			MethodName: "UpdatePlayerState",
			Handler:    _NoName_UpdatePlayerState_Handler,
		},
		{
			MethodName: "DeletePlayerState",
			Handler:    _NoName_DeletePlayerState_Handler,
		},
		{
			MethodName: "GetEnemyByID",
			Handler:    _NoName_GetEnemyByID_Handler,
		},
		{
			MethodName: "HitEnemy",
			Handler:    _NoName_HitEnemy_Handler,
		},
		{
			MethodName: "GetTitanByID",
			Handler:    _NoName_GetTitanByID_Handler,
		},
		{
			MethodName: "GetTitanByName",
			Handler:    _NoName_GetTitanByName_Handler,
		},
		{
			MethodName: "GetTitanByPlanetID",
			Handler:    _NoName_GetTitanByPlanetID_Handler,
		},
		{
			MethodName: "HitTitan",
			Handler:    _NoName_HitTitan_Handler,
		},
		{
			MethodName: "TitanDiscovered",
			Handler:    _NoName_TitanDiscovered_Handler,
		},
		{
			MethodName: "FindLanguageBySlug",
			Handler:    _NoName_FindLanguageBySlug_Handler,
		},
		{
			MethodName: "FindLanguageByName",
			Handler:    _NoName_FindLanguageByName_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _NoName_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetAllNPC",
			Handler:    _NoName_GetAllNPC_Handler,
		},
		{
			MethodName: "CraftArmor",
			Handler:    _NoName_CraftArmor_Handler,
		},
		{
			MethodName: "CraftWeapon",
			Handler:    _NoName_CraftWeapon_Handler,
		},
		{
			MethodName: "BankDeposit",
			Handler:    _NoName_BankDeposit_Handler,
		},
		{
			MethodName: "BankWithdraw",
			Handler:    _NoName_BankWithdraw_Handler,
		},
		{
			MethodName: "GetPlanetByID",
			Handler:    _NoName_GetPlanetByID_Handler,
		},
		{
			MethodName: "GetPlanetByCoordinate",
			Handler:    _NoName_GetPlanetByCoordinate_Handler,
		},
		{
			MethodName: "GetPlanetByMapID",
			Handler:    _NoName_GetPlanetByMapID_Handler,
		},
		{
			MethodName: "GetMapByID",
			Handler:    _NoName_GetMapByID_Handler,
		},
		{
			MethodName: "GetResourceByID",
			Handler:    _NoName_GetResourceByID_Handler,
		},
		{
			MethodName: "GetResourceByName",
			Handler:    _NoName_GetResourceByName_Handler,
		},
		{
			MethodName: "DropResource",
			Handler:    _NoName_DropResource_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _NoName_GetAllItems_Handler,
		},
		{
			MethodName: "GetItemsByCategoryID",
			Handler:    _NoName_GetItemsByCategoryID_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _NoName_UseItem_Handler,
		},
		{
			MethodName: "GetAllItemCategories",
			Handler:    _NoName_GetAllItemCategories_Handler,
		},
		{
			MethodName: "GetShipRepairInfo",
			Handler:    _NoName_GetShipRepairInfo_Handler,
		},
		{
			MethodName: "StartShipRepair",
			Handler:    _NoName_StartShipRepair_Handler,
		},
		{
			MethodName: "EndShipRepair",
			Handler:    _NoName_EndShipRepair_Handler,
		},
		{
			MethodName: "GetShipTravelInfo",
			Handler:    _NoName_GetShipTravelInfo_Handler,
		},
		{
			MethodName: "EndShipTravel",
			Handler:    _NoName_EndShipTravel_Handler,
		},
		{
			MethodName: "GetPlayerShips",
			Handler:    _NoName_GetPlayerShips_Handler,
		},
		{
			MethodName: "GetPlayerShipEquipped",
			Handler:    _NoName_GetPlayerShipEquipped_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _NoName_CreateTransaction_Handler,
		},
		{
			MethodName: "DropTresure",
			Handler:    _NoName_DropTresure_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _NoName_GetMission_Handler,
		},
		{
			MethodName: "CheckMission",
			Handler:    _NoName_CheckMission_Handler,
		},
		{
			MethodName: "GetMissionReward",
			Handler:    _NoName_GetMissionReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/noname.proto",
}
