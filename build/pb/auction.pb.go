// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/auction.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuctionItemCategoryEnum int32

const (
	AuctionItemCategoryEnum_ARMOR  AuctionItemCategoryEnum = 0
	AuctionItemCategoryEnum_WEAPON AuctionItemCategoryEnum = 1
)

var AuctionItemCategoryEnum_name = map[int32]string{
	0: "ARMOR",
	1: "WEAPON",
}

var AuctionItemCategoryEnum_value = map[string]int32{
	"ARMOR":  0,
	"WEAPON": 1,
}

func (x AuctionItemCategoryEnum) String() string {
	return proto.EnumName(AuctionItemCategoryEnum_name, int32(x))
}

func (AuctionItemCategoryEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{0}
}

type Auction struct {
	ID           uint32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PlayerID     uint32                  `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Player       *Player                 `protobuf:"bytes,3,opt,name=Player,proto3" json:"Player,omitempty"`
	ItemID       uint32                  `protobuf:"varint,4,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	ItemCategory AuctionItemCategoryEnum `protobuf:"varint,5,opt,name=ItemCategory,proto3,enum=auction.AuctionItemCategoryEnum" json:"ItemCategory,omitempty"`
	MinPrice     int32                   `protobuf:"varint,6,opt,name=MinPrice,proto3" json:"MinPrice,omitempty"`
	CloseAt      *types.Timestamp        `protobuf:"bytes,7,opt,name=CloseAt,proto3" json:"CloseAt,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Auction) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *Auction) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *Auction) GetItemID() uint32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *Auction) GetItemCategory() AuctionItemCategoryEnum {
	if m != nil {
		return m.ItemCategory
	}
	return AuctionItemCategoryEnum_ARMOR
}

func (m *Auction) GetMinPrice() int32 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

func (m *Auction) GetCloseAt() *types.Timestamp {
	if m != nil {
		return m.CloseAt
	}
	return nil
}

type AuctionBid struct {
	ID         uint32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PlayerID   uint32  `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Player     *Player `protobuf:"bytes,3,opt,name=Player,proto3" json:"Player,omitempty"`
	AuctionID  uint32  `protobuf:"varint,4,opt,name=AuctionID,proto3" json:"AuctionID,omitempty"`
	PartialBid int32   `protobuf:"varint,5,opt,name=PartialBid,proto3" json:"PartialBid,omitempty"`
	Bid        int32   `protobuf:"varint,6,opt,name=Bid,proto3" json:"Bid,omitempty"`
}

func (m *AuctionBid) Reset()         { *m = AuctionBid{} }
func (m *AuctionBid) String() string { return proto.CompactTextString(m) }
func (*AuctionBid) ProtoMessage()    {}
func (*AuctionBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{1}
}
func (m *AuctionBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionBid.Merge(m, src)
}
func (m *AuctionBid) XXX_Size() int {
	return m.Size()
}
func (m *AuctionBid) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionBid.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionBid proto.InternalMessageInfo

func (m *AuctionBid) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AuctionBid) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *AuctionBid) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *AuctionBid) GetAuctionID() uint32 {
	if m != nil {
		return m.AuctionID
	}
	return 0
}

func (m *AuctionBid) GetPartialBid() int32 {
	if m != nil {
		return m.PartialBid
	}
	return 0
}

func (m *AuctionBid) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

// GetAllAuctions
type GetAllAuctionsRequest struct {
}

func (m *GetAllAuctionsRequest) Reset()         { *m = GetAllAuctionsRequest{} }
func (m *GetAllAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllAuctionsRequest) ProtoMessage()    {}
func (*GetAllAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{2}
}
func (m *GetAllAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAuctionsRequest.Merge(m, src)
}
func (m *GetAllAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAuctionsRequest proto.InternalMessageInfo

type GetAllAuctionsResponse struct {
	Auctions []*Auction `protobuf:"bytes,1,rep,name=Auctions,proto3" json:"Auctions,omitempty"`
}

func (m *GetAllAuctionsResponse) Reset()         { *m = GetAllAuctionsResponse{} }
func (m *GetAllAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllAuctionsResponse) ProtoMessage()    {}
func (*GetAllAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{3}
}
func (m *GetAllAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAuctionsResponse.Merge(m, src)
}
func (m *GetAllAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAuctionsResponse proto.InternalMessageInfo

func (m *GetAllAuctionsResponse) GetAuctions() []*Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

// GetAllAuctionsByCategory
type GetAllAuctionsByCategoryRequest struct {
	PlayerID     uint32                  `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	ItemCategory AuctionItemCategoryEnum `protobuf:"varint,2,opt,name=ItemCategory,proto3,enum=auction.AuctionItemCategoryEnum" json:"ItemCategory,omitempty"`
}

func (m *GetAllAuctionsByCategoryRequest) Reset()         { *m = GetAllAuctionsByCategoryRequest{} }
func (m *GetAllAuctionsByCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllAuctionsByCategoryRequest) ProtoMessage()    {}
func (*GetAllAuctionsByCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{4}
}
func (m *GetAllAuctionsByCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAuctionsByCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAuctionsByCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAuctionsByCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAuctionsByCategoryRequest.Merge(m, src)
}
func (m *GetAllAuctionsByCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAuctionsByCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAuctionsByCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAuctionsByCategoryRequest proto.InternalMessageInfo

func (m *GetAllAuctionsByCategoryRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GetAllAuctionsByCategoryRequest) GetItemCategory() AuctionItemCategoryEnum {
	if m != nil {
		return m.ItemCategory
	}
	return AuctionItemCategoryEnum_ARMOR
}

type GetAllAuctionsByCategoryResponse struct {
	Auctions []*Auction `protobuf:"bytes,1,rep,name=Auctions,proto3" json:"Auctions,omitempty"`
}

func (m *GetAllAuctionsByCategoryResponse) Reset()         { *m = GetAllAuctionsByCategoryResponse{} }
func (m *GetAllAuctionsByCategoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllAuctionsByCategoryResponse) ProtoMessage()    {}
func (*GetAllAuctionsByCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{5}
}
func (m *GetAllAuctionsByCategoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAuctionsByCategoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAuctionsByCategoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAuctionsByCategoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAuctionsByCategoryResponse.Merge(m, src)
}
func (m *GetAllAuctionsByCategoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAuctionsByCategoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAuctionsByCategoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAuctionsByCategoryResponse proto.InternalMessageInfo

func (m *GetAllAuctionsByCategoryResponse) GetAuctions() []*Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

// GetAllPlayerAuctions
type GetAllPlayerAuctionsRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetAllPlayerAuctionsRequest) Reset()         { *m = GetAllPlayerAuctionsRequest{} }
func (m *GetAllPlayerAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllPlayerAuctionsRequest) ProtoMessage()    {}
func (*GetAllPlayerAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{6}
}
func (m *GetAllPlayerAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllPlayerAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllPlayerAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllPlayerAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllPlayerAuctionsRequest.Merge(m, src)
}
func (m *GetAllPlayerAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllPlayerAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllPlayerAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllPlayerAuctionsRequest proto.InternalMessageInfo

func (m *GetAllPlayerAuctionsRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetAllPlayerAuctionsResponse struct {
	Auctions []*Auction `protobuf:"bytes,1,rep,name=Auctions,proto3" json:"Auctions,omitempty"`
}

func (m *GetAllPlayerAuctionsResponse) Reset()         { *m = GetAllPlayerAuctionsResponse{} }
func (m *GetAllPlayerAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllPlayerAuctionsResponse) ProtoMessage()    {}
func (*GetAllPlayerAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{7}
}
func (m *GetAllPlayerAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllPlayerAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllPlayerAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllPlayerAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllPlayerAuctionsResponse.Merge(m, src)
}
func (m *GetAllPlayerAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllPlayerAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllPlayerAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllPlayerAuctionsResponse proto.InternalMessageInfo

func (m *GetAllPlayerAuctionsResponse) GetAuctions() []*Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

// GetAllPlayerOfferAuctionsByCategory
type GetAllPlayerOfferAuctionsByCategoryRequest struct {
	PlayerID     uint32                  `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	ItemCategory AuctionItemCategoryEnum `protobuf:"varint,2,opt,name=ItemCategory,proto3,enum=auction.AuctionItemCategoryEnum" json:"ItemCategory,omitempty"`
}

func (m *GetAllPlayerOfferAuctionsByCategoryRequest) Reset() {
	*m = GetAllPlayerOfferAuctionsByCategoryRequest{}
}
func (m *GetAllPlayerOfferAuctionsByCategoryRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetAllPlayerOfferAuctionsByCategoryRequest) ProtoMessage() {}
func (*GetAllPlayerOfferAuctionsByCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{8}
}
func (m *GetAllPlayerOfferAuctionsByCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllPlayerOfferAuctionsByCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllPlayerOfferAuctionsByCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryRequest.Merge(m, src)
}
func (m *GetAllPlayerOfferAuctionsByCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllPlayerOfferAuctionsByCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryRequest proto.InternalMessageInfo

func (m *GetAllPlayerOfferAuctionsByCategoryRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GetAllPlayerOfferAuctionsByCategoryRequest) GetItemCategory() AuctionItemCategoryEnum {
	if m != nil {
		return m.ItemCategory
	}
	return AuctionItemCategoryEnum_ARMOR
}

type GetAllPlayerOfferAuctionsByCategoryResponse struct {
	Auctions []*Auction `protobuf:"bytes,1,rep,name=Auctions,proto3" json:"Auctions,omitempty"`
}

func (m *GetAllPlayerOfferAuctionsByCategoryResponse) Reset() {
	*m = GetAllPlayerOfferAuctionsByCategoryResponse{}
}
func (m *GetAllPlayerOfferAuctionsByCategoryResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetAllPlayerOfferAuctionsByCategoryResponse) ProtoMessage() {}
func (*GetAllPlayerOfferAuctionsByCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{9}
}
func (m *GetAllPlayerOfferAuctionsByCategoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllPlayerOfferAuctionsByCategoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllPlayerOfferAuctionsByCategoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryResponse.Merge(m, src)
}
func (m *GetAllPlayerOfferAuctionsByCategoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllPlayerOfferAuctionsByCategoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllPlayerOfferAuctionsByCategoryResponse proto.InternalMessageInfo

func (m *GetAllPlayerOfferAuctionsByCategoryResponse) GetAuctions() []*Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

// GetAuctionByID
type GetAuctionByIDRequest struct {
	AuctionID uint32 `protobuf:"varint,1,opt,name=AuctionID,proto3" json:"AuctionID,omitempty"`
}

func (m *GetAuctionByIDRequest) Reset()         { *m = GetAuctionByIDRequest{} }
func (m *GetAuctionByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuctionByIDRequest) ProtoMessage()    {}
func (*GetAuctionByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{10}
}
func (m *GetAuctionByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuctionByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuctionByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuctionByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuctionByIDRequest.Merge(m, src)
}
func (m *GetAuctionByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAuctionByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuctionByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuctionByIDRequest proto.InternalMessageInfo

func (m *GetAuctionByIDRequest) GetAuctionID() uint32 {
	if m != nil {
		return m.AuctionID
	}
	return 0
}

type GetAuctionByIDResponse struct {
	Auction *Auction `protobuf:"bytes,1,opt,name=Auction,proto3" json:"Auction,omitempty"`
}

func (m *GetAuctionByIDResponse) Reset()         { *m = GetAuctionByIDResponse{} }
func (m *GetAuctionByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetAuctionByIDResponse) ProtoMessage()    {}
func (*GetAuctionByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{11}
}
func (m *GetAuctionByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuctionByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuctionByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuctionByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuctionByIDResponse.Merge(m, src)
}
func (m *GetAuctionByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAuctionByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuctionByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuctionByIDResponse proto.InternalMessageInfo

func (m *GetAuctionByIDResponse) GetAuction() *Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

// NewAuction
type NewAuctionRequest struct {
	PlayerID     uint32                  `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	ItemID       uint32                  `protobuf:"varint,2,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	ItemCategory AuctionItemCategoryEnum `protobuf:"varint,3,opt,name=ItemCategory,proto3,enum=auction.AuctionItemCategoryEnum" json:"ItemCategory,omitempty"`
	MinPrice     int32                   `protobuf:"varint,4,opt,name=MinPrice,proto3" json:"MinPrice,omitempty"`
}

func (m *NewAuctionRequest) Reset()         { *m = NewAuctionRequest{} }
func (m *NewAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*NewAuctionRequest) ProtoMessage()    {}
func (*NewAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{12}
}
func (m *NewAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAuctionRequest.Merge(m, src)
}
func (m *NewAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewAuctionRequest proto.InternalMessageInfo

func (m *NewAuctionRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *NewAuctionRequest) GetItemID() uint32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *NewAuctionRequest) GetItemCategory() AuctionItemCategoryEnum {
	if m != nil {
		return m.ItemCategory
	}
	return AuctionItemCategoryEnum_ARMOR
}

func (m *NewAuctionRequest) GetMinPrice() int32 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

type NewAuctionResponse struct {
}

func (m *NewAuctionResponse) Reset()         { *m = NewAuctionResponse{} }
func (m *NewAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*NewAuctionResponse) ProtoMessage()    {}
func (*NewAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{13}
}
func (m *NewAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAuctionResponse.Merge(m, src)
}
func (m *NewAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewAuctionResponse proto.InternalMessageInfo

// NewAuctionBid
type NewAuctionBidRequest struct {
	AuctionID uint32 `protobuf:"varint,1,opt,name=AuctionID,proto3" json:"AuctionID,omitempty"`
	PlayerID  uint32 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Bid       int32  `protobuf:"varint,3,opt,name=Bid,proto3" json:"Bid,omitempty"`
}

func (m *NewAuctionBidRequest) Reset()         { *m = NewAuctionBidRequest{} }
func (m *NewAuctionBidRequest) String() string { return proto.CompactTextString(m) }
func (*NewAuctionBidRequest) ProtoMessage()    {}
func (*NewAuctionBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{14}
}
func (m *NewAuctionBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewAuctionBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewAuctionBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewAuctionBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAuctionBidRequest.Merge(m, src)
}
func (m *NewAuctionBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewAuctionBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAuctionBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewAuctionBidRequest proto.InternalMessageInfo

func (m *NewAuctionBidRequest) GetAuctionID() uint32 {
	if m != nil {
		return m.AuctionID
	}
	return 0
}

func (m *NewAuctionBidRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *NewAuctionBidRequest) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type NewAuctionBidResponse struct {
}

func (m *NewAuctionBidResponse) Reset()         { *m = NewAuctionBidResponse{} }
func (m *NewAuctionBidResponse) String() string { return proto.CompactTextString(m) }
func (*NewAuctionBidResponse) ProtoMessage()    {}
func (*NewAuctionBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{15}
}
func (m *NewAuctionBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewAuctionBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewAuctionBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewAuctionBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAuctionBidResponse.Merge(m, src)
}
func (m *NewAuctionBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewAuctionBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAuctionBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewAuctionBidResponse proto.InternalMessageInfo

// GetAuctionBids
type GetAuctionBidsRequest struct {
	AuctionID uint32 `protobuf:"varint,1,opt,name=AuctionID,proto3" json:"AuctionID,omitempty"`
}

func (m *GetAuctionBidsRequest) Reset()         { *m = GetAuctionBidsRequest{} }
func (m *GetAuctionBidsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuctionBidsRequest) ProtoMessage()    {}
func (*GetAuctionBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{16}
}
func (m *GetAuctionBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuctionBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuctionBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuctionBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuctionBidsRequest.Merge(m, src)
}
func (m *GetAuctionBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAuctionBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuctionBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuctionBidsRequest proto.InternalMessageInfo

func (m *GetAuctionBidsRequest) GetAuctionID() uint32 {
	if m != nil {
		return m.AuctionID
	}
	return 0
}

type GetAuctionBidsResponse struct {
	TotalBid int32         `protobuf:"varint,1,opt,name=totalBid,proto3" json:"totalBid,omitempty"`
	LastBid  *AuctionBid   `protobuf:"bytes,2,opt,name=LastBid,proto3" json:"LastBid,omitempty"`
	AllBids  []*AuctionBid `protobuf:"bytes,3,rep,name=AllBids,proto3" json:"AllBids,omitempty"`
}

func (m *GetAuctionBidsResponse) Reset()         { *m = GetAuctionBidsResponse{} }
func (m *GetAuctionBidsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAuctionBidsResponse) ProtoMessage()    {}
func (*GetAuctionBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f62f8b8316fed145, []int{17}
}
func (m *GetAuctionBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuctionBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuctionBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuctionBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuctionBidsResponse.Merge(m, src)
}
func (m *GetAuctionBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAuctionBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuctionBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuctionBidsResponse proto.InternalMessageInfo

func (m *GetAuctionBidsResponse) GetTotalBid() int32 {
	if m != nil {
		return m.TotalBid
	}
	return 0
}

func (m *GetAuctionBidsResponse) GetLastBid() *AuctionBid {
	if m != nil {
		return m.LastBid
	}
	return nil
}

func (m *GetAuctionBidsResponse) GetAllBids() []*AuctionBid {
	if m != nil {
		return m.AllBids
	}
	return nil
}

func init() {
	proto.RegisterEnum("auction.AuctionItemCategoryEnum", AuctionItemCategoryEnum_name, AuctionItemCategoryEnum_value)
	proto.RegisterType((*Auction)(nil), "auction.Auction")
	proto.RegisterType((*AuctionBid)(nil), "auction.AuctionBid")
	proto.RegisterType((*GetAllAuctionsRequest)(nil), "auction.GetAllAuctionsRequest")
	proto.RegisterType((*GetAllAuctionsResponse)(nil), "auction.GetAllAuctionsResponse")
	proto.RegisterType((*GetAllAuctionsByCategoryRequest)(nil), "auction.GetAllAuctionsByCategoryRequest")
	proto.RegisterType((*GetAllAuctionsByCategoryResponse)(nil), "auction.GetAllAuctionsByCategoryResponse")
	proto.RegisterType((*GetAllPlayerAuctionsRequest)(nil), "auction.GetAllPlayerAuctionsRequest")
	proto.RegisterType((*GetAllPlayerAuctionsResponse)(nil), "auction.GetAllPlayerAuctionsResponse")
	proto.RegisterType((*GetAllPlayerOfferAuctionsByCategoryRequest)(nil), "auction.GetAllPlayerOfferAuctionsByCategoryRequest")
	proto.RegisterType((*GetAllPlayerOfferAuctionsByCategoryResponse)(nil), "auction.GetAllPlayerOfferAuctionsByCategoryResponse")
	proto.RegisterType((*GetAuctionByIDRequest)(nil), "auction.GetAuctionByIDRequest")
	proto.RegisterType((*GetAuctionByIDResponse)(nil), "auction.GetAuctionByIDResponse")
	proto.RegisterType((*NewAuctionRequest)(nil), "auction.NewAuctionRequest")
	proto.RegisterType((*NewAuctionResponse)(nil), "auction.NewAuctionResponse")
	proto.RegisterType((*NewAuctionBidRequest)(nil), "auction.NewAuctionBidRequest")
	proto.RegisterType((*NewAuctionBidResponse)(nil), "auction.NewAuctionBidResponse")
	proto.RegisterType((*GetAuctionBidsRequest)(nil), "auction.GetAuctionBidsRequest")
	proto.RegisterType((*GetAuctionBidsResponse)(nil), "auction.GetAuctionBidsResponse")
}

func init() { proto.RegisterFile("proto/auction.proto", fileDescriptor_f62f8b8316fed145) }

var fileDescriptor_f62f8b8316fed145 = []byte{
	// 633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xce, 0xda, 0x4d, 0xd2, 0x4e, 0xdf, 0xb7, 0x0a, 0xdb, 0xd2, 0x5a, 0xa1, 0x72, 0x2d, 0x1f,
	0x50, 0x54, 0xc0, 0x41, 0x01, 0x0e, 0x88, 0x93, 0x53, 0x17, 0x64, 0xa9, 0x6d, 0x22, 0x0b, 0x09,
	0x09, 0x4e, 0x4e, 0xb3, 0x89, 0x2c, 0x39, 0x71, 0x88, 0x37, 0x42, 0x39, 0x73, 0x06, 0x21, 0xfe,
	0x05, 0x37, 0x7e, 0x06, 0xc7, 0x1e, 0x39, 0xa2, 0xe4, 0x8f, 0x20, 0xef, 0x47, 0x12, 0x5b, 0x69,
	0x14, 0x05, 0x21, 0x6e, 0x3b, 0xdf, 0x33, 0xcf, 0xec, 0x3e, 0x0b, 0xfb, 0x83, 0x61, 0x44, 0xa3,
	0xaa, 0x3f, 0xba, 0xa6, 0x41, 0xd4, 0xb7, 0x98, 0x84, 0x8b, 0x42, 0x2c, 0x63, 0x6e, 0x1d, 0x84,
	0xfe, 0x98, 0x0c, 0xb9, 0xb1, 0x7c, 0xd2, 0x8d, 0xa2, 0x6e, 0x48, 0xaa, 0x4c, 0x6a, 0x8d, 0x3a,
	0x55, 0x1a, 0xf4, 0x48, 0x4c, 0xfd, 0xde, 0x80, 0x3b, 0x98, 0x9f, 0x14, 0x28, 0xda, 0x3c, 0x01,
	0xde, 0x03, 0xc5, 0x75, 0x34, 0x64, 0xa0, 0xca, 0xff, 0x9e, 0xe2, 0x3a, 0xb8, 0x0c, 0xdb, 0x4d,
	0x96, 0xcc, 0x75, 0x34, 0x85, 0x69, 0x67, 0x32, 0xbe, 0x0f, 0x05, 0x7e, 0xd6, 0x54, 0x03, 0x55,
	0x76, 0x6b, 0x7b, 0x96, 0xa8, 0xcb, 0xb5, 0x9e, 0xb0, 0xe2, 0x43, 0x28, 0xb8, 0x94, 0xf4, 0x5c,
	0x47, 0xdb, 0x62, 0x19, 0x84, 0x84, 0x1d, 0xf8, 0x2f, 0x39, 0x9d, 0xf9, 0x94, 0x74, 0xa3, 0xe1,
	0x58, 0xcb, 0x1b, 0xa8, 0xb2, 0x57, 0x33, 0x2c, 0x39, 0x9b, 0xe8, 0x69, 0xd1, 0xe7, 0xbc, 0x3f,
	0xea, 0x79, 0xa9, 0xa8, 0xa4, 0xc3, 0xcb, 0xa0, 0xdf, 0x1c, 0x06, 0xd7, 0x44, 0x2b, 0x18, 0xa8,
	0x92, 0xf7, 0x66, 0x32, 0x7e, 0x0a, 0xc5, 0xb3, 0x30, 0x8a, 0x89, 0x4d, 0xb5, 0x22, 0x6b, 0xb1,
	0x6c, 0x71, 0x30, 0x2c, 0x09, 0x86, 0xf5, 0x5a, 0x82, 0xe1, 0x49, 0x57, 0xf3, 0x3b, 0x02, 0x10,
	0xb5, 0xeb, 0x41, 0xfb, 0xaf, 0x40, 0x72, 0x0c, 0x3b, 0x72, 0x3a, 0x89, 0xca, 0x5c, 0x81, 0x75,
	0x80, 0xa6, 0x3f, 0xa4, 0x81, 0x1f, 0xd6, 0x83, 0x36, 0x83, 0x25, 0xef, 0x2d, 0x68, 0x70, 0x09,
	0xd4, 0xc4, 0xc0, 0xa7, 0x4d, 0x8e, 0xe6, 0x11, 0xdc, 0x7d, 0x45, 0xa8, 0x1d, 0x86, 0x22, 0x49,
	0xec, 0x91, 0xf7, 0x23, 0x12, 0x53, 0xf3, 0x25, 0x1c, 0x66, 0x0d, 0xf1, 0x20, 0xea, 0xc7, 0x04,
	0x3f, 0x84, 0x6d, 0xa9, 0xd3, 0x90, 0xa1, 0x56, 0x76, 0x6b, 0xa5, 0x2c, 0xf2, 0xde, 0xcc, 0xc3,
	0xfc, 0x88, 0xe0, 0x24, 0x9d, 0xa8, 0x3e, 0x96, 0x2b, 0x10, 0xb5, 0x52, 0xc0, 0xa0, 0x0c, 0x30,
	0xd9, 0x5d, 0x2b, 0x9b, 0xec, 0xda, 0x6c, 0x82, 0x71, 0x7b, 0x13, 0x1b, 0xcd, 0xf5, 0x1c, 0xee,
	0xf1, 0x8c, 0xbc, 0xd3, 0x0c, 0x7c, 0xab, 0x46, 0x32, 0x2f, 0xe0, 0x78, 0x79, 0xe8, 0x46, 0x8d,
	0x7c, 0x46, 0x70, 0xba, 0x98, 0xae, 0xd1, 0xe9, 0xcc, 0x73, 0xfe, 0x0b, 0xac, 0xdf, 0xc1, 0x83,
	0xb5, 0xfa, 0xd9, 0x68, 0xda, 0x67, 0xfc, 0xbe, 0x8a, 0x47, 0x36, 0x76, 0x1d, 0x39, 0x57, 0xea,
	0x61, 0xa0, 0xcc, 0xc3, 0x30, 0x1d, 0x7e, 0x9b, 0x17, 0xc3, 0x44, 0xf9, 0xd3, 0x19, 0x85, 0xb1,
	0xa8, 0x65, 0xd5, 0xa5, 0x83, 0xf9, 0x0d, 0xc1, 0x9d, 0x2b, 0xf2, 0x41, 0xea, 0xd7, 0x40, 0x74,
	0xce, 0x60, 0xca, 0x4a, 0x06, 0x53, 0xff, 0x98, 0xc1, 0xb6, 0xd2, 0x0c, 0x66, 0x1e, 0x00, 0x5e,
	0x6c, 0x95, 0x4f, 0x6b, 0xb6, 0xe0, 0x60, 0xae, 0xad, 0x07, 0xed, 0xb5, 0xd0, 0x5b, 0x49, 0x5c,
	0x82, 0x52, 0xd4, 0x14, 0xa5, 0x64, 0x6a, 0x88, 0xe2, 0xe9, 0xdd, 0x05, 0xed, 0x78, 0xbd, 0xdd,
	0x7d, 0x45, 0xa9, 0xe5, 0xb1, 0x38, 0xb1, 0xbc, 0x32, 0x6c, 0xd3, 0x88, 0x72, 0xb6, 0x43, 0x1c,
	0x00, 0x29, 0xe3, 0x47, 0x50, 0xbc, 0xf0, 0x63, 0x9a, 0x98, 0x14, 0xb6, 0xd8, 0xfd, 0x2c, 0xba,
	0x49, 0x6f, 0xd2, 0x27, 0x71, 0xb7, 0xc3, 0x24, 0x30, 0xd6, 0x54, 0x76, 0x0b, 0x97, 0xbb, 0x0b,
	0x9f, 0xd3, 0xc7, 0x70, 0x74, 0xcb, 0x8e, 0xf0, 0x0e, 0xe4, 0x6d, 0xef, 0xb2, 0xe1, 0x95, 0x72,
	0x18, 0xa0, 0xf0, 0xe6, 0xdc, 0x6e, 0x36, 0xae, 0x4a, 0xa8, 0xae, 0xff, 0x98, 0xe8, 0xe8, 0x66,
	0xa2, 0xa3, 0x5f, 0x13, 0x1d, 0x7d, 0x99, 0xea, 0xb9, 0x9b, 0xa9, 0x9e, 0xfb, 0x39, 0xd5, 0x73,
	0x6f, 0xb7, 0xac, 0x17, 0x83, 0x56, 0xab, 0xc0, 0x7e, 0x96, 0x27, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x29, 0x80, 0xa7, 0x77, 0xa8, 0x07, 0x00, 0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloseAt != nil {
		{
			size, err := m.CloseAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MinPrice != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.MinPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.ItemCategory != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ItemCategory))
		i--
		dAtA[i] = 0x28
	}
	if m.ItemID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ItemID))
		i--
		dAtA[i] = 0x20
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PlayerID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuctionBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bid != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x30
	}
	if m.PartialBid != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PartialBid))
		i--
		dAtA[i] = 0x28
	}
	if m.AuctionID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionID))
		i--
		dAtA[i] = 0x20
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PlayerID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllAuctionsByCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAuctionsByCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAuctionsByCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemCategory != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ItemCategory))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllAuctionsByCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAuctionsByCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAuctionsByCategoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllPlayerAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllPlayerAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllPlayerAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllPlayerAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllPlayerAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllPlayerAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllPlayerOfferAuctionsByCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllPlayerOfferAuctionsByCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllPlayerOfferAuctionsByCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemCategory != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ItemCategory))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllPlayerOfferAuctionsByCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllPlayerOfferAuctionsByCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllPlayerOfferAuctionsByCategoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAuctionByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuctionByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuctionByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuctionByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuctionByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuctionByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinPrice != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.MinPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.ItemCategory != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ItemCategory))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ItemID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewAuctionBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewAuctionBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewAuctionBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bid != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.AuctionID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewAuctionBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewAuctionBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewAuctionBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAuctionBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuctionBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuctionBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionID != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAuctionBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuctionBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuctionBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllBids) > 0 {
		for iNdEx := len(m.AllBids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllBids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastBid != nil {
		{
			size, err := m.LastBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalBid != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.TotalBid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAuction(uint64(m.ID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovAuction(uint64(m.PlayerID))
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.ItemID != 0 {
		n += 1 + sovAuction(uint64(m.ItemID))
	}
	if m.ItemCategory != 0 {
		n += 1 + sovAuction(uint64(m.ItemCategory))
	}
	if m.MinPrice != 0 {
		n += 1 + sovAuction(uint64(m.MinPrice))
	}
	if m.CloseAt != nil {
		l = m.CloseAt.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *AuctionBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAuction(uint64(m.ID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovAuction(uint64(m.PlayerID))
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.AuctionID != 0 {
		n += 1 + sovAuction(uint64(m.AuctionID))
	}
	if m.PartialBid != 0 {
		n += 1 + sovAuction(uint64(m.PartialBid))
	}
	if m.Bid != 0 {
		n += 1 + sovAuction(uint64(m.Bid))
	}
	return n
}

func (m *GetAllAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func (m *GetAllAuctionsByCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAuction(uint64(m.PlayerID))
	}
	if m.ItemCategory != 0 {
		n += 1 + sovAuction(uint64(m.ItemCategory))
	}
	return n
}

func (m *GetAllAuctionsByCategoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func (m *GetAllPlayerAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAuction(uint64(m.PlayerID))
	}
	return n
}

func (m *GetAllPlayerAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func (m *GetAllPlayerOfferAuctionsByCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAuction(uint64(m.PlayerID))
	}
	if m.ItemCategory != 0 {
		n += 1 + sovAuction(uint64(m.ItemCategory))
	}
	return n
}

func (m *GetAllPlayerOfferAuctionsByCategoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func (m *GetAuctionByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionID != 0 {
		n += 1 + sovAuction(uint64(m.AuctionID))
	}
	return n
}

func (m *GetAuctionByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *NewAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAuction(uint64(m.PlayerID))
	}
	if m.ItemID != 0 {
		n += 1 + sovAuction(uint64(m.ItemID))
	}
	if m.ItemCategory != 0 {
		n += 1 + sovAuction(uint64(m.ItemCategory))
	}
	if m.MinPrice != 0 {
		n += 1 + sovAuction(uint64(m.MinPrice))
	}
	return n
}

func (m *NewAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewAuctionBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionID != 0 {
		n += 1 + sovAuction(uint64(m.AuctionID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovAuction(uint64(m.PlayerID))
	}
	if m.Bid != 0 {
		n += 1 + sovAuction(uint64(m.Bid))
	}
	return n
}

func (m *NewAuctionBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAuctionBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionID != 0 {
		n += 1 + sovAuction(uint64(m.AuctionID))
	}
	return n
}

func (m *GetAuctionBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalBid != 0 {
		n += 1 + sovAuction(uint64(m.TotalBid))
	}
	if m.LastBid != nil {
		l = m.LastBid.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	if len(m.AllBids) > 0 {
		for _, e := range m.AllBids {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCategory", wireType)
			}
			m.ItemCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCategory |= AuctionItemCategoryEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			m.MinPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseAt == nil {
				m.CloseAt = &types.Timestamp{}
			}
			if err := m.CloseAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionID", wireType)
			}
			m.AuctionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialBid", wireType)
			}
			m.PartialBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartialBid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, &Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAuctionsByCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAuctionsByCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAuctionsByCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCategory", wireType)
			}
			m.ItemCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCategory |= AuctionItemCategoryEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAuctionsByCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAuctionsByCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAuctionsByCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, &Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllPlayerAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllPlayerAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllPlayerAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllPlayerAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllPlayerAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllPlayerAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, &Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllPlayerOfferAuctionsByCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllPlayerOfferAuctionsByCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllPlayerOfferAuctionsByCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCategory", wireType)
			}
			m.ItemCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCategory |= AuctionItemCategoryEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllPlayerOfferAuctionsByCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllPlayerOfferAuctionsByCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllPlayerOfferAuctionsByCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, &Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuctionByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuctionByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuctionByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionID", wireType)
			}
			m.AuctionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuctionByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuctionByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuctionByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCategory", wireType)
			}
			m.ItemCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCategory |= AuctionItemCategoryEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			m.MinPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewAuctionBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewAuctionBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewAuctionBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionID", wireType)
			}
			m.AuctionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewAuctionBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewAuctionBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewAuctionBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuctionBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuctionBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuctionBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionID", wireType)
			}
			m.AuctionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuctionBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuctionBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuctionBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBid", wireType)
			}
			m.TotalBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBid == nil {
				m.LastBid = &AuctionBid{}
			}
			if err := m.LastBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllBids = append(m.AllBids, &AuctionBid{})
			if err := m.AllBids[len(m.AllBids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
