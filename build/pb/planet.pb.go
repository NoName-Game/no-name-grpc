// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/planet.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Planet struct {
	ID             uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	X              float64       `protobuf:"fixed64,3,opt,name=X,proto3" json:"X,omitempty"`
	Y              float64       `protobuf:"fixed64,4,opt,name=Y,proto3" json:"Y,omitempty"`
	Z              float64       `protobuf:"fixed64,5,opt,name=Z,proto3" json:"Z,omitempty"`
	HashPosition   string        `protobuf:"bytes,6,opt,name=HashPosition,proto3" json:"HashPosition,omitempty"`
	PlayerID       uint32        `protobuf:"varint,7,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlanetBiomeID  uint32        `protobuf:"varint,8,opt,name=PlanetBiomeID,proto3" json:"PlanetBiomeID,omitempty"`
	PlanetBiome    *PlanetBiome  `protobuf:"bytes,9,opt,name=PlanetBiome,proto3" json:"PlanetBiome,omitempty"`
	PlanetMapID    uint32        `protobuf:"varint,12,opt,name=PlanetMapID,proto3" json:"PlanetMapID,omitempty"`
	PlanetMap      *PlanetMap    `protobuf:"bytes,13,opt,name=PlanetMap,proto3" json:"PlanetMap,omitempty"`
	Resources      []*Resource   `protobuf:"bytes,14,rep,name=Resources,proto3" json:"Resources,omitempty"`
	Safe           bool          `protobuf:"varint,15,opt,name=Safe,proto3" json:"Safe,omitempty"`
	PlanetSystemID uint32        `protobuf:"varint,16,opt,name=PlanetSystemID,proto3" json:"PlanetSystemID,omitempty"`
	PlanetSystem   *PlanetSystem `protobuf:"bytes,17,opt,name=PlanetSystem,proto3" json:"PlanetSystem,omitempty"`
}

func (m *Planet) Reset()         { *m = Planet{} }
func (m *Planet) String() string { return proto.CompactTextString(m) }
func (*Planet) ProtoMessage()    {}
func (*Planet) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{0}
}
func (m *Planet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Planet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Planet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Planet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Planet.Merge(m, src)
}
func (m *Planet) XXX_Size() int {
	return m.Size()
}
func (m *Planet) XXX_DiscardUnknown() {
	xxx_messageInfo_Planet.DiscardUnknown(m)
}

var xxx_messageInfo_Planet proto.InternalMessageInfo

func (m *Planet) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Planet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Planet) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Planet) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Planet) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Planet) GetHashPosition() string {
	if m != nil {
		return m.HashPosition
	}
	return ""
}

func (m *Planet) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *Planet) GetPlanetBiomeID() uint32 {
	if m != nil {
		return m.PlanetBiomeID
	}
	return 0
}

func (m *Planet) GetPlanetBiome() *PlanetBiome {
	if m != nil {
		return m.PlanetBiome
	}
	return nil
}

func (m *Planet) GetPlanetMapID() uint32 {
	if m != nil {
		return m.PlanetMapID
	}
	return 0
}

func (m *Planet) GetPlanetMap() *PlanetMap {
	if m != nil {
		return m.PlanetMap
	}
	return nil
}

func (m *Planet) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Planet) GetSafe() bool {
	if m != nil {
		return m.Safe
	}
	return false
}

func (m *Planet) GetPlanetSystemID() uint32 {
	if m != nil {
		return m.PlanetSystemID
	}
	return 0
}

func (m *Planet) GetPlanetSystem() *PlanetSystem {
	if m != nil {
		return m.PlanetSystem
	}
	return nil
}

// GetPlanetByCoordinate
type GetPlanetByCoordinateRequest struct {
	X float64 `protobuf:"fixed64,1,opt,name=X,proto3" json:"X,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=Z,proto3" json:"Z,omitempty"`
}

func (m *GetPlanetByCoordinateRequest) Reset()         { *m = GetPlanetByCoordinateRequest{} }
func (m *GetPlanetByCoordinateRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByCoordinateRequest) ProtoMessage()    {}
func (*GetPlanetByCoordinateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{1}
}
func (m *GetPlanetByCoordinateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByCoordinateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByCoordinateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByCoordinateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByCoordinateRequest.Merge(m, src)
}
func (m *GetPlanetByCoordinateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByCoordinateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByCoordinateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByCoordinateRequest proto.InternalMessageInfo

func (m *GetPlanetByCoordinateRequest) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GetPlanetByCoordinateRequest) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *GetPlanetByCoordinateRequest) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type GetPlanetByCoordinateResponse struct {
	Planet *Planet `protobuf:"bytes,1,opt,name=Planet,proto3" json:"Planet,omitempty"`
}

func (m *GetPlanetByCoordinateResponse) Reset()         { *m = GetPlanetByCoordinateResponse{} }
func (m *GetPlanetByCoordinateResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByCoordinateResponse) ProtoMessage()    {}
func (*GetPlanetByCoordinateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{2}
}
func (m *GetPlanetByCoordinateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByCoordinateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByCoordinateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByCoordinateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByCoordinateResponse.Merge(m, src)
}
func (m *GetPlanetByCoordinateResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByCoordinateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByCoordinateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByCoordinateResponse proto.InternalMessageInfo

func (m *GetPlanetByCoordinateResponse) GetPlanet() *Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

// GetPlanetByID
type GetPlanetByIDRequest struct {
	PlanetID uint32 `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *GetPlanetByIDRequest) Reset()         { *m = GetPlanetByIDRequest{} }
func (m *GetPlanetByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByIDRequest) ProtoMessage()    {}
func (*GetPlanetByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{3}
}
func (m *GetPlanetByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByIDRequest.Merge(m, src)
}
func (m *GetPlanetByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByIDRequest proto.InternalMessageInfo

func (m *GetPlanetByIDRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type GetPlanetByIDResponse struct {
	Planet *Planet `protobuf:"bytes,1,opt,name=Planet,proto3" json:"Planet,omitempty"`
}

func (m *GetPlanetByIDResponse) Reset()         { *m = GetPlanetByIDResponse{} }
func (m *GetPlanetByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByIDResponse) ProtoMessage()    {}
func (*GetPlanetByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{4}
}
func (m *GetPlanetByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByIDResponse.Merge(m, src)
}
func (m *GetPlanetByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByIDResponse proto.InternalMessageInfo

func (m *GetPlanetByIDResponse) GetPlanet() *Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

// GetPlanetByName
type GetPlanetByNameRequest struct {
	PlanetName string `protobuf:"bytes,1,opt,name=PlanetName,proto3" json:"PlanetName,omitempty"`
}

func (m *GetPlanetByNameRequest) Reset()         { *m = GetPlanetByNameRequest{} }
func (m *GetPlanetByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByNameRequest) ProtoMessage()    {}
func (*GetPlanetByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{5}
}
func (m *GetPlanetByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByNameRequest.Merge(m, src)
}
func (m *GetPlanetByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByNameRequest proto.InternalMessageInfo

func (m *GetPlanetByNameRequest) GetPlanetName() string {
	if m != nil {
		return m.PlanetName
	}
	return ""
}

type GetPlanetByNameResponse struct {
	Planet *Planet `protobuf:"bytes,1,opt,name=Planet,proto3" json:"Planet,omitempty"`
}

func (m *GetPlanetByNameResponse) Reset()         { *m = GetPlanetByNameResponse{} }
func (m *GetPlanetByNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByNameResponse) ProtoMessage()    {}
func (*GetPlanetByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{6}
}
func (m *GetPlanetByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByNameResponse.Merge(m, src)
}
func (m *GetPlanetByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByNameResponse proto.InternalMessageInfo

func (m *GetPlanetByNameResponse) GetPlanet() *Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

// GetPlanetByMapID
type GetPlanetByMapIDRequest struct {
	MapID uint32 `protobuf:"varint,1,opt,name=MapID,proto3" json:"MapID,omitempty"`
}

func (m *GetPlanetByMapIDRequest) Reset()         { *m = GetPlanetByMapIDRequest{} }
func (m *GetPlanetByMapIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByMapIDRequest) ProtoMessage()    {}
func (*GetPlanetByMapIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{7}
}
func (m *GetPlanetByMapIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByMapIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByMapIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByMapIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByMapIDRequest.Merge(m, src)
}
func (m *GetPlanetByMapIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByMapIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByMapIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByMapIDRequest proto.InternalMessageInfo

func (m *GetPlanetByMapIDRequest) GetMapID() uint32 {
	if m != nil {
		return m.MapID
	}
	return 0
}

type GetPlanetByMapIDResponse struct {
	Planet *Planet `protobuf:"bytes,1,opt,name=Planet,proto3" json:"Planet,omitempty"`
}

func (m *GetPlanetByMapIDResponse) Reset()         { *m = GetPlanetByMapIDResponse{} }
func (m *GetPlanetByMapIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlanetByMapIDResponse) ProtoMessage()    {}
func (*GetPlanetByMapIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{8}
}
func (m *GetPlanetByMapIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlanetByMapIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlanetByMapIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlanetByMapIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlanetByMapIDResponse.Merge(m, src)
}
func (m *GetPlanetByMapIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlanetByMapIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlanetByMapIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlanetByMapIDResponse proto.InternalMessageInfo

func (m *GetPlanetByMapIDResponse) GetPlanet() *Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

// GetExpansionInfo
type GetExpansionInfoRequest struct {
}

func (m *GetExpansionInfoRequest) Reset()         { *m = GetExpansionInfoRequest{} }
func (m *GetExpansionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetExpansionInfoRequest) ProtoMessage()    {}
func (*GetExpansionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{9}
}
func (m *GetExpansionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExpansionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExpansionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExpansionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExpansionInfoRequest.Merge(m, src)
}
func (m *GetExpansionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetExpansionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExpansionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExpansionInfoRequest proto.InternalMessageInfo

type GetExpansionInfoResponse struct {
	MissPlanetsCounter   uint32        `protobuf:"varint,1,opt,name=MissPlanetsCounter,proto3" json:"MissPlanetsCounter,omitempty"`
	TotalPlanetsCounter  uint32        `protobuf:"varint,2,opt,name=TotalPlanetsCounter,proto3" json:"TotalPlanetsCounter,omitempty"`
	LastSystemDiscovered *PlanetSystem `protobuf:"bytes,3,opt,name=LastSystemDiscovered,proto3" json:"LastSystemDiscovered,omitempty"`
}

func (m *GetExpansionInfoResponse) Reset()         { *m = GetExpansionInfoResponse{} }
func (m *GetExpansionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetExpansionInfoResponse) ProtoMessage()    {}
func (*GetExpansionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{10}
}
func (m *GetExpansionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExpansionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExpansionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExpansionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExpansionInfoResponse.Merge(m, src)
}
func (m *GetExpansionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetExpansionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExpansionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExpansionInfoResponse proto.InternalMessageInfo

func (m *GetExpansionInfoResponse) GetMissPlanetsCounter() uint32 {
	if m != nil {
		return m.MissPlanetsCounter
	}
	return 0
}

func (m *GetExpansionInfoResponse) GetTotalPlanetsCounter() uint32 {
	if m != nil {
		return m.TotalPlanetsCounter
	}
	return 0
}

func (m *GetExpansionInfoResponse) GetLastSystemDiscovered() *PlanetSystem {
	if m != nil {
		return m.LastSystemDiscovered
	}
	return nil
}

// GetSafePlanets
type GetSafePlanetsRequest struct {
}

func (m *GetSafePlanetsRequest) Reset()         { *m = GetSafePlanetsRequest{} }
func (m *GetSafePlanetsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSafePlanetsRequest) ProtoMessage()    {}
func (*GetSafePlanetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{11}
}
func (m *GetSafePlanetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSafePlanetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSafePlanetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSafePlanetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSafePlanetsRequest.Merge(m, src)
}
func (m *GetSafePlanetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSafePlanetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSafePlanetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSafePlanetsRequest proto.InternalMessageInfo

type GetSafePlanetsResponse struct {
	SafePlanets []*Planet `protobuf:"bytes,1,rep,name=SafePlanets,proto3" json:"SafePlanets,omitempty"`
}

func (m *GetSafePlanetsResponse) Reset()         { *m = GetSafePlanetsResponse{} }
func (m *GetSafePlanetsResponse) String() string { return proto.CompactTextString(m) }
func (*GetSafePlanetsResponse) ProtoMessage()    {}
func (*GetSafePlanetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d8275d0fe35fcc, []int{12}
}
func (m *GetSafePlanetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSafePlanetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSafePlanetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSafePlanetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSafePlanetsResponse.Merge(m, src)
}
func (m *GetSafePlanetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSafePlanetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSafePlanetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSafePlanetsResponse proto.InternalMessageInfo

func (m *GetSafePlanetsResponse) GetSafePlanets() []*Planet {
	if m != nil {
		return m.SafePlanets
	}
	return nil
}

func init() {
	proto.RegisterType((*Planet)(nil), "planet.Planet")
	proto.RegisterType((*GetPlanetByCoordinateRequest)(nil), "planet.GetPlanetByCoordinateRequest")
	proto.RegisterType((*GetPlanetByCoordinateResponse)(nil), "planet.GetPlanetByCoordinateResponse")
	proto.RegisterType((*GetPlanetByIDRequest)(nil), "planet.GetPlanetByIDRequest")
	proto.RegisterType((*GetPlanetByIDResponse)(nil), "planet.GetPlanetByIDResponse")
	proto.RegisterType((*GetPlanetByNameRequest)(nil), "planet.GetPlanetByNameRequest")
	proto.RegisterType((*GetPlanetByNameResponse)(nil), "planet.GetPlanetByNameResponse")
	proto.RegisterType((*GetPlanetByMapIDRequest)(nil), "planet.GetPlanetByMapIDRequest")
	proto.RegisterType((*GetPlanetByMapIDResponse)(nil), "planet.GetPlanetByMapIDResponse")
	proto.RegisterType((*GetExpansionInfoRequest)(nil), "planet.GetExpansionInfoRequest")
	proto.RegisterType((*GetExpansionInfoResponse)(nil), "planet.GetExpansionInfoResponse")
	proto.RegisterType((*GetSafePlanetsRequest)(nil), "planet.GetSafePlanetsRequest")
	proto.RegisterType((*GetSafePlanetsResponse)(nil), "planet.GetSafePlanetsResponse")
}

func init() { proto.RegisterFile("proto/planet.proto", fileDescriptor_68d8275d0fe35fcc) }

var fileDescriptor_68d8275d0fe35fcc = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0x66, 0x16, 0x58, 0xd9, 0xb7, 0xcb, 0xaa, 0xe3, 0x02, 0x03, 0x6a, 0xd3, 0x34, 0xc6, 0xf4,
	0x54, 0xc8, 0x72, 0x31, 0xe1, 0x40, 0x84, 0x1a, 0xa8, 0x11, 0x25, 0xc5, 0x03, 0xec, 0xc5, 0x14,
	0x18, 0x62, 0x13, 0xb6, 0x53, 0x3b, 0xc5, 0xc8, 0xbf, 0xf0, 0x67, 0x79, 0x31, 0xe1, 0xe8, 0xd1,
	0xb0, 0x3f, 0x44, 0xd3, 0x37, 0xd3, 0x32, 0x5d, 0xd6, 0x98, 0xbd, 0xf5, 0x7d, 0xdf, 0x7b, 0xdf,
	0x7b, 0xf3, 0xe6, 0x9b, 0x02, 0x4d, 0x33, 0x91, 0x8b, 0xf5, 0xf4, 0x32, 0x4a, 0x78, 0xee, 0x61,
	0x40, 0x9b, 0x2a, 0x5a, 0x63, 0x26, 0xf7, 0xe9, 0x34, 0x16, 0x43, 0xae, 0x32, 0xd6, 0x96, 0x6b,
	0xcc, 0x30, 0x4a, 0x35, 0xbe, 0x5a, 0xc3, 0xe5, 0xb5, 0xcc, 0xf9, 0x50, 0x53, 0x3d, 0x45, 0x65,
	0x5c, 0x8a, 0xab, 0xec, 0x4c, 0x0b, 0x39, 0x7f, 0x66, 0xa1, 0x79, 0x88, 0xd9, 0xb4, 0x0b, 0x8d,
	0xc0, 0x67, 0xc4, 0x26, 0xee, 0x62, 0xd8, 0x08, 0x7c, 0x4a, 0x61, 0xee, 0x7d, 0x34, 0xe4, 0xac,
	0x61, 0x13, 0xb7, 0x15, 0xe2, 0x37, 0xed, 0x00, 0x39, 0x66, 0xb3, 0x36, 0x71, 0x49, 0x48, 0x8e,
	0x8b, 0xe8, 0x84, 0xcd, 0xa9, 0xe8, 0xa4, 0x88, 0x06, 0x6c, 0x5e, 0x45, 0x03, 0xea, 0x40, 0x67,
	0x3f, 0x92, 0x9f, 0x0f, 0x85, 0x8c, 0xf3, 0x58, 0x24, 0xac, 0x89, 0x2a, 0x35, 0x8c, 0xae, 0xc1,
	0xc2, 0xe1, 0x65, 0x74, 0xcd, 0xb3, 0xc0, 0x67, 0x0f, 0xb0, 0x6f, 0x15, 0xd3, 0x17, 0xb0, 0xa8,
	0xe6, 0xda, 0x29, 0x8e, 0x1d, 0xf8, 0x6c, 0x01, 0x13, 0xea, 0x20, 0xdd, 0x82, 0xb6, 0x01, 0xb0,
	0x96, 0x4d, 0xdc, 0x76, 0x7f, 0xd5, 0xab, 0x6d, 0xcc, 0x48, 0x08, 0xcd, 0x6c, 0x6a, 0x97, 0xc5,
	0x07, 0x51, 0x1a, 0xf8, 0xac, 0x83, 0x0d, 0x4c, 0x88, 0x6e, 0x42, 0xab, 0x0a, 0xd9, 0x22, 0x8a,
	0x2f, 0x79, 0xc6, 0xd2, 0x2b, 0x32, 0xbc, 0xcb, 0xa3, 0x1b, 0xd0, 0x0a, 0xf5, 0x92, 0x25, 0xeb,
	0xda, 0xb3, 0x6e, 0xbb, 0x4f, 0xbd, 0x6a, 0xed, 0x25, 0x15, 0xde, 0x25, 0x15, 0x9b, 0x3e, 0x8a,
	0x2e, 0x38, 0x7b, 0x68, 0x13, 0x77, 0x21, 0xc4, 0x6f, 0xfa, 0x12, 0xba, 0x4a, 0xf2, 0x08, 0x2f,
	0x31, 0xf0, 0xd9, 0x23, 0x9c, 0x6f, 0x0c, 0xa5, 0xdb, 0xd0, 0x31, 0x11, 0xf6, 0x18, 0xa7, 0x7c,
	0xea, 0xd5, 0x2d, 0x60, 0xa6, 0x84, 0xb5, 0x02, 0x67, 0x1f, 0x9e, 0xed, 0xf1, 0x5c, 0xef, 0xe5,
	0x7a, 0x57, 0x88, 0xec, 0x3c, 0x4e, 0xa2, 0x9c, 0x87, 0xfc, 0xcb, 0x15, 0x97, 0xb9, 0xba, 0x72,
	0x52, 0xbb, 0xf2, 0x46, 0xed, 0xca, 0xb5, 0x1d, 0x06, 0xce, 0x1e, 0x3c, 0xff, 0x87, 0x92, 0x4c,
	0x45, 0x22, 0x8b, 0x33, 0x69, 0xaf, 0xa1, 0x5e, 0xbb, 0xdf, 0xd5, 0x53, 0xea, 0xf1, 0x42, 0xcd,
	0x3a, 0x7d, 0xe8, 0x19, 0x42, 0x81, 0x5f, 0x8e, 0xa2, 0xfc, 0x92, 0xf0, 0xbc, 0xf2, 0x69, 0x15,
	0x3b, 0xdb, 0xb0, 0x34, 0x56, 0x33, 0x65, 0xd3, 0x57, 0xb0, 0x6c, 0x08, 0x14, 0x6e, 0x2f, 0xdb,
	0x5a, 0x00, 0x0a, 0xc6, 0xe7, 0x40, 0xd0, 0xc8, 0x06, 0xe2, 0xbc, 0x86, 0x95, 0x7b, 0x95, 0x53,
	0x36, 0x5f, 0xaf, 0x49, 0xa0, 0xf9, 0xca, 0xee, 0x3d, 0x98, 0x57, 0xfe, 0x54, 0x27, 0x56, 0x81,
	0xb3, 0x03, 0xec, 0x7e, 0xc1, 0x94, 0x4d, 0x57, 0xb1, 0xe9, 0x9b, 0x6f, 0x69, 0x94, 0xc8, 0x58,
	0x24, 0x41, 0x72, 0x21, 0x74, 0x53, 0xe7, 0x27, 0x41, 0xfd, 0x31, 0x4e, 0xeb, 0x7b, 0x40, 0x0f,
	0x62, 0x29, 0x95, 0x8a, 0xdc, 0x15, 0x57, 0x49, 0xce, 0x33, 0x3d, 0xde, 0x04, 0x86, 0x6e, 0xc0,
	0x93, 0x8f, 0x22, 0x8f, 0x2e, 0xc7, 0x0a, 0x1a, 0x58, 0x30, 0x89, 0xa2, 0x1f, 0xa0, 0xf7, 0x2e,
	0x92, 0xda, 0xa1, 0x7e, 0x2c, 0xcf, 0xc4, 0x57, 0x9e, 0xf1, 0x73, 0xb4, 0xda, 0x7f, 0xcc, 0x3d,
	0xb1, 0xd0, 0x59, 0x41, 0x77, 0x14, 0x0f, 0x4b, 0x77, 0x2a, 0x0f, 0xfa, 0x16, 0x6f, 0xbd, 0x46,
	0xe8, 0x53, 0x6e, 0x40, 0xdb, 0x80, 0x19, 0xc1, 0x87, 0x3c, 0xbe, 0x4a, 0x33, 0x65, 0xc7, 0xfa,
	0x71, 0x6b, 0x91, 0x9b, 0x5b, 0x8b, 0xfc, 0xbe, 0xb5, 0xc8, 0xf7, 0x91, 0x35, 0x73, 0x33, 0xb2,
	0x66, 0x7e, 0x8d, 0xac, 0x99, 0xc1, 0x9c, 0xb7, 0x95, 0x9e, 0x9e, 0x36, 0xf1, 0x97, 0xbb, 0xf9,
	0x37, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xc1, 0xfc, 0x0e, 0xf3, 0x05, 0x00, 0x00,
}

func (m *Planet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Planet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Planet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetSystem != nil {
		{
			size, err := m.PlanetSystem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.PlanetSystemID != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.PlanetSystemID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Safe {
		i--
		if m.Safe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlanet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.PlanetMap != nil {
		{
			size, err := m.PlanetMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.PlanetMapID != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.PlanetMapID))
		i--
		dAtA[i] = 0x60
	}
	if m.PlanetBiome != nil {
		{
			size, err := m.PlanetBiome.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PlanetBiomeID != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.PlanetBiomeID))
		i--
		dAtA[i] = 0x40
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x38
	}
	if len(m.HashPosition) > 0 {
		i -= len(m.HashPosition)
		copy(dAtA[i:], m.HashPosition)
		i = encodeVarintPlanet(dAtA, i, uint64(len(m.HashPosition)))
		i--
		dAtA[i] = 0x32
	}
	if m.Z != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Z))))
		i--
		dAtA[i] = 0x29
	}
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x21
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlanet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByCoordinateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByCoordinateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByCoordinateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Z != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Z))))
		i--
		dAtA[i] = 0x19
	}
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x11
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByCoordinateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByCoordinateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByCoordinateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Planet != nil {
		{
			size, err := m.Planet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Planet != nil {
		{
			size, err := m.Planet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanetName) > 0 {
		i -= len(m.PlanetName)
		copy(dAtA[i:], m.PlanetName)
		i = encodeVarintPlanet(dAtA, i, uint64(len(m.PlanetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Planet != nil {
		{
			size, err := m.Planet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByMapIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByMapIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByMapIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapID != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.MapID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlanetByMapIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlanetByMapIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlanetByMapIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Planet != nil {
		{
			size, err := m.Planet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetExpansionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpansionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExpansionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetExpansionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpansionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExpansionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSystemDiscovered != nil {
		{
			size, err := m.LastSystemDiscovered.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlanet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalPlanetsCounter != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.TotalPlanetsCounter))
		i--
		dAtA[i] = 0x10
	}
	if m.MissPlanetsCounter != 0 {
		i = encodeVarintPlanet(dAtA, i, uint64(m.MissPlanetsCounter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSafePlanetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSafePlanetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSafePlanetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetSafePlanetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSafePlanetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSafePlanetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SafePlanets) > 0 {
		for iNdEx := len(m.SafePlanets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SafePlanets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlanet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlanet(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlanet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Planet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlanet(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlanet(uint64(l))
	}
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Z != 0 {
		n += 9
	}
	l = len(m.HashPosition)
	if l > 0 {
		n += 1 + l + sovPlanet(uint64(l))
	}
	if m.PlayerID != 0 {
		n += 1 + sovPlanet(uint64(m.PlayerID))
	}
	if m.PlanetBiomeID != 0 {
		n += 1 + sovPlanet(uint64(m.PlanetBiomeID))
	}
	if m.PlanetBiome != nil {
		l = m.PlanetBiome.Size()
		n += 1 + l + sovPlanet(uint64(l))
	}
	if m.PlanetMapID != 0 {
		n += 1 + sovPlanet(uint64(m.PlanetMapID))
	}
	if m.PlanetMap != nil {
		l = m.PlanetMap.Size()
		n += 1 + l + sovPlanet(uint64(l))
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovPlanet(uint64(l))
		}
	}
	if m.Safe {
		n += 2
	}
	if m.PlanetSystemID != 0 {
		n += 2 + sovPlanet(uint64(m.PlanetSystemID))
	}
	if m.PlanetSystem != nil {
		l = m.PlanetSystem.Size()
		n += 2 + l + sovPlanet(uint64(l))
	}
	return n
}

func (m *GetPlanetByCoordinateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Z != 0 {
		n += 9
	}
	return n
}

func (m *GetPlanetByCoordinateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != nil {
		l = m.Planet.Size()
		n += 1 + l + sovPlanet(uint64(l))
	}
	return n
}

func (m *GetPlanetByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovPlanet(uint64(m.PlanetID))
	}
	return n
}

func (m *GetPlanetByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != nil {
		l = m.Planet.Size()
		n += 1 + l + sovPlanet(uint64(l))
	}
	return n
}

func (m *GetPlanetByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanetName)
	if l > 0 {
		n += 1 + l + sovPlanet(uint64(l))
	}
	return n
}

func (m *GetPlanetByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != nil {
		l = m.Planet.Size()
		n += 1 + l + sovPlanet(uint64(l))
	}
	return n
}

func (m *GetPlanetByMapIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapID != 0 {
		n += 1 + sovPlanet(uint64(m.MapID))
	}
	return n
}

func (m *GetPlanetByMapIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != nil {
		l = m.Planet.Size()
		n += 1 + l + sovPlanet(uint64(l))
	}
	return n
}

func (m *GetExpansionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetExpansionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissPlanetsCounter != 0 {
		n += 1 + sovPlanet(uint64(m.MissPlanetsCounter))
	}
	if m.TotalPlanetsCounter != 0 {
		n += 1 + sovPlanet(uint64(m.TotalPlanetsCounter))
	}
	if m.LastSystemDiscovered != nil {
		l = m.LastSystemDiscovered.Size()
		n += 1 + l + sovPlanet(uint64(l))
	}
	return n
}

func (m *GetSafePlanetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSafePlanetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SafePlanets) > 0 {
		for _, e := range m.SafePlanets {
			l = e.Size()
			n += 1 + l + sovPlanet(uint64(l))
		}
	}
	return n
}

func sovPlanet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlanet(x uint64) (n int) {
	return sovPlanet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Planet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Planet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Planet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Z = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashPosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetBiomeID", wireType)
			}
			m.PlanetBiomeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetBiomeID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetBiome", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanetBiome == nil {
				m.PlanetBiome = &PlanetBiome{}
			}
			if err := m.PlanetBiome.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetMapID", wireType)
			}
			m.PlanetMapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetMapID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanetMap == nil {
				m.PlanetMap = &PlanetMap{}
			}
			if err := m.PlanetMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Safe = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetSystemID", wireType)
			}
			m.PlanetSystemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetSystemID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetSystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanetSystem == nil {
				m.PlanetSystem = &PlanetSystem{}
			}
			if err := m.PlanetSystem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByCoordinateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByCoordinateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByCoordinateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Z = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByCoordinateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByCoordinateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByCoordinateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Planet == nil {
				m.Planet = &Planet{}
			}
			if err := m.Planet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Planet == nil {
				m.Planet = &Planet{}
			}
			if err := m.Planet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Planet == nil {
				m.Planet = &Planet{}
			}
			if err := m.Planet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByMapIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByMapIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByMapIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapID", wireType)
			}
			m.MapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlanetByMapIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlanetByMapIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlanetByMapIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Planet == nil {
				m.Planet = &Planet{}
			}
			if err := m.Planet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpansionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpansionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpansionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpansionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpansionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpansionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissPlanetsCounter", wireType)
			}
			m.MissPlanetsCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissPlanetsCounter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPlanetsCounter", wireType)
			}
			m.TotalPlanetsCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPlanetsCounter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSystemDiscovered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSystemDiscovered == nil {
				m.LastSystemDiscovered = &PlanetSystem{}
			}
			if err := m.LastSystemDiscovered.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSafePlanetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSafePlanetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSafePlanetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSafePlanetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSafePlanetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSafePlanetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafePlanets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlanet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlanet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SafePlanets = append(m.SafePlanets, &Planet{})
			if err := m.SafePlanets[len(m.SafePlanets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlanet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlanet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlanet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlanet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlanet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlanet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlanet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlanet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlanet = fmt.Errorf("proto: unexpected end of group")
)
