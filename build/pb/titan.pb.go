// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/titan.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Titan struct {
	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PlanetID       uint32 `protobuf:"varint,3,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
	PlanetSystemID uint32 `protobuf:"varint,4,opt,name=PlanetSystemID,proto3" json:"PlanetSystemID,omitempty"`
	DeadCounter    int32  `protobuf:"varint,5,opt,name=DeadCounter,proto3" json:"DeadCounter,omitempty"`
	LifeMax        int32  `protobuf:"varint,8,opt,name=LifeMax,proto3" json:"LifeMax,omitempty"`
	LifePoint      int32  `protobuf:"varint,9,opt,name=LifePoint,proto3" json:"LifePoint,omitempty"`
}

func (m *Titan) Reset()         { *m = Titan{} }
func (m *Titan) String() string { return proto.CompactTextString(m) }
func (*Titan) ProtoMessage()    {}
func (*Titan) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{0}
}
func (m *Titan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Titan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Titan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Titan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Titan.Merge(m, src)
}
func (m *Titan) XXX_Size() int {
	return m.Size()
}
func (m *Titan) XXX_DiscardUnknown() {
	xxx_messageInfo_Titan.DiscardUnknown(m)
}

var xxx_messageInfo_Titan proto.InternalMessageInfo

func (m *Titan) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Titan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Titan) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

func (m *Titan) GetPlanetSystemID() uint32 {
	if m != nil {
		return m.PlanetSystemID
	}
	return 0
}

func (m *Titan) GetDeadCounter() int32 {
	if m != nil {
		return m.DeadCounter
	}
	return 0
}

func (m *Titan) GetLifeMax() int32 {
	if m != nil {
		return m.LifeMax
	}
	return 0
}

func (m *Titan) GetLifePoint() int32 {
	if m != nil {
		return m.LifePoint
	}
	return 0
}

// GetTitanByID
type GetTitanByIDRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetTitanByIDRequest) Reset()         { *m = GetTitanByIDRequest{} }
func (m *GetTitanByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanByIDRequest) ProtoMessage()    {}
func (*GetTitanByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{1}
}
func (m *GetTitanByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByIDRequest.Merge(m, src)
}
func (m *GetTitanByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByIDRequest proto.InternalMessageInfo

func (m *GetTitanByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetTitanByIDResponse struct {
	Titan *Titan `protobuf:"bytes,1,opt,name=Titan,proto3" json:"Titan,omitempty"`
}

func (m *GetTitanByIDResponse) Reset()         { *m = GetTitanByIDResponse{} }
func (m *GetTitanByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanByIDResponse) ProtoMessage()    {}
func (*GetTitanByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{2}
}
func (m *GetTitanByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByIDResponse.Merge(m, src)
}
func (m *GetTitanByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByIDResponse proto.InternalMessageInfo

func (m *GetTitanByIDResponse) GetTitan() *Titan {
	if m != nil {
		return m.Titan
	}
	return nil
}

// GetTitanByPlanetID
type GetTitanByPlanetIDRequest struct {
	PlanetID uint32 `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *GetTitanByPlanetIDRequest) Reset()         { *m = GetTitanByPlanetIDRequest{} }
func (m *GetTitanByPlanetIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanByPlanetIDRequest) ProtoMessage()    {}
func (*GetTitanByPlanetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{3}
}
func (m *GetTitanByPlanetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByPlanetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByPlanetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByPlanetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByPlanetIDRequest.Merge(m, src)
}
func (m *GetTitanByPlanetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByPlanetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByPlanetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByPlanetIDRequest proto.InternalMessageInfo

func (m *GetTitanByPlanetIDRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type GetTitanByPlanetIDResponse struct {
	Titan *Titan `protobuf:"bytes,1,opt,name=Titan,proto3" json:"Titan,omitempty"`
}

func (m *GetTitanByPlanetIDResponse) Reset()         { *m = GetTitanByPlanetIDResponse{} }
func (m *GetTitanByPlanetIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanByPlanetIDResponse) ProtoMessage()    {}
func (*GetTitanByPlanetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{4}
}
func (m *GetTitanByPlanetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByPlanetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByPlanetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByPlanetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByPlanetIDResponse.Merge(m, src)
}
func (m *GetTitanByPlanetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByPlanetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByPlanetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByPlanetIDResponse proto.InternalMessageInfo

func (m *GetTitanByPlanetIDResponse) GetTitan() *Titan {
	if m != nil {
		return m.Titan
	}
	return nil
}

// GetTitanByPlanetSystemID
type GetTitanByPlanetSystemIDRequest struct {
	PlanetSystemID uint32 `protobuf:"varint,1,opt,name=PlanetSystemID,proto3" json:"PlanetSystemID,omitempty"`
}

func (m *GetTitanByPlanetSystemIDRequest) Reset()         { *m = GetTitanByPlanetSystemIDRequest{} }
func (m *GetTitanByPlanetSystemIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanByPlanetSystemIDRequest) ProtoMessage()    {}
func (*GetTitanByPlanetSystemIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{5}
}
func (m *GetTitanByPlanetSystemIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByPlanetSystemIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByPlanetSystemIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByPlanetSystemIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByPlanetSystemIDRequest.Merge(m, src)
}
func (m *GetTitanByPlanetSystemIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByPlanetSystemIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByPlanetSystemIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByPlanetSystemIDRequest proto.InternalMessageInfo

func (m *GetTitanByPlanetSystemIDRequest) GetPlanetSystemID() uint32 {
	if m != nil {
		return m.PlanetSystemID
	}
	return 0
}

type GetTitanByPlanetSystemIDResponse struct {
	Titan *Titan `protobuf:"bytes,1,opt,name=Titan,proto3" json:"Titan,omitempty"`
}

func (m *GetTitanByPlanetSystemIDResponse) Reset()         { *m = GetTitanByPlanetSystemIDResponse{} }
func (m *GetTitanByPlanetSystemIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanByPlanetSystemIDResponse) ProtoMessage()    {}
func (*GetTitanByPlanetSystemIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{6}
}
func (m *GetTitanByPlanetSystemIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByPlanetSystemIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByPlanetSystemIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByPlanetSystemIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByPlanetSystemIDResponse.Merge(m, src)
}
func (m *GetTitanByPlanetSystemIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByPlanetSystemIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByPlanetSystemIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByPlanetSystemIDResponse proto.InternalMessageInfo

func (m *GetTitanByPlanetSystemIDResponse) GetTitan() *Titan {
	if m != nil {
		return m.Titan
	}
	return nil
}

// GetTitanByName
type GetTitanByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *GetTitanByNameRequest) Reset()         { *m = GetTitanByNameRequest{} }
func (m *GetTitanByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanByNameRequest) ProtoMessage()    {}
func (*GetTitanByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{7}
}
func (m *GetTitanByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByNameRequest.Merge(m, src)
}
func (m *GetTitanByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByNameRequest proto.InternalMessageInfo

func (m *GetTitanByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetTitanByNameResponse struct {
	Titan *Titan `protobuf:"bytes,1,opt,name=Titan,proto3" json:"Titan,omitempty"`
}

func (m *GetTitanByNameResponse) Reset()         { *m = GetTitanByNameResponse{} }
func (m *GetTitanByNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanByNameResponse) ProtoMessage()    {}
func (*GetTitanByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{8}
}
func (m *GetTitanByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanByNameResponse.Merge(m, src)
}
func (m *GetTitanByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanByNameResponse proto.InternalMessageInfo

func (m *GetTitanByNameResponse) GetTitan() *Titan {
	if m != nil {
		return m.Titan
	}
	return nil
}

// HiTitan
type HitTitanRequest struct {
	TitanID       uint32 `protobuf:"varint,1,opt,name=TitanID,proto3" json:"TitanID,omitempty"`
	PlayerID      uint32 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	BodySelection int32  `protobuf:"varint,3,opt,name=BodySelection,proto3" json:"BodySelection,omitempty"`
	AbilityID     uint32 `protobuf:"varint,4,opt,name=AbilityID,proto3" json:"AbilityID,omitempty"`
}

func (m *HitTitanRequest) Reset()         { *m = HitTitanRequest{} }
func (m *HitTitanRequest) String() string { return proto.CompactTextString(m) }
func (*HitTitanRequest) ProtoMessage()    {}
func (*HitTitanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{9}
}
func (m *HitTitanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HitTitanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HitTitanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HitTitanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HitTitanRequest.Merge(m, src)
}
func (m *HitTitanRequest) XXX_Size() int {
	return m.Size()
}
func (m *HitTitanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HitTitanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HitTitanRequest proto.InternalMessageInfo

func (m *HitTitanRequest) GetTitanID() uint32 {
	if m != nil {
		return m.TitanID
	}
	return 0
}

func (m *HitTitanRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *HitTitanRequest) GetBodySelection() int32 {
	if m != nil {
		return m.BodySelection
	}
	return 0
}

func (m *HitTitanRequest) GetAbilityID() uint32 {
	if m != nil {
		return m.AbilityID
	}
	return 0
}

type HitTitanResponse struct {
	PlayerDie        bool  `protobuf:"varint,1,opt,name=PlayerDie,proto3" json:"PlayerDie,omitempty"`
	TitanDie         bool  `protobuf:"varint,2,opt,name=TitanDie,proto3" json:"TitanDie,omitempty"`
	DodgeAttack      bool  `protobuf:"varint,3,opt,name=DodgeAttack,proto3" json:"DodgeAttack,omitempty"`
	PlayerDamage     int32 `protobuf:"varint,4,opt,name=PlayerDamage,proto3" json:"PlayerDamage,omitempty"`
	PlayerExperience int32 `protobuf:"varint,5,opt,name=PlayerExperience,proto3" json:"PlayerExperience,omitempty"`
	TitanDamage      int32 `protobuf:"varint,6,opt,name=TitanDamage,proto3" json:"TitanDamage,omitempty"`
}

func (m *HitTitanResponse) Reset()         { *m = HitTitanResponse{} }
func (m *HitTitanResponse) String() string { return proto.CompactTextString(m) }
func (*HitTitanResponse) ProtoMessage()    {}
func (*HitTitanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{10}
}
func (m *HitTitanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HitTitanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HitTitanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HitTitanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HitTitanResponse.Merge(m, src)
}
func (m *HitTitanResponse) XXX_Size() int {
	return m.Size()
}
func (m *HitTitanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HitTitanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HitTitanResponse proto.InternalMessageInfo

func (m *HitTitanResponse) GetPlayerDie() bool {
	if m != nil {
		return m.PlayerDie
	}
	return false
}

func (m *HitTitanResponse) GetTitanDie() bool {
	if m != nil {
		return m.TitanDie
	}
	return false
}

func (m *HitTitanResponse) GetDodgeAttack() bool {
	if m != nil {
		return m.DodgeAttack
	}
	return false
}

func (m *HitTitanResponse) GetPlayerDamage() int32 {
	if m != nil {
		return m.PlayerDamage
	}
	return 0
}

func (m *HitTitanResponse) GetPlayerExperience() int32 {
	if m != nil {
		return m.PlayerExperience
	}
	return 0
}

func (m *HitTitanResponse) GetTitanDamage() int32 {
	if m != nil {
		return m.TitanDamage
	}
	return 0
}

//TitanDiscovered
type TitanDiscoveredRequest struct {
}

func (m *TitanDiscoveredRequest) Reset()         { *m = TitanDiscoveredRequest{} }
func (m *TitanDiscoveredRequest) String() string { return proto.CompactTextString(m) }
func (*TitanDiscoveredRequest) ProtoMessage()    {}
func (*TitanDiscoveredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{11}
}
func (m *TitanDiscoveredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitanDiscoveredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitanDiscoveredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitanDiscoveredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitanDiscoveredRequest.Merge(m, src)
}
func (m *TitanDiscoveredRequest) XXX_Size() int {
	return m.Size()
}
func (m *TitanDiscoveredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TitanDiscoveredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TitanDiscoveredRequest proto.InternalMessageInfo

type TitanDiscoveredResponse struct {
	Titans []*Titan `protobuf:"bytes,1,rep,name=Titans,proto3" json:"Titans,omitempty"`
}

func (m *TitanDiscoveredResponse) Reset()         { *m = TitanDiscoveredResponse{} }
func (m *TitanDiscoveredResponse) String() string { return proto.CompactTextString(m) }
func (*TitanDiscoveredResponse) ProtoMessage()    {}
func (*TitanDiscoveredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_419d54287fea80a6, []int{12}
}
func (m *TitanDiscoveredResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitanDiscoveredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitanDiscoveredResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitanDiscoveredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitanDiscoveredResponse.Merge(m, src)
}
func (m *TitanDiscoveredResponse) XXX_Size() int {
	return m.Size()
}
func (m *TitanDiscoveredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TitanDiscoveredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TitanDiscoveredResponse proto.InternalMessageInfo

func (m *TitanDiscoveredResponse) GetTitans() []*Titan {
	if m != nil {
		return m.Titans
	}
	return nil
}

func init() {
	proto.RegisterType((*Titan)(nil), "titan.Titan")
	proto.RegisterType((*GetTitanByIDRequest)(nil), "titan.GetTitanByIDRequest")
	proto.RegisterType((*GetTitanByIDResponse)(nil), "titan.GetTitanByIDResponse")
	proto.RegisterType((*GetTitanByPlanetIDRequest)(nil), "titan.GetTitanByPlanetIDRequest")
	proto.RegisterType((*GetTitanByPlanetIDResponse)(nil), "titan.GetTitanByPlanetIDResponse")
	proto.RegisterType((*GetTitanByPlanetSystemIDRequest)(nil), "titan.GetTitanByPlanetSystemIDRequest")
	proto.RegisterType((*GetTitanByPlanetSystemIDResponse)(nil), "titan.GetTitanByPlanetSystemIDResponse")
	proto.RegisterType((*GetTitanByNameRequest)(nil), "titan.GetTitanByNameRequest")
	proto.RegisterType((*GetTitanByNameResponse)(nil), "titan.GetTitanByNameResponse")
	proto.RegisterType((*HitTitanRequest)(nil), "titan.HitTitanRequest")
	proto.RegisterType((*HitTitanResponse)(nil), "titan.HitTitanResponse")
	proto.RegisterType((*TitanDiscoveredRequest)(nil), "titan.TitanDiscoveredRequest")
	proto.RegisterType((*TitanDiscoveredResponse)(nil), "titan.TitanDiscoveredResponse")
}

func init() { proto.RegisterFile("proto/titan.proto", fileDescriptor_419d54287fea80a6) }

var fileDescriptor_419d54287fea80a6 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xce, 0xa6, 0x71, 0x9a, 0x4c, 0x1f, 0x94, 0x05, 0xca, 0x52, 0x55, 0xc6, 0x5a, 0x15, 0x14,
	0x81, 0x14, 0x24, 0x38, 0x20, 0x01, 0x12, 0x34, 0x98, 0x87, 0x25, 0x40, 0x95, 0xcb, 0x89, 0x9b,
	0x93, 0x0c, 0x95, 0x45, 0x62, 0x07, 0x7b, 0x8b, 0xea, 0xdf, 0xc0, 0x85, 0x9f, 0x05, 0xb7, 0x1e,
	0x39, 0x56, 0xc9, 0x1f, 0x41, 0x9e, 0xf5, 0xc6, 0x79, 0x71, 0xc8, 0x6d, 0xe6, 0xfb, 0xc6, 0x33,
	0xdf, 0x3c, 0xd6, 0x70, 0x7d, 0x94, 0xc4, 0x2a, 0x7e, 0xa4, 0x42, 0x15, 0x44, 0x6d, 0xb2, 0xb9,
	0x45, 0x8e, 0xfc, 0xc3, 0xc0, 0xfa, 0x9c, 0x5b, 0x7c, 0x17, 0xaa, 0x9e, 0x2b, 0x98, 0xc3, 0x5a,
	0x3b, 0x7e, 0xd5, 0x73, 0x39, 0x87, 0xda, 0xa7, 0x60, 0x88, 0xa2, 0xea, 0xb0, 0x56, 0xd3, 0x27,
	0x9b, 0x1f, 0x40, 0xe3, 0x64, 0x10, 0x44, 0xa8, 0x3c, 0x57, 0x6c, 0x50, 0xe4, 0xd4, 0xe7, 0xf7,
	0x61, 0x57, 0xdb, 0xa7, 0x59, 0xaa, 0x70, 0xe8, 0xb9, 0xa2, 0x46, 0x11, 0x0b, 0x28, 0x77, 0x60,
	0xcb, 0xc5, 0xa0, 0xff, 0x3a, 0x3e, 0x8f, 0x14, 0x26, 0xc2, 0x72, 0x58, 0xcb, 0xf2, 0x67, 0x21,
	0x2e, 0x60, 0xf3, 0x43, 0xf8, 0x15, 0x3f, 0x06, 0x17, 0xa2, 0x41, 0xac, 0x71, 0xf9, 0x21, 0x34,
	0x73, 0xf3, 0x24, 0x0e, 0x23, 0x25, 0x9a, 0xc4, 0x95, 0x80, 0xbc, 0x07, 0x37, 0xde, 0xa1, 0xa2,
	0x6e, 0x3a, 0x99, 0xe7, 0xfa, 0xf8, 0xfd, 0x1c, 0x53, 0xb5, 0xd8, 0x98, 0x7c, 0x06, 0x37, 0xe7,
	0xc3, 0xd2, 0x51, 0x1c, 0xa5, 0xc8, 0x65, 0x31, 0x09, 0x0a, 0xdd, 0x7a, 0xbc, 0xdd, 0xd6, 0xe3,
	0x22, 0xcc, 0xd7, 0x94, 0x7c, 0x0a, 0x77, 0xca, 0x6f, 0x4d, 0xeb, 0xa6, 0xd0, 0xec, 0x74, 0xd8,
	0xfc, 0x74, 0xe4, 0x2b, 0x38, 0x58, 0xf5, 0xe1, 0x1a, 0xa5, 0x3d, 0xb8, 0xbb, 0x98, 0xc1, 0xcc,
	0xd4, 0x08, 0x58, 0x5e, 0x01, 0x5b, 0xb5, 0x02, 0xf9, 0x16, 0x9c, 0xff, 0xa7, 0x5a, 0x43, 0xd2,
	0x43, 0xb8, 0x55, 0xe6, 0xc9, 0x0f, 0xc4, 0x08, 0x31, 0xb7, 0xc3, 0xca, 0xdb, 0x91, 0x2f, 0x60,
	0x7f, 0x31, 0x78, 0x8d, 0x52, 0x3f, 0x19, 0x5c, 0x7b, 0x1f, 0xea, 0xcf, 0x4d, 0x15, 0x01, 0x9b,
	0xe4, 0x4f, 0xfb, 0x34, 0x6e, 0xb1, 0x89, 0x0c, 0x13, 0xcf, 0xa5, 0xfb, 0xd5, 0x9b, 0x20, 0x9f,
	0x1f, 0xc1, 0x4e, 0x27, 0xee, 0x67, 0xa7, 0x38, 0xc0, 0x9e, 0x0a, 0xe3, 0x88, 0x0e, 0xd9, 0xf2,
	0xe7, 0xc1, 0xfc, 0xd2, 0x8e, 0xbb, 0xe1, 0x20, 0x54, 0xd9, 0xf4, 0x90, 0x4b, 0x40, 0x5e, 0x31,
	0xd8, 0x2b, 0xd5, 0x14, 0x6d, 0x1c, 0x42, 0x53, 0x17, 0x71, 0x43, 0xdd, 0x79, 0xc3, 0x2f, 0x81,
	0x5c, 0x12, 0x85, 0xe7, 0x64, 0x95, 0xc8, 0xa9, 0x4f, 0x4f, 0x22, 0xee, 0x9f, 0xe1, 0xb1, 0x52,
	0x41, 0xef, 0x1b, 0x09, 0x6a, 0xf8, 0xb3, 0x10, 0x97, 0xb0, 0x5d, 0xa4, 0x0a, 0x86, 0xc1, 0x19,
	0x92, 0x22, 0xcb, 0x9f, 0xc3, 0xf8, 0x03, 0xd8, 0xd3, 0xfe, 0x9b, 0x8b, 0x11, 0x26, 0x21, 0x46,
	0x3d, 0x2c, 0x5e, 0xd7, 0x12, 0x9e, 0x57, 0xd4, 0xd5, 0x75, 0xba, 0xba, 0x7e, 0x84, 0x33, 0x90,
	0x14, 0xb0, 0x5f, 0xe8, 0x4b, 0x7b, 0xf1, 0x0f, 0x4c, 0xb0, 0x5f, 0x8c, 0x5d, 0xbe, 0x84, 0xdb,
	0x4b, 0x4c, 0x31, 0x82, 0x23, 0xa8, 0x13, 0x95, 0x0a, 0xe6, 0x6c, 0x2c, 0xad, 0xb2, 0xe0, 0x3a,
	0xf6, 0xef, 0xb1, 0xcd, 0x2e, 0xc7, 0x36, 0xbb, 0x1a, 0xdb, 0xec, 0xd7, 0xc4, 0xae, 0x5c, 0x4e,
	0xec, 0xca, 0xdf, 0x89, 0x5d, 0xf9, 0x52, 0x6b, 0x3f, 0x1f, 0x75, 0xbb, 0x75, 0xfa, 0x43, 0x3d,
	0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x68, 0x1f, 0xa2, 0xb6, 0x04, 0x00, 0x00,
}

func (m *Titan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Titan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Titan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LifePoint != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.LifePoint))
		i--
		dAtA[i] = 0x48
	}
	if m.LifeMax != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.LifeMax))
		i--
		dAtA[i] = 0x40
	}
	if m.DeadCounter != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.DeadCounter))
		i--
		dAtA[i] = 0x28
	}
	if m.PlanetSystemID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.PlanetSystemID))
		i--
		dAtA[i] = 0x20
	}
	if m.PlanetID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTitan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Titan != nil {
		{
			size, err := m.Titan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByPlanetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByPlanetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByPlanetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByPlanetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByPlanetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByPlanetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Titan != nil {
		{
			size, err := m.Titan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByPlanetSystemIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByPlanetSystemIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByPlanetSystemIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetSystemID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.PlanetSystemID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByPlanetSystemIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByPlanetSystemIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByPlanetSystemIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Titan != nil {
		{
			size, err := m.Titan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTitan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Titan != nil {
		{
			size, err := m.Titan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTitan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HitTitanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HitTitanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HitTitanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AbilityID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.AbilityID))
		i--
		dAtA[i] = 0x20
	}
	if m.BodySelection != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.BodySelection))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.TitanID != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.TitanID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HitTitanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HitTitanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HitTitanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TitanDamage != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.TitanDamage))
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerExperience != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.PlayerExperience))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerDamage != 0 {
		i = encodeVarintTitan(dAtA, i, uint64(m.PlayerDamage))
		i--
		dAtA[i] = 0x20
	}
	if m.DodgeAttack {
		i--
		if m.DodgeAttack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TitanDie {
		i--
		if m.TitanDie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerDie {
		i--
		if m.PlayerDie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TitanDiscoveredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitanDiscoveredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitanDiscoveredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TitanDiscoveredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitanDiscoveredResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitanDiscoveredResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Titans) > 0 {
		for iNdEx := len(m.Titans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Titans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTitan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTitan(dAtA []byte, offset int, v uint64) int {
	offset -= sovTitan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Titan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitan(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitan(uint64(l))
	}
	if m.PlanetID != 0 {
		n += 1 + sovTitan(uint64(m.PlanetID))
	}
	if m.PlanetSystemID != 0 {
		n += 1 + sovTitan(uint64(m.PlanetSystemID))
	}
	if m.DeadCounter != 0 {
		n += 1 + sovTitan(uint64(m.DeadCounter))
	}
	if m.LifeMax != 0 {
		n += 1 + sovTitan(uint64(m.LifeMax))
	}
	if m.LifePoint != 0 {
		n += 1 + sovTitan(uint64(m.LifePoint))
	}
	return n
}

func (m *GetTitanByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTitan(uint64(m.ID))
	}
	return n
}

func (m *GetTitanByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Titan != nil {
		l = m.Titan.Size()
		n += 1 + l + sovTitan(uint64(l))
	}
	return n
}

func (m *GetTitanByPlanetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovTitan(uint64(m.PlanetID))
	}
	return n
}

func (m *GetTitanByPlanetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Titan != nil {
		l = m.Titan.Size()
		n += 1 + l + sovTitan(uint64(l))
	}
	return n
}

func (m *GetTitanByPlanetSystemIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetSystemID != 0 {
		n += 1 + sovTitan(uint64(m.PlanetSystemID))
	}
	return n
}

func (m *GetTitanByPlanetSystemIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Titan != nil {
		l = m.Titan.Size()
		n += 1 + l + sovTitan(uint64(l))
	}
	return n
}

func (m *GetTitanByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitan(uint64(l))
	}
	return n
}

func (m *GetTitanByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Titan != nil {
		l = m.Titan.Size()
		n += 1 + l + sovTitan(uint64(l))
	}
	return n
}

func (m *HitTitanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TitanID != 0 {
		n += 1 + sovTitan(uint64(m.TitanID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovTitan(uint64(m.PlayerID))
	}
	if m.BodySelection != 0 {
		n += 1 + sovTitan(uint64(m.BodySelection))
	}
	if m.AbilityID != 0 {
		n += 1 + sovTitan(uint64(m.AbilityID))
	}
	return n
}

func (m *HitTitanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerDie {
		n += 2
	}
	if m.TitanDie {
		n += 2
	}
	if m.DodgeAttack {
		n += 2
	}
	if m.PlayerDamage != 0 {
		n += 1 + sovTitan(uint64(m.PlayerDamage))
	}
	if m.PlayerExperience != 0 {
		n += 1 + sovTitan(uint64(m.PlayerExperience))
	}
	if m.TitanDamage != 0 {
		n += 1 + sovTitan(uint64(m.TitanDamage))
	}
	return n
}

func (m *TitanDiscoveredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TitanDiscoveredResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Titans) > 0 {
		for _, e := range m.Titans {
			l = e.Size()
			n += 1 + l + sovTitan(uint64(l))
		}
	}
	return n
}

func sovTitan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTitan(x uint64) (n int) {
	return sovTitan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Titan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Titan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Titan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTitan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetSystemID", wireType)
			}
			m.PlanetSystemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetSystemID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadCounter", wireType)
			}
			m.DeadCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadCounter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeMax", wireType)
			}
			m.LifeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifeMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifePoint", wireType)
			}
			m.LifePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifePoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Titan == nil {
				m.Titan = &Titan{}
			}
			if err := m.Titan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByPlanetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByPlanetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByPlanetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByPlanetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByPlanetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByPlanetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Titan == nil {
				m.Titan = &Titan{}
			}
			if err := m.Titan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByPlanetSystemIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByPlanetSystemIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByPlanetSystemIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetSystemID", wireType)
			}
			m.PlanetSystemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetSystemID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByPlanetSystemIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByPlanetSystemIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByPlanetSystemIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Titan == nil {
				m.Titan = &Titan{}
			}
			if err := m.Titan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTitan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Titan == nil {
				m.Titan = &Titan{}
			}
			if err := m.Titan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HitTitanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HitTitanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HitTitanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanID", wireType)
			}
			m.TitanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodySelection", wireType)
			}
			m.BodySelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodySelection |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			m.AbilityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HitTitanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HitTitanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HitTitanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDie = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanDie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TitanDie = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DodgeAttack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DodgeAttack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDamage", wireType)
			}
			m.PlayerDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDamage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerExperience", wireType)
			}
			m.PlayerExperience = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerExperience |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanDamage", wireType)
			}
			m.TitanDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanDamage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitanDiscoveredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitanDiscoveredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitanDiscoveredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitanDiscoveredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitanDiscoveredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitanDiscoveredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTitan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Titans = append(m.Titans, &Titan{})
			if err := m.Titans[len(m.Titans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTitan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTitan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTitan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTitan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTitan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTitan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTitan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTitan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTitan = fmt.Errorf("proto: unexpected end of group")
)
