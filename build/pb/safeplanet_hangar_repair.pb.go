// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/safeplanet_hangar_repair.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StartShipRepairRequest_RapairTypeEnum int32

const (
	StartShipRepairRequest_PARTIAL StartShipRepairRequest_RapairTypeEnum = 0
	StartShipRepairRequest_FULL    StartShipRepairRequest_RapairTypeEnum = 1
)

var StartShipRepairRequest_RapairTypeEnum_name = map[int32]string{
	0: "PARTIAL",
	1: "FULL",
}

var StartShipRepairRequest_RapairTypeEnum_value = map[string]int32{
	"PARTIAL": 0,
	"FULL":    1,
}

func (x StartShipRepairRequest_RapairTypeEnum) String() string {
	return proto.EnumName(StartShipRepairRequest_RapairTypeEnum_name, int32(x))
}

func (StartShipRepairRequest_RapairTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{2, 0}
}

// GetShipRepairInfo
type GetShipRepairInfoRequest struct {
	ShipID               uint32   `protobuf:"varint,1,opt,name=ShipID,proto3" json:"ShipID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShipRepairInfoRequest) Reset()         { *m = GetShipRepairInfoRequest{} }
func (m *GetShipRepairInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetShipRepairInfoRequest) ProtoMessage()    {}
func (*GetShipRepairInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{0}
}
func (m *GetShipRepairInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShipRepairInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShipRepairInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShipRepairInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShipRepairInfoRequest.Merge(m, src)
}
func (m *GetShipRepairInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShipRepairInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShipRepairInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShipRepairInfoRequest proto.InternalMessageInfo

func (m *GetShipRepairInfoRequest) GetShipID() uint32 {
	if m != nil {
		return m.ShipID
	}
	return 0
}

type GetShipRepairInfoResponse struct {
	NeedRepairs          bool                                      `protobuf:"varint,1,opt,name=NeedRepairs,proto3" json:"NeedRepairs,omitempty"`
	Partial              *GetShipRepairInfoResponse_ShipRepairInfo `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	Full                 *GetShipRepairInfoResponse_ShipRepairInfo `protobuf:"bytes,3,opt,name=Full,proto3" json:"Full,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *GetShipRepairInfoResponse) Reset()         { *m = GetShipRepairInfoResponse{} }
func (m *GetShipRepairInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetShipRepairInfoResponse) ProtoMessage()    {}
func (*GetShipRepairInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{1}
}
func (m *GetShipRepairInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShipRepairInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShipRepairInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShipRepairInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShipRepairInfoResponse.Merge(m, src)
}
func (m *GetShipRepairInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetShipRepairInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShipRepairInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShipRepairInfoResponse proto.InternalMessageInfo

func (m *GetShipRepairInfoResponse) GetNeedRepairs() bool {
	if m != nil {
		return m.NeedRepairs
	}
	return false
}

func (m *GetShipRepairInfoResponse) GetPartial() *GetShipRepairInfoResponse_ShipRepairInfo {
	if m != nil {
		return m.Partial
	}
	return nil
}

func (m *GetShipRepairInfoResponse) GetFull() *GetShipRepairInfoResponse_ShipRepairInfo {
	if m != nil {
		return m.Full
	}
	return nil
}

type GetShipRepairInfoResponse_ShipRepairInfo struct {
	RepairTime           int32    `protobuf:"varint,1,opt,name=RepairTime,proto3" json:"RepairTime,omitempty"`
	QuantityResources    int32    `protobuf:"varint,2,opt,name=QuantityResources,proto3" json:"QuantityResources,omitempty"`
	Integrity            uint32   `protobuf:"varint,3,opt,name=Integrity,proto3" json:"Integrity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShipRepairInfoResponse_ShipRepairInfo) Reset() {
	*m = GetShipRepairInfoResponse_ShipRepairInfo{}
}
func (m *GetShipRepairInfoResponse_ShipRepairInfo) String() string { return proto.CompactTextString(m) }
func (*GetShipRepairInfoResponse_ShipRepairInfo) ProtoMessage()    {}
func (*GetShipRepairInfoResponse_ShipRepairInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{1, 0}
}
func (m *GetShipRepairInfoResponse_ShipRepairInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShipRepairInfoResponse_ShipRepairInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShipRepairInfoResponse_ShipRepairInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShipRepairInfoResponse_ShipRepairInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShipRepairInfoResponse_ShipRepairInfo.Merge(m, src)
}
func (m *GetShipRepairInfoResponse_ShipRepairInfo) XXX_Size() int {
	return m.Size()
}
func (m *GetShipRepairInfoResponse_ShipRepairInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShipRepairInfoResponse_ShipRepairInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetShipRepairInfoResponse_ShipRepairInfo proto.InternalMessageInfo

func (m *GetShipRepairInfoResponse_ShipRepairInfo) GetRepairTime() int32 {
	if m != nil {
		return m.RepairTime
	}
	return 0
}

func (m *GetShipRepairInfoResponse_ShipRepairInfo) GetQuantityResources() int32 {
	if m != nil {
		return m.QuantityResources
	}
	return 0
}

func (m *GetShipRepairInfoResponse_ShipRepairInfo) GetIntegrity() uint32 {
	if m != nil {
		return m.Integrity
	}
	return 0
}

// StartShipRepair
type StartShipRepairRequest struct {
	PlayerID             uint32                                `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	RapairType           StartShipRepairRequest_RapairTypeEnum `protobuf:"varint,2,opt,name=RapairType,proto3,enum=safeplanet_hangar_repair.StartShipRepairRequest_RapairTypeEnum" json:"RapairType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *StartShipRepairRequest) Reset()         { *m = StartShipRepairRequest{} }
func (m *StartShipRepairRequest) String() string { return proto.CompactTextString(m) }
func (*StartShipRepairRequest) ProtoMessage()    {}
func (*StartShipRepairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{2}
}
func (m *StartShipRepairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartShipRepairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartShipRepairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartShipRepairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartShipRepairRequest.Merge(m, src)
}
func (m *StartShipRepairRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartShipRepairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartShipRepairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartShipRepairRequest proto.InternalMessageInfo

func (m *StartShipRepairRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *StartShipRepairRequest) GetRapairType() StartShipRepairRequest_RapairTypeEnum {
	if m != nil {
		return m.RapairType
	}
	return StartShipRepairRequest_PARTIAL
}

type StartShipRepairResponse struct {
	RepairingEndTime     *types.Timestamp                           `protobuf:"bytes,1,opt,name=RepairingEndTime,proto3" json:"RepairingEndTime,omitempty"`
	StartShipRepair      []*StartShipRepairResponse_RepairResources `protobuf:"bytes,2,rep,name=StartShipRepair,proto3" json:"StartShipRepair,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *StartShipRepairResponse) Reset()         { *m = StartShipRepairResponse{} }
func (m *StartShipRepairResponse) String() string { return proto.CompactTextString(m) }
func (*StartShipRepairResponse) ProtoMessage()    {}
func (*StartShipRepairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{3}
}
func (m *StartShipRepairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartShipRepairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartShipRepairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartShipRepairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartShipRepairResponse.Merge(m, src)
}
func (m *StartShipRepairResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartShipRepairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartShipRepairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartShipRepairResponse proto.InternalMessageInfo

func (m *StartShipRepairResponse) GetRepairingEndTime() *types.Timestamp {
	if m != nil {
		return m.RepairingEndTime
	}
	return nil
}

func (m *StartShipRepairResponse) GetStartShipRepair() []*StartShipRepairResponse_RepairResources {
	if m != nil {
		return m.StartShipRepair
	}
	return nil
}

type StartShipRepairResponse_RepairResources struct {
	ResourceID           uint32   `protobuf:"varint,1,opt,name=ResourceID,proto3" json:"ResourceID,omitempty"`
	Quantity             int32    `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartShipRepairResponse_RepairResources) Reset() {
	*m = StartShipRepairResponse_RepairResources{}
}
func (m *StartShipRepairResponse_RepairResources) String() string { return proto.CompactTextString(m) }
func (*StartShipRepairResponse_RepairResources) ProtoMessage()    {}
func (*StartShipRepairResponse_RepairResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{3, 0}
}
func (m *StartShipRepairResponse_RepairResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartShipRepairResponse_RepairResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartShipRepairResponse_RepairResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartShipRepairResponse_RepairResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartShipRepairResponse_RepairResources.Merge(m, src)
}
func (m *StartShipRepairResponse_RepairResources) XXX_Size() int {
	return m.Size()
}
func (m *StartShipRepairResponse_RepairResources) XXX_DiscardUnknown() {
	xxx_messageInfo_StartShipRepairResponse_RepairResources.DiscardUnknown(m)
}

var xxx_messageInfo_StartShipRepairResponse_RepairResources proto.InternalMessageInfo

func (m *StartShipRepairResponse_RepairResources) GetResourceID() uint32 {
	if m != nil {
		return m.ResourceID
	}
	return 0
}

func (m *StartShipRepairResponse_RepairResources) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// CheckShipRepair
type CheckShipRepairRequest struct {
	PlayerID             uint32   `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckShipRepairRequest) Reset()         { *m = CheckShipRepairRequest{} }
func (m *CheckShipRepairRequest) String() string { return proto.CompactTextString(m) }
func (*CheckShipRepairRequest) ProtoMessage()    {}
func (*CheckShipRepairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{4}
}
func (m *CheckShipRepairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckShipRepairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckShipRepairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckShipRepairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckShipRepairRequest.Merge(m, src)
}
func (m *CheckShipRepairRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckShipRepairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckShipRepairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckShipRepairRequest proto.InternalMessageInfo

func (m *CheckShipRepairRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type CheckShipRepairResponse struct {
	RepairInProgress     bool             `protobuf:"varint,1,opt,name=RepairInProgress,proto3" json:"RepairInProgress,omitempty"`
	FinishRepairing      bool             `protobuf:"varint,2,opt,name=FinishRepairing,proto3" json:"FinishRepairing,omitempty"`
	RepairingEndTime     *types.Timestamp `protobuf:"bytes,3,opt,name=RepairingEndTime,proto3" json:"RepairingEndTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CheckShipRepairResponse) Reset()         { *m = CheckShipRepairResponse{} }
func (m *CheckShipRepairResponse) String() string { return proto.CompactTextString(m) }
func (*CheckShipRepairResponse) ProtoMessage()    {}
func (*CheckShipRepairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{5}
}
func (m *CheckShipRepairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckShipRepairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckShipRepairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckShipRepairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckShipRepairResponse.Merge(m, src)
}
func (m *CheckShipRepairResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckShipRepairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckShipRepairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckShipRepairResponse proto.InternalMessageInfo

func (m *CheckShipRepairResponse) GetRepairInProgress() bool {
	if m != nil {
		return m.RepairInProgress
	}
	return false
}

func (m *CheckShipRepairResponse) GetFinishRepairing() bool {
	if m != nil {
		return m.FinishRepairing
	}
	return false
}

func (m *CheckShipRepairResponse) GetRepairingEndTime() *types.Timestamp {
	if m != nil {
		return m.RepairingEndTime
	}
	return nil
}

// EndShipRepair
type EndShipRepairRequest struct {
	PlayerID             uint32   `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndShipRepairRequest) Reset()         { *m = EndShipRepairRequest{} }
func (m *EndShipRepairRequest) String() string { return proto.CompactTextString(m) }
func (*EndShipRepairRequest) ProtoMessage()    {}
func (*EndShipRepairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{6}
}
func (m *EndShipRepairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndShipRepairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndShipRepairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndShipRepairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndShipRepairRequest.Merge(m, src)
}
func (m *EndShipRepairRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndShipRepairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndShipRepairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndShipRepairRequest proto.InternalMessageInfo

func (m *EndShipRepairRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type EndShipRepairResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndShipRepairResponse) Reset()         { *m = EndShipRepairResponse{} }
func (m *EndShipRepairResponse) String() string { return proto.CompactTextString(m) }
func (*EndShipRepairResponse) ProtoMessage()    {}
func (*EndShipRepairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5446e7fe22eddcb3, []int{7}
}
func (m *EndShipRepairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndShipRepairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndShipRepairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndShipRepairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndShipRepairResponse.Merge(m, src)
}
func (m *EndShipRepairResponse) XXX_Size() int {
	return m.Size()
}
func (m *EndShipRepairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndShipRepairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndShipRepairResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("safeplanet_hangar_repair.StartShipRepairRequest_RapairTypeEnum", StartShipRepairRequest_RapairTypeEnum_name, StartShipRepairRequest_RapairTypeEnum_value)
	proto.RegisterType((*GetShipRepairInfoRequest)(nil), "safeplanet_hangar_repair.GetShipRepairInfoRequest")
	proto.RegisterType((*GetShipRepairInfoResponse)(nil), "safeplanet_hangar_repair.GetShipRepairInfoResponse")
	proto.RegisterType((*GetShipRepairInfoResponse_ShipRepairInfo)(nil), "safeplanet_hangar_repair.GetShipRepairInfoResponse.ShipRepairInfo")
	proto.RegisterType((*StartShipRepairRequest)(nil), "safeplanet_hangar_repair.StartShipRepairRequest")
	proto.RegisterType((*StartShipRepairResponse)(nil), "safeplanet_hangar_repair.StartShipRepairResponse")
	proto.RegisterType((*StartShipRepairResponse_RepairResources)(nil), "safeplanet_hangar_repair.StartShipRepairResponse.RepairResources")
	proto.RegisterType((*CheckShipRepairRequest)(nil), "safeplanet_hangar_repair.CheckShipRepairRequest")
	proto.RegisterType((*CheckShipRepairResponse)(nil), "safeplanet_hangar_repair.CheckShipRepairResponse")
	proto.RegisterType((*EndShipRepairRequest)(nil), "safeplanet_hangar_repair.EndShipRepairRequest")
	proto.RegisterType((*EndShipRepairResponse)(nil), "safeplanet_hangar_repair.EndShipRepairResponse")
}

func init() {
	proto.RegisterFile("proto/safeplanet_hangar_repair.proto", fileDescriptor_5446e7fe22eddcb3)
}

var fileDescriptor_5446e7fe22eddcb3 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xd1, 0x8e, 0xd2, 0x40,
	0x14, 0xb5, 0xc0, 0xee, 0xe2, 0x25, 0x0b, 0x38, 0x51, 0xa8, 0xc4, 0x20, 0x69, 0x4c, 0x24, 0xc6,
	0x94, 0xa4, 0xfa, 0xe6, 0x83, 0x61, 0x15, 0x0c, 0x09, 0x1a, 0x9c, 0x45, 0x1f, 0x8c, 0x09, 0x19,
	0x96, 0xa1, 0x4c, 0xb6, 0x4c, 0xeb, 0xcc, 0xf4, 0x81, 0xc4, 0x5f, 0xf1, 0x3b, 0x7c, 0xf3, 0xd9,
	0x47, 0x3f, 0xc1, 0xf0, 0x07, 0xfe, 0x81, 0xd9, 0x29, 0xed, 0xb2, 0x2d, 0x3c, 0x90, 0xec, 0xe3,
	0x3d, 0xb7, 0xe7, 0xcc, 0xbd, 0xf7, 0x9c, 0xc2, 0x93, 0x40, 0xf8, 0xca, 0xef, 0x48, 0x32, 0xa7,
	0x81, 0x47, 0x38, 0x55, 0x93, 0x05, 0xe1, 0x2e, 0x11, 0x13, 0x41, 0x03, 0xc2, 0x84, 0xad, 0xdb,
	0xc8, 0xdc, 0xd7, 0x6f, 0x3c, 0x76, 0x7d, 0xdf, 0xf5, 0x68, 0x47, 0x7f, 0x37, 0x0d, 0xe7, 0x1d,
	0xc5, 0x96, 0x54, 0x2a, 0xb2, 0x0c, 0x22, 0xaa, 0xe5, 0x80, 0xf9, 0x8e, 0xaa, 0xf3, 0x05, 0x0b,
	0xb0, 0x66, 0x0c, 0xf8, 0xdc, 0xc7, 0xf4, 0x5b, 0x48, 0xa5, 0x42, 0x35, 0x38, 0xbe, 0x6a, 0x0c,
	0xde, 0x9a, 0x46, 0xcb, 0x68, 0x9f, 0xe2, 0x4d, 0x65, 0xfd, 0xcb, 0xc1, 0xc3, 0x1d, 0x24, 0x19,
	0xf8, 0x5c, 0x52, 0xd4, 0x82, 0xd2, 0x07, 0x4a, 0x67, 0x51, 0x47, 0x6a, 0x6a, 0x11, 0x6f, 0x43,
	0xe8, 0x2b, 0x9c, 0x8c, 0x88, 0x50, 0x8c, 0x78, 0x66, 0xae, 0x65, 0xb4, 0x4b, 0xce, 0x99, 0xbd,
	0x77, 0xc1, 0xbd, 0xef, 0xd8, 0x29, 0x38, 0x96, 0x44, 0x9f, 0xa1, 0xd0, 0x0f, 0x3d, 0xcf, 0xcc,
	0xdf, 0x9a, 0xb4, 0xd6, 0x6b, 0x7c, 0x87, 0xf2, 0x4d, 0x1c, 0x35, 0x01, 0xa2, 0x6a, 0xcc, 0x96,
	0x54, 0x2f, 0x7a, 0x84, 0xb7, 0x10, 0xf4, 0x1c, 0xee, 0x7d, 0x0c, 0x09, 0x57, 0x4c, 0xad, 0x30,
	0x95, 0x7e, 0x28, 0x2e, 0xa8, 0xd4, 0x1b, 0x1f, 0xe1, 0x6c, 0x03, 0x3d, 0x82, 0xbb, 0x03, 0xae,
	0xa8, 0x2b, 0x98, 0x5a, 0xe9, 0xe1, 0x4f, 0xf1, 0x35, 0x60, 0xfd, 0x32, 0xa0, 0x76, 0xae, 0x88,
	0xd8, 0x1a, 0x39, 0xb6, 0xa9, 0x01, 0xc5, 0x91, 0x47, 0x56, 0x54, 0x24, 0x46, 0x25, 0x35, 0x9a,
	0x00, 0x60, 0xa2, 0x07, 0x5a, 0x05, 0x54, 0xbf, 0x5d, 0x76, 0x5e, 0xef, 0x3f, 0xc9, 0xee, 0x17,
	0xec, 0x6b, 0x89, 0x1e, 0x0f, 0x97, 0x78, 0x4b, 0xd2, 0x7a, 0x0a, 0xe5, 0x9b, 0x5d, 0x54, 0x82,
	0x93, 0x51, 0x17, 0x8f, 0x07, 0xdd, 0x61, 0xf5, 0x0e, 0x2a, 0x42, 0xa1, 0xff, 0x69, 0x38, 0xac,
	0x1a, 0xd6, 0x8f, 0x1c, 0xd4, 0x33, 0xf2, 0x9b, 0xc8, 0xf4, 0xa1, 0x1a, 0x21, 0x8c, 0xbb, 0x3d,
	0x3e, 0x4b, 0xce, 0x59, 0x72, 0x1a, 0x76, 0x14, 0x60, 0x3b, 0x0e, 0xb0, 0x3d, 0x8e, 0x03, 0x8c,
	0x33, 0x1c, 0x74, 0x09, 0x95, 0xd4, 0x13, 0x66, 0xae, 0x95, 0x6f, 0x97, 0x9c, 0xee, 0x01, 0x2b,
	0x6f, 0x32, 0x90, 0x94, 0x91, 0x3d, 0x38, 0xad, 0xdc, 0x78, 0x0f, 0x95, 0xd4, 0x37, 0x51, 0x20,
	0xa2, 0x22, 0xf1, 0x62, 0x0b, 0xb9, 0x72, 0x2a, 0xf6, 0x7d, 0x93, 0x83, 0xa4, 0xb6, 0x5e, 0x42,
	0xed, 0xcd, 0x82, 0x5e, 0x5c, 0x1e, 0xe4, 0xaf, 0xf5, 0xd3, 0x80, 0x7a, 0x86, 0xb6, 0xb9, 0xea,
	0xb3, 0xf8, 0xaa, 0x03, 0x3e, 0x12, 0xbe, 0x2b, 0xa8, 0x8c, 0xff, 0xc6, 0x0c, 0x8e, 0xda, 0x50,
	0xe9, 0x33, 0xce, 0xe4, 0x22, 0xb9, 0xa9, 0x1e, 0xb0, 0x88, 0xd3, 0xf0, 0x4e, 0xaf, 0xf2, 0x87,
	0x7b, 0x65, 0x39, 0x70, 0xbf, 0xc7, 0x67, 0x87, 0x6d, 0x5b, 0x87, 0x07, 0x29, 0x4e, 0xb4, 0xea,
	0x19, 0xfa, 0xbd, 0x6e, 0x1a, 0x7f, 0xd6, 0x4d, 0xe3, 0xef, 0xba, 0x69, 0x7c, 0x29, 0xd8, 0xaf,
	0x82, 0xe9, 0xf4, 0x58, 0x8f, 0xf1, 0xe2, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x1d, 0xa6,
	0xb1, 0x43, 0x05, 0x00, 0x00,
}

func (m *GetShipRepairInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShipRepairInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShipRepairInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShipID != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.ShipID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetShipRepairInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShipRepairInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShipRepairInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Full != nil {
		{
			size, err := m.Full.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Partial != nil {
		{
			size, err := m.Partial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NeedRepairs {
		i--
		if m.NeedRepairs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetShipRepairInfoResponse_ShipRepairInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShipRepairInfoResponse_ShipRepairInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShipRepairInfoResponse_ShipRepairInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Integrity != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.Integrity))
		i--
		dAtA[i] = 0x18
	}
	if m.QuantityResources != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.QuantityResources))
		i--
		dAtA[i] = 0x10
	}
	if m.RepairTime != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.RepairTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartShipRepairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartShipRepairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartShipRepairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RapairType != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.RapairType))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartShipRepairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartShipRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartShipRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StartShipRepair) > 0 {
		for iNdEx := len(m.StartShipRepair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StartShipRepair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RepairingEndTime != nil {
		{
			size, err := m.RepairingEndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartShipRepairResponse_RepairResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartShipRepairResponse_RepairResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartShipRepairResponse_RepairResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quantity != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if m.ResourceID != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.ResourceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckShipRepairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckShipRepairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckShipRepairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckShipRepairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckShipRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckShipRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RepairingEndTime != nil {
		{
			size, err := m.RepairingEndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FinishRepairing {
		i--
		if m.FinishRepairing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RepairInProgress {
		i--
		if m.RepairInProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndShipRepairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndShipRepairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndShipRepairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintSafeplanetHangarRepair(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndShipRepairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndShipRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndShipRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintSafeplanetHangarRepair(dAtA []byte, offset int, v uint64) int {
	offset -= sovSafeplanetHangarRepair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetShipRepairInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShipID != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.ShipID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShipRepairInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NeedRepairs {
		n += 2
	}
	if m.Partial != nil {
		l = m.Partial.Size()
		n += 1 + l + sovSafeplanetHangarRepair(uint64(l))
	}
	if m.Full != nil {
		l = m.Full.Size()
		n += 1 + l + sovSafeplanetHangarRepair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShipRepairInfoResponse_ShipRepairInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepairTime != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.RepairTime))
	}
	if m.QuantityResources != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.QuantityResources))
	}
	if m.Integrity != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.Integrity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartShipRepairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.PlayerID))
	}
	if m.RapairType != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.RapairType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartShipRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepairingEndTime != nil {
		l = m.RepairingEndTime.Size()
		n += 1 + l + sovSafeplanetHangarRepair(uint64(l))
	}
	if len(m.StartShipRepair) > 0 {
		for _, e := range m.StartShipRepair {
			l = e.Size()
			n += 1 + l + sovSafeplanetHangarRepair(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartShipRepairResponse_RepairResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceID != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.ResourceID))
	}
	if m.Quantity != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.Quantity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckShipRepairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckShipRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepairInProgress {
		n += 2
	}
	if m.FinishRepairing {
		n += 2
	}
	if m.RepairingEndTime != nil {
		l = m.RepairingEndTime.Size()
		n += 1 + l + sovSafeplanetHangarRepair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndShipRepairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovSafeplanetHangarRepair(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndShipRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSafeplanetHangarRepair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSafeplanetHangarRepair(x uint64) (n int) {
	return sovSafeplanetHangarRepair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetShipRepairInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShipRepairInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShipRepairInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipID", wireType)
			}
			m.ShipID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShipRepairInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShipRepairInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShipRepairInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedRepairs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedRepairs = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Partial == nil {
				m.Partial = &GetShipRepairInfoResponse_ShipRepairInfo{}
			}
			if err := m.Partial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Full", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Full == nil {
				m.Full = &GetShipRepairInfoResponse_ShipRepairInfo{}
			}
			if err := m.Full.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShipRepairInfoResponse_ShipRepairInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShipRepairInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShipRepairInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairTime", wireType)
			}
			m.RepairTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepairTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuantityResources", wireType)
			}
			m.QuantityResources = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuantityResources |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrity", wireType)
			}
			m.Integrity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Integrity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartShipRepairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartShipRepairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartShipRepairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RapairType", wireType)
			}
			m.RapairType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RapairType |= StartShipRepairRequest_RapairTypeEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartShipRepairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartShipRepairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartShipRepairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepairingEndTime == nil {
				m.RepairingEndTime = &types.Timestamp{}
			}
			if err := m.RepairingEndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartShipRepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartShipRepair = append(m.StartShipRepair, &StartShipRepairResponse_RepairResources{})
			if err := m.StartShipRepair[len(m.StartShipRepair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartShipRepairResponse_RepairResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepairResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepairResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			m.ResourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckShipRepairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckShipRepairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckShipRepairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckShipRepairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckShipRepairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckShipRepairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairInProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RepairInProgress = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishRepairing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinishRepairing = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepairingEndTime == nil {
				m.RepairingEndTime = &types.Timestamp{}
			}
			if err := m.RepairingEndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndShipRepairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndShipRepairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndShipRepairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndShipRepairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndShipRepairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndShipRepairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetHangarRepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetHangarRepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSafeplanetHangarRepair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSafeplanetHangarRepair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSafeplanetHangarRepair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSafeplanetHangarRepair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSafeplanetHangarRepair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSafeplanetHangarRepair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSafeplanetHangarRepair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSafeplanetHangarRepair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSafeplanetHangarRepair = fmt.Errorf("proto: unexpected end of group")
)
