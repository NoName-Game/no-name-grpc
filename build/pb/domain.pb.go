// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/domain.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetDomainsByPlanetID
type GetDomainsByPlanetIDRequest struct {
	PlanetID uint32 `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *GetDomainsByPlanetIDRequest) Reset()         { *m = GetDomainsByPlanetIDRequest{} }
func (m *GetDomainsByPlanetIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetDomainsByPlanetIDRequest) ProtoMessage()    {}
func (*GetDomainsByPlanetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b54682263b0d744, []int{0}
}
func (m *GetDomainsByPlanetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDomainsByPlanetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDomainsByPlanetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDomainsByPlanetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDomainsByPlanetIDRequest.Merge(m, src)
}
func (m *GetDomainsByPlanetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDomainsByPlanetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDomainsByPlanetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDomainsByPlanetIDRequest proto.InternalMessageInfo

func (m *GetDomainsByPlanetIDRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type GetDomainsByPlanetIDResponse struct {
	Domains []*GetDomainsByPlanetIDResponse_DomainList `protobuf:"bytes,1,rep,name=Domains,proto3" json:"Domains,omitempty"`
}

func (m *GetDomainsByPlanetIDResponse) Reset()         { *m = GetDomainsByPlanetIDResponse{} }
func (m *GetDomainsByPlanetIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetDomainsByPlanetIDResponse) ProtoMessage()    {}
func (*GetDomainsByPlanetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b54682263b0d744, []int{1}
}
func (m *GetDomainsByPlanetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDomainsByPlanetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDomainsByPlanetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDomainsByPlanetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDomainsByPlanetIDResponse.Merge(m, src)
}
func (m *GetDomainsByPlanetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDomainsByPlanetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDomainsByPlanetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDomainsByPlanetIDResponse proto.InternalMessageInfo

func (m *GetDomainsByPlanetIDResponse) GetDomains() []*GetDomainsByPlanetIDResponse_DomainList {
	if m != nil {
		return m.Domains
	}
	return nil
}

type GetDomainsByPlanetIDResponse_DomainList struct {
	Guild  *Guild `protobuf:"bytes,1,opt,name=Guild,proto3" json:"Guild,omitempty"`
	NKills int64  `protobuf:"varint,2,opt,name=NKills,proto3" json:"NKills,omitempty"`
}

func (m *GetDomainsByPlanetIDResponse_DomainList) Reset() {
	*m = GetDomainsByPlanetIDResponse_DomainList{}
}
func (m *GetDomainsByPlanetIDResponse_DomainList) String() string { return proto.CompactTextString(m) }
func (*GetDomainsByPlanetIDResponse_DomainList) ProtoMessage()    {}
func (*GetDomainsByPlanetIDResponse_DomainList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b54682263b0d744, []int{1, 0}
}
func (m *GetDomainsByPlanetIDResponse_DomainList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDomainsByPlanetIDResponse_DomainList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDomainsByPlanetIDResponse_DomainList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDomainsByPlanetIDResponse_DomainList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDomainsByPlanetIDResponse_DomainList.Merge(m, src)
}
func (m *GetDomainsByPlanetIDResponse_DomainList) XXX_Size() int {
	return m.Size()
}
func (m *GetDomainsByPlanetIDResponse_DomainList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDomainsByPlanetIDResponse_DomainList.DiscardUnknown(m)
}

var xxx_messageInfo_GetDomainsByPlanetIDResponse_DomainList proto.InternalMessageInfo

func (m *GetDomainsByPlanetIDResponse_DomainList) GetGuild() *Guild {
	if m != nil {
		return m.Guild
	}
	return nil
}

func (m *GetDomainsByPlanetIDResponse_DomainList) GetNKills() int64 {
	if m != nil {
		return m.NKills
	}
	return 0
}

// GetCurrentDomainByPlanetIDRequest
type GetCurrentDomainByPlanetIDRequest struct {
	PlanetID uint32 `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *GetCurrentDomainByPlanetIDRequest) Reset()         { *m = GetCurrentDomainByPlanetIDRequest{} }
func (m *GetCurrentDomainByPlanetIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentDomainByPlanetIDRequest) ProtoMessage()    {}
func (*GetCurrentDomainByPlanetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b54682263b0d744, []int{2}
}
func (m *GetCurrentDomainByPlanetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentDomainByPlanetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentDomainByPlanetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentDomainByPlanetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentDomainByPlanetIDRequest.Merge(m, src)
}
func (m *GetCurrentDomainByPlanetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentDomainByPlanetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentDomainByPlanetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentDomainByPlanetIDRequest proto.InternalMessageInfo

func (m *GetCurrentDomainByPlanetIDRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type GetCurrentDomainByPlanetIDResponse struct {
	Guild  *Guild `protobuf:"bytes,1,opt,name=Guild,proto3" json:"Guild,omitempty"`
	NKills int64  `protobuf:"varint,2,opt,name=NKills,proto3" json:"NKills,omitempty"`
}

func (m *GetCurrentDomainByPlanetIDResponse) Reset()         { *m = GetCurrentDomainByPlanetIDResponse{} }
func (m *GetCurrentDomainByPlanetIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentDomainByPlanetIDResponse) ProtoMessage()    {}
func (*GetCurrentDomainByPlanetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b54682263b0d744, []int{3}
}
func (m *GetCurrentDomainByPlanetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentDomainByPlanetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentDomainByPlanetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentDomainByPlanetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentDomainByPlanetIDResponse.Merge(m, src)
}
func (m *GetCurrentDomainByPlanetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentDomainByPlanetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentDomainByPlanetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentDomainByPlanetIDResponse proto.InternalMessageInfo

func (m *GetCurrentDomainByPlanetIDResponse) GetGuild() *Guild {
	if m != nil {
		return m.Guild
	}
	return nil
}

func (m *GetCurrentDomainByPlanetIDResponse) GetNKills() int64 {
	if m != nil {
		return m.NKills
	}
	return 0
}

func init() {
	proto.RegisterType((*GetDomainsByPlanetIDRequest)(nil), "domain.GetDomainsByPlanetIDRequest")
	proto.RegisterType((*GetDomainsByPlanetIDResponse)(nil), "domain.GetDomainsByPlanetIDResponse")
	proto.RegisterType((*GetDomainsByPlanetIDResponse_DomainList)(nil), "domain.GetDomainsByPlanetIDResponse.DomainList")
	proto.RegisterType((*GetCurrentDomainByPlanetIDRequest)(nil), "domain.GetCurrentDomainByPlanetIDRequest")
	proto.RegisterType((*GetCurrentDomainByPlanetIDResponse)(nil), "domain.GetCurrentDomainByPlanetIDResponse")
}

func init() { proto.RegisterFile("proto/domain.proto", fileDescriptor_2b54682263b0d744) }

var fileDescriptor_2b54682263b0d744 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xc9, 0xcf, 0x4d, 0xcc, 0xcc, 0xd3, 0x03, 0x73, 0x84, 0xd8, 0x20, 0x3c, 0x29,
	0x41, 0x88, 0x5c, 0x7a, 0x69, 0x66, 0x4e, 0x0a, 0x44, 0x4a, 0xc9, 0x92, 0x4b, 0xda, 0x3d, 0xb5,
	0xc4, 0x05, 0x2c, 0x5f, 0xec, 0x54, 0x19, 0x90, 0x93, 0x98, 0x97, 0x5a, 0xe2, 0xe9, 0x12, 0x94,
	0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc5, 0xc5, 0x01, 0x13, 0x92, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0d, 0x82, 0xf3, 0x95, 0x36, 0x33, 0x72, 0xc9, 0x60, 0xd7, 0x5b, 0x5c, 0x90, 0x9f, 0x57,
	0x9c, 0x2a, 0xe4, 0xc9, 0xc5, 0x0e, 0x95, 0x94, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0xd2, 0xd7,
	0x83, 0x3a, 0x0b, 0x9f, 0x36, 0x3d, 0x88, 0x8c, 0x4f, 0x66, 0x71, 0x49, 0x10, 0x4c, 0xbf, 0x94,
	0x07, 0x17, 0x17, 0x42, 0x58, 0x48, 0x89, 0x8b, 0xd5, 0x1d, 0xe4, 0x07, 0xb0, 0x93, 0xb8, 0x8d,
	0x78, 0xf4, 0x20, 0x3e, 0x02, 0x8b, 0x05, 0x41, 0xa4, 0x84, 0xc4, 0xb8, 0xd8, 0xfc, 0xbc, 0x33,
	0x73, 0x72, 0x8a, 0x25, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0xa0, 0x3c, 0x25, 0x7b, 0x2e, 0x45,
	0xf7, 0xd4, 0x12, 0xe7, 0xd2, 0xa2, 0xa2, 0xd4, 0x3c, 0xa8, 0x23, 0x48, 0xf3, 0x76, 0x02, 0x97,
	0x12, 0x3e, 0x03, 0xa0, 0x7e, 0xa7, 0xc0, 0x89, 0x4e, 0x72, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78,
	0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc,
	0x78, 0x2c, 0xc7, 0x10, 0xc5, 0xa2, 0x67, 0x5d, 0x90, 0x94, 0xc4, 0x06, 0x8e, 0x3a, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0x33, 0x30, 0x6c, 0xeb, 0x01, 0x00, 0x00,
}

func (m *GetDomainsByPlanetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDomainsByPlanetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDomainsByPlanetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDomainsByPlanetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDomainsByPlanetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDomainsByPlanetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDomain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDomainsByPlanetIDResponse_DomainList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDomainsByPlanetIDResponse_DomainList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDomainsByPlanetIDResponse_DomainList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NKills != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.NKills))
		i--
		dAtA[i] = 0x10
	}
	if m.Guild != nil {
		{
			size, err := m.Guild.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentDomainByPlanetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentDomainByPlanetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentDomainByPlanetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentDomainByPlanetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentDomainByPlanetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentDomainByPlanetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NKills != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.NKills))
		i--
		dAtA[i] = 0x10
	}
	if m.Guild != nil {
		{
			size, err := m.Guild.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDomainsByPlanetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovDomain(uint64(m.PlanetID))
	}
	return n
}

func (m *GetDomainsByPlanetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovDomain(uint64(l))
		}
	}
	return n
}

func (m *GetDomainsByPlanetIDResponse_DomainList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.NKills != 0 {
		n += 1 + sovDomain(uint64(m.NKills))
	}
	return n
}

func (m *GetCurrentDomainByPlanetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovDomain(uint64(m.PlanetID))
	}
	return n
}

func (m *GetCurrentDomainByPlanetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.NKills != 0 {
		n += 1 + sovDomain(uint64(m.NKills))
	}
	return n
}

func sovDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDomain(x uint64) (n int) {
	return sovDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDomainsByPlanetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDomainsByPlanetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDomainsByPlanetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDomainsByPlanetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDomainsByPlanetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDomainsByPlanetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &GetDomainsByPlanetIDResponse_DomainList{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDomainsByPlanetIDResponse_DomainList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guild == nil {
				m.Guild = &Guild{}
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NKills", wireType)
			}
			m.NKills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NKills |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentDomainByPlanetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentDomainByPlanetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentDomainByPlanetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentDomainByPlanetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentDomainByPlanetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentDomainByPlanetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guild == nil {
				m.Guild = &Guild{}
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NKills", wireType)
			}
			m.NKills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NKills |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDomain = fmt.Errorf("proto: unexpected end of group")
)
