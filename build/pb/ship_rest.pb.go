// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/ship_rest.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetRestsInfo
type GetRestsInfoRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetRestsInfoRequest) Reset()         { *m = GetRestsInfoRequest{} }
func (m *GetRestsInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetRestsInfoRequest) ProtoMessage()    {}
func (*GetRestsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27bef38eeb2c890, []int{0}
}
func (m *GetRestsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRestsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRestsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRestsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRestsInfoRequest.Merge(m, src)
}
func (m *GetRestsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRestsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRestsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRestsInfoRequest proto.InternalMessageInfo

func (m *GetRestsInfoRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetRestsInfoResponse struct {
	NeedRests bool   `protobuf:"varint,1,opt,name=NeedRests,proto3" json:"NeedRests,omitempty"`
	RestsTime uint32 `protobuf:"varint,2,opt,name=RestsTime,proto3" json:"RestsTime,omitempty"`
}

func (m *GetRestsInfoResponse) Reset()         { *m = GetRestsInfoResponse{} }
func (m *GetRestsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetRestsInfoResponse) ProtoMessage()    {}
func (*GetRestsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27bef38eeb2c890, []int{1}
}
func (m *GetRestsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRestsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRestsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRestsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRestsInfoResponse.Merge(m, src)
}
func (m *GetRestsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRestsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRestsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRestsInfoResponse proto.InternalMessageInfo

func (m *GetRestsInfoResponse) GetNeedRests() bool {
	if m != nil {
		return m.NeedRests
	}
	return false
}

func (m *GetRestsInfoResponse) GetRestsTime() uint32 {
	if m != nil {
		return m.RestsTime
	}
	return 0
}

// StartPlayerRest
type StartPlayerRestRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *StartPlayerRestRequest) Reset()         { *m = StartPlayerRestRequest{} }
func (m *StartPlayerRestRequest) String() string { return proto.CompactTextString(m) }
func (*StartPlayerRestRequest) ProtoMessage()    {}
func (*StartPlayerRestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27bef38eeb2c890, []int{2}
}
func (m *StartPlayerRestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartPlayerRestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartPlayerRestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartPlayerRestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartPlayerRestRequest.Merge(m, src)
}
func (m *StartPlayerRestRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartPlayerRestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartPlayerRestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartPlayerRestRequest proto.InternalMessageInfo

func (m *StartPlayerRestRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type StartPlayerRestResponse struct {
	RestEndTime *types.Timestamp `protobuf:"bytes,1,opt,name=RestEndTime,proto3" json:"RestEndTime,omitempty"`
}

func (m *StartPlayerRestResponse) Reset()         { *m = StartPlayerRestResponse{} }
func (m *StartPlayerRestResponse) String() string { return proto.CompactTextString(m) }
func (*StartPlayerRestResponse) ProtoMessage()    {}
func (*StartPlayerRestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27bef38eeb2c890, []int{3}
}
func (m *StartPlayerRestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartPlayerRestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartPlayerRestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartPlayerRestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartPlayerRestResponse.Merge(m, src)
}
func (m *StartPlayerRestResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartPlayerRestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartPlayerRestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartPlayerRestResponse proto.InternalMessageInfo

func (m *StartPlayerRestResponse) GetRestEndTime() *types.Timestamp {
	if m != nil {
		return m.RestEndTime
	}
	return nil
}

// EndPlayerRest
type EndPlayerRestRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *EndPlayerRestRequest) Reset()         { *m = EndPlayerRestRequest{} }
func (m *EndPlayerRestRequest) String() string { return proto.CompactTextString(m) }
func (*EndPlayerRestRequest) ProtoMessage()    {}
func (*EndPlayerRestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27bef38eeb2c890, []int{4}
}
func (m *EndPlayerRestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndPlayerRestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndPlayerRestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndPlayerRestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndPlayerRestRequest.Merge(m, src)
}
func (m *EndPlayerRestRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndPlayerRestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndPlayerRestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndPlayerRestRequest proto.InternalMessageInfo

func (m *EndPlayerRestRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type EndPlayerRestResponse struct {
	LifeRecovered int64 `protobuf:"varint,1,opt,name=LifeRecovered,proto3" json:"LifeRecovered,omitempty"`
}

func (m *EndPlayerRestResponse) Reset()         { *m = EndPlayerRestResponse{} }
func (m *EndPlayerRestResponse) String() string { return proto.CompactTextString(m) }
func (*EndPlayerRestResponse) ProtoMessage()    {}
func (*EndPlayerRestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27bef38eeb2c890, []int{5}
}
func (m *EndPlayerRestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndPlayerRestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndPlayerRestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndPlayerRestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndPlayerRestResponse.Merge(m, src)
}
func (m *EndPlayerRestResponse) XXX_Size() int {
	return m.Size()
}
func (m *EndPlayerRestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndPlayerRestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndPlayerRestResponse proto.InternalMessageInfo

func (m *EndPlayerRestResponse) GetLifeRecovered() int64 {
	if m != nil {
		return m.LifeRecovered
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRestsInfoRequest)(nil), "ship_rest.GetRestsInfoRequest")
	proto.RegisterType((*GetRestsInfoResponse)(nil), "ship_rest.GetRestsInfoResponse")
	proto.RegisterType((*StartPlayerRestRequest)(nil), "ship_rest.StartPlayerRestRequest")
	proto.RegisterType((*StartPlayerRestResponse)(nil), "ship_rest.StartPlayerRestResponse")
	proto.RegisterType((*EndPlayerRestRequest)(nil), "ship_rest.EndPlayerRestRequest")
	proto.RegisterType((*EndPlayerRestResponse)(nil), "ship_rest.EndPlayerRestResponse")
}

func init() { proto.RegisterFile("proto/ship_rest.proto", fileDescriptor_b27bef38eeb2c890) }

var fileDescriptor_b27bef38eeb2c890 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xce, 0xc8, 0x2c, 0x88, 0x2f, 0x4a, 0x2d, 0x2e, 0xd1, 0x03, 0xf3, 0x85, 0x38,
	0xe1, 0x02, 0x52, 0xf2, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0x89, 0xa4, 0xd2, 0x34,
	0xfd, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x02, 0x88, 0x5a, 0x25, 0x43, 0x2e, 0x61,
	0xf7, 0xd4, 0x92, 0xa0, 0xd4, 0xe2, 0x92, 0x62, 0xcf, 0xbc, 0xb4, 0xfc, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x21, 0x29, 0x2e, 0x8e, 0x80, 0x9c, 0xc4, 0xca, 0xd4, 0x22, 0x4f, 0x17, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x38, 0x5f, 0x29, 0x88, 0x4b, 0x04, 0x55, 0x4b, 0x71, 0x41,
	0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x0c, 0x17, 0xa7, 0x5f, 0x6a, 0x6a, 0x0a, 0x58, 0x02, 0xac, 0x89,
	0x23, 0x08, 0x21, 0x00, 0x92, 0x05, 0x33, 0x42, 0x32, 0x73, 0x53, 0x25, 0x98, 0xc0, 0x46, 0x22,
	0x04, 0x94, 0x4c, 0xb8, 0xc4, 0x82, 0x4b, 0x12, 0x8b, 0x4a, 0x20, 0x96, 0x80, 0xc4, 0x89, 0x71,
	0x49, 0x38, 0x97, 0x38, 0x86, 0x2e, 0xa8, 0x63, 0x6c, 0xb8, 0xb8, 0x41, 0x7c, 0xd7, 0xbc, 0x14,
	0xb0, 0x85, 0x20, 0x9d, 0xdc, 0x46, 0x52, 0x7a, 0x90, 0xe0, 0xd0, 0x83, 0x05, 0x87, 0x5e, 0x08,
	0x2c, 0x38, 0x82, 0x90, 0x95, 0x2b, 0x19, 0x71, 0x89, 0xb8, 0xe6, 0xa5, 0x90, 0xe6, 0x18, 0x5b,
	0x2e, 0x51, 0x34, 0x3d, 0x50, 0xa7, 0xa8, 0x70, 0xf1, 0xfa, 0x64, 0xa6, 0xa5, 0x06, 0xa5, 0x26,
	0xe7, 0x97, 0xa5, 0x16, 0xa5, 0xa6, 0x80, 0x75, 0x32, 0x07, 0xa1, 0x0a, 0x3a, 0xc9, 0x9d, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c,
	0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x8b, 0x9e, 0x75, 0x41, 0x52, 0x12, 0x1b,
	0xd8, 0xcd, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x38, 0xea, 0xb9, 0xf4, 0x01, 0x00,
	0x00,
}

func (m *GetRestsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRestsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRestsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintShipRest(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRestsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRestsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRestsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestsTime != 0 {
		i = encodeVarintShipRest(dAtA, i, uint64(m.RestsTime))
		i--
		dAtA[i] = 0x10
	}
	if m.NeedRests {
		i--
		if m.NeedRests {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartPlayerRestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartPlayerRestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartPlayerRestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintShipRest(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartPlayerRestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartPlayerRestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartPlayerRestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestEndTime != nil {
		{
			size, err := m.RestEndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShipRest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndPlayerRestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndPlayerRestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndPlayerRestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintShipRest(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndPlayerRestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndPlayerRestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndPlayerRestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LifeRecovered != 0 {
		i = encodeVarintShipRest(dAtA, i, uint64(m.LifeRecovered))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShipRest(dAtA []byte, offset int, v uint64) int {
	offset -= sovShipRest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRestsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovShipRest(uint64(m.PlayerID))
	}
	return n
}

func (m *GetRestsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NeedRests {
		n += 2
	}
	if m.RestsTime != 0 {
		n += 1 + sovShipRest(uint64(m.RestsTime))
	}
	return n
}

func (m *StartPlayerRestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovShipRest(uint64(m.PlayerID))
	}
	return n
}

func (m *StartPlayerRestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RestEndTime != nil {
		l = m.RestEndTime.Size()
		n += 1 + l + sovShipRest(uint64(l))
	}
	return n
}

func (m *EndPlayerRestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovShipRest(uint64(m.PlayerID))
	}
	return n
}

func (m *EndPlayerRestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LifeRecovered != 0 {
		n += 1 + sovShipRest(uint64(m.LifeRecovered))
	}
	return n
}

func sovShipRest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShipRest(x uint64) (n int) {
	return sovShipRest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRestsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShipRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRestsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRestsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRestsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShipRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRestsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRestsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedRests", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedRests = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestsTime", wireType)
			}
			m.RestsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestsTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartPlayerRestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShipRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartPlayerRestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartPlayerRestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartPlayerRestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShipRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartPlayerRestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartPlayerRestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShipRest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShipRest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RestEndTime == nil {
				m.RestEndTime = &types.Timestamp{}
			}
			if err := m.RestEndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndPlayerRestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShipRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndPlayerRestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndPlayerRestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndPlayerRestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShipRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndPlayerRestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndPlayerRestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeRecovered", wireType)
			}
			m.LifeRecovered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifeRecovered |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShipRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShipRest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShipRest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShipRest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShipRest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShipRest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShipRest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShipRest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShipRest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShipRest = fmt.Errorf("proto: unexpected end of group")
)
