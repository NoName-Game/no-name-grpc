// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/conqueror.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetConquerorsByPlanetID
type GetConquerorsByPlanetIDRequest struct {
	PlanetID             uint32   `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConquerorsByPlanetIDRequest) Reset()         { *m = GetConquerorsByPlanetIDRequest{} }
func (m *GetConquerorsByPlanetIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetConquerorsByPlanetIDRequest) ProtoMessage()    {}
func (*GetConquerorsByPlanetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd3dfc696cda7c8, []int{0}
}
func (m *GetConquerorsByPlanetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConquerorsByPlanetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConquerorsByPlanetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConquerorsByPlanetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConquerorsByPlanetIDRequest.Merge(m, src)
}
func (m *GetConquerorsByPlanetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetConquerorsByPlanetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConquerorsByPlanetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConquerorsByPlanetIDRequest proto.InternalMessageInfo

func (m *GetConquerorsByPlanetIDRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type GetConquerorsByPlanetIDResponse struct {
	Conquerors           []*GetConquerorsByPlanetIDResponse_ConquerorList `protobuf:"bytes,1,rep,name=Conquerors,proto3" json:"Conquerors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *GetConquerorsByPlanetIDResponse) Reset()         { *m = GetConquerorsByPlanetIDResponse{} }
func (m *GetConquerorsByPlanetIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetConquerorsByPlanetIDResponse) ProtoMessage()    {}
func (*GetConquerorsByPlanetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd3dfc696cda7c8, []int{1}
}
func (m *GetConquerorsByPlanetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConquerorsByPlanetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConquerorsByPlanetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConquerorsByPlanetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConquerorsByPlanetIDResponse.Merge(m, src)
}
func (m *GetConquerorsByPlanetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetConquerorsByPlanetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConquerorsByPlanetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConquerorsByPlanetIDResponse proto.InternalMessageInfo

func (m *GetConquerorsByPlanetIDResponse) GetConquerors() []*GetConquerorsByPlanetIDResponse_ConquerorList {
	if m != nil {
		return m.Conquerors
	}
	return nil
}

type GetConquerorsByPlanetIDResponse_ConquerorList struct {
	Player               *Player  `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
	NKills               int64    `protobuf:"varint,2,opt,name=NKills,proto3" json:"NKills,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConquerorsByPlanetIDResponse_ConquerorList) Reset() {
	*m = GetConquerorsByPlanetIDResponse_ConquerorList{}
}
func (m *GetConquerorsByPlanetIDResponse_ConquerorList) String() string {
	return proto.CompactTextString(m)
}
func (*GetConquerorsByPlanetIDResponse_ConquerorList) ProtoMessage() {}
func (*GetConquerorsByPlanetIDResponse_ConquerorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd3dfc696cda7c8, []int{1, 0}
}
func (m *GetConquerorsByPlanetIDResponse_ConquerorList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConquerorsByPlanetIDResponse_ConquerorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConquerorsByPlanetIDResponse_ConquerorList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConquerorsByPlanetIDResponse_ConquerorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConquerorsByPlanetIDResponse_ConquerorList.Merge(m, src)
}
func (m *GetConquerorsByPlanetIDResponse_ConquerorList) XXX_Size() int {
	return m.Size()
}
func (m *GetConquerorsByPlanetIDResponse_ConquerorList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConquerorsByPlanetIDResponse_ConquerorList.DiscardUnknown(m)
}

var xxx_messageInfo_GetConquerorsByPlanetIDResponse_ConquerorList proto.InternalMessageInfo

func (m *GetConquerorsByPlanetIDResponse_ConquerorList) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *GetConquerorsByPlanetIDResponse_ConquerorList) GetNKills() int64 {
	if m != nil {
		return m.NKills
	}
	return 0
}

// GetCurrentConquerorByPlanetIDRequest
type GetCurrentConquerorByPlanetIDRequest struct {
	PlanetID             uint32   `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentConquerorByPlanetIDRequest) Reset()         { *m = GetCurrentConquerorByPlanetIDRequest{} }
func (m *GetCurrentConquerorByPlanetIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentConquerorByPlanetIDRequest) ProtoMessage()    {}
func (*GetCurrentConquerorByPlanetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd3dfc696cda7c8, []int{2}
}
func (m *GetCurrentConquerorByPlanetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentConquerorByPlanetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentConquerorByPlanetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentConquerorByPlanetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentConquerorByPlanetIDRequest.Merge(m, src)
}
func (m *GetCurrentConquerorByPlanetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentConquerorByPlanetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentConquerorByPlanetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentConquerorByPlanetIDRequest proto.InternalMessageInfo

func (m *GetCurrentConquerorByPlanetIDRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type GetCurrentConquerorByPlanetIDResponse struct {
	Player               *Player  `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
	NKills               int64    `protobuf:"varint,2,opt,name=NKills,proto3" json:"NKills,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentConquerorByPlanetIDResponse) Reset()         { *m = GetCurrentConquerorByPlanetIDResponse{} }
func (m *GetCurrentConquerorByPlanetIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentConquerorByPlanetIDResponse) ProtoMessage()    {}
func (*GetCurrentConquerorByPlanetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd3dfc696cda7c8, []int{3}
}
func (m *GetCurrentConquerorByPlanetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentConquerorByPlanetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentConquerorByPlanetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentConquerorByPlanetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentConquerorByPlanetIDResponse.Merge(m, src)
}
func (m *GetCurrentConquerorByPlanetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentConquerorByPlanetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentConquerorByPlanetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentConquerorByPlanetIDResponse proto.InternalMessageInfo

func (m *GetCurrentConquerorByPlanetIDResponse) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *GetCurrentConquerorByPlanetIDResponse) GetNKills() int64 {
	if m != nil {
		return m.NKills
	}
	return 0
}

func init() {
	proto.RegisterType((*GetConquerorsByPlanetIDRequest)(nil), "conqueror.GetConquerorsByPlanetIDRequest")
	proto.RegisterType((*GetConquerorsByPlanetIDResponse)(nil), "conqueror.GetConquerorsByPlanetIDResponse")
	proto.RegisterType((*GetConquerorsByPlanetIDResponse_ConquerorList)(nil), "conqueror.GetConquerorsByPlanetIDResponse.ConquerorList")
	proto.RegisterType((*GetCurrentConquerorByPlanetIDRequest)(nil), "conqueror.GetCurrentConquerorByPlanetIDRequest")
	proto.RegisterType((*GetCurrentConquerorByPlanetIDResponse)(nil), "conqueror.GetCurrentConquerorByPlanetIDResponse")
}

func init() { proto.RegisterFile("proto/conqueror.proto", fileDescriptor_1bd3dfc696cda7c8) }

var fileDescriptor_1bd3dfc696cda7c8 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0xcf, 0x2b, 0x2c, 0x4d, 0x2d, 0xca, 0x2f, 0xd2, 0x03, 0xf3, 0x85, 0x38,
	0xe1, 0x02, 0x52, 0x42, 0x10, 0x15, 0x05, 0x39, 0x89, 0x95, 0xa9, 0x50, 0x69, 0x25, 0x1b, 0x2e,
	0x39, 0xf7, 0xd4, 0x12, 0x67, 0x98, 0x9a, 0x62, 0xa7, 0xca, 0x80, 0x9c, 0xc4, 0xbc, 0xd4, 0x12,
	0x4f, 0x97, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x29, 0x2e, 0x0e, 0x98, 0x90, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x9c, 0xaf, 0x74, 0x86, 0x91, 0x4b, 0x1e, 0xa7, 0xf6, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa1, 0x08, 0x2e, 0x2e, 0x84, 0xbc, 0x04, 0xa3, 0x02, 0xb3, 0x06,
	0xb7, 0x91, 0x85, 0x1e, 0xc2, 0x99, 0x04, 0xf4, 0xeb, 0xc1, 0x25, 0x7d, 0x32, 0x8b, 0x4b, 0x82,
	0x90, 0xcc, 0x92, 0xf2, 0xe7, 0xe2, 0x45, 0x91, 0x14, 0x52, 0xe3, 0x62, 0x0b, 0x00, 0x7b, 0x0e,
	0xec, 0x50, 0x6e, 0x23, 0x3e, 0x3d, 0xa8, 0x5f, 0x21, 0xa2, 0x41, 0x50, 0x59, 0x21, 0x31, 0x2e,
	0x36, 0x3f, 0xef, 0xcc, 0x9c, 0x9c, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x28, 0x4f,
	0xc9, 0x89, 0x4b, 0x05, 0xe4, 0x9a, 0xd2, 0xa2, 0xa2, 0xd4, 0x3c, 0x84, 0xa3, 0x48, 0x0b, 0x92,
	0x74, 0x2e, 0x55, 0x02, 0x66, 0x40, 0xc3, 0x85, 0x42, 0xc7, 0x3a, 0x09, 0x9d, 0x78, 0x24, 0xc7,
	0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x51, 0x2c, 0x7a, 0xd6, 0x05, 0x49, 0x49,
	0x6c, 0xe0, 0x48, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x27, 0x63, 0xf8, 0xb7, 0x0c, 0x02,
	0x00, 0x00,
}

func (m *GetConquerorsByPlanetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConquerorsByPlanetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConquerorsByPlanetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlanetID != 0 {
		i = encodeVarintConqueror(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetConquerorsByPlanetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConquerorsByPlanetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConquerorsByPlanetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Conquerors) > 0 {
		for iNdEx := len(m.Conquerors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conquerors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConqueror(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetConquerorsByPlanetIDResponse_ConquerorList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConquerorsByPlanetIDResponse_ConquerorList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConquerorsByPlanetIDResponse_ConquerorList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NKills != 0 {
		i = encodeVarintConqueror(dAtA, i, uint64(m.NKills))
		i--
		dAtA[i] = 0x10
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConqueror(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentConquerorByPlanetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentConquerorByPlanetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentConquerorByPlanetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlanetID != 0 {
		i = encodeVarintConqueror(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentConquerorByPlanetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentConquerorByPlanetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentConquerorByPlanetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NKills != 0 {
		i = encodeVarintConqueror(dAtA, i, uint64(m.NKills))
		i--
		dAtA[i] = 0x10
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConqueror(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConqueror(dAtA []byte, offset int, v uint64) int {
	offset -= sovConqueror(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetConquerorsByPlanetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovConqueror(uint64(m.PlanetID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConquerorsByPlanetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conquerors) > 0 {
		for _, e := range m.Conquerors {
			l = e.Size()
			n += 1 + l + sovConqueror(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConquerorsByPlanetIDResponse_ConquerorList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovConqueror(uint64(l))
	}
	if m.NKills != 0 {
		n += 1 + sovConqueror(uint64(m.NKills))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCurrentConquerorByPlanetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovConqueror(uint64(m.PlanetID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCurrentConquerorByPlanetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovConqueror(uint64(l))
	}
	if m.NKills != 0 {
		n += 1 + sovConqueror(uint64(m.NKills))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConqueror(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConqueror(x uint64) (n int) {
	return sovConqueror(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetConquerorsByPlanetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConqueror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConquerorsByPlanetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConquerorsByPlanetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConqueror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConquerorsByPlanetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConqueror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConquerorsByPlanetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConquerorsByPlanetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conquerors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConqueror
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConqueror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conquerors = append(m.Conquerors, &GetConquerorsByPlanetIDResponse_ConquerorList{})
			if err := m.Conquerors[len(m.Conquerors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConqueror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConquerorsByPlanetIDResponse_ConquerorList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConqueror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConquerorList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConquerorList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConqueror
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConqueror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NKills", wireType)
			}
			m.NKills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NKills |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConqueror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentConquerorByPlanetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConqueror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentConquerorByPlanetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentConquerorByPlanetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConqueror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentConquerorByPlanetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConqueror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentConquerorByPlanetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentConquerorByPlanetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConqueror
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConqueror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NKills", wireType)
			}
			m.NKills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NKills |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConqueror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConqueror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConqueror(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConqueror
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConqueror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConqueror
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConqueror
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConqueror
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConqueror        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConqueror          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConqueror = fmt.Errorf("proto: unexpected end of group")
)
