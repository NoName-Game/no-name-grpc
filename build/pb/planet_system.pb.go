// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/planet_system.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlanetSystem struct {
	ID        uint32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Size_     float64 `protobuf:"fixed64,3,opt,name=Size,proto3" json:"Size,omitempty"`
	Density   int32   `protobuf:"varint,4,opt,name=Density,proto3" json:"Density,omitempty"`
	Deviation int32   `protobuf:"varint,5,opt,name=Deviation,proto3" json:"Deviation,omitempty"`
}

func (m *PlanetSystem) Reset()         { *m = PlanetSystem{} }
func (m *PlanetSystem) String() string { return proto.CompactTextString(m) }
func (*PlanetSystem) ProtoMessage()    {}
func (*PlanetSystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30d9dd40dc88634, []int{0}
}
func (m *PlanetSystem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlanetSystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlanetSystem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlanetSystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanetSystem.Merge(m, src)
}
func (m *PlanetSystem) XXX_Size() int {
	return m.Size()
}
func (m *PlanetSystem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanetSystem.DiscardUnknown(m)
}

var xxx_messageInfo_PlanetSystem proto.InternalMessageInfo

func (m *PlanetSystem) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PlanetSystem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlanetSystem) GetSize_() float64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *PlanetSystem) GetDensity() int32 {
	if m != nil {
		return m.Density
	}
	return 0
}

func (m *PlanetSystem) GetDeviation() int32 {
	if m != nil {
		return m.Deviation
	}
	return 0
}

func init() {
	proto.RegisterType((*PlanetSystem)(nil), "planet_system.PlanetSystem")
}

func init() { proto.RegisterFile("proto/planet_system.proto", fileDescriptor_c30d9dd40dc88634) }

var fileDescriptor_c30d9dd40dc88634 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xc8, 0x49, 0xcc, 0x4b, 0x2d, 0x89, 0x2f, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0xd5,
	0x03, 0x8b, 0x09, 0xf1, 0xa2, 0x08, 0x2a, 0xd5, 0x71, 0xf1, 0x04, 0x80, 0x05, 0x82, 0xc1, 0x7c,
	0x21, 0x3e, 0x2e, 0x26, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x26, 0x4f, 0x17,
	0x21, 0x21, 0x2e, 0x16, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30,
	0x1b, 0x24, 0x16, 0x9c, 0x59, 0x95, 0x2a, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x18, 0x04, 0x66, 0x0b,
	0x49, 0x70, 0xb1, 0xbb, 0xa4, 0xe6, 0x15, 0x67, 0x96, 0x54, 0x4a, 0xb0, 0x28, 0x30, 0x6a, 0xb0,
	0x06, 0xc1, 0xb8, 0x42, 0x32, 0x5c, 0x9c, 0x2e, 0xa9, 0x65, 0x99, 0x89, 0x25, 0x99, 0xf9, 0x79,
	0x12, 0xac, 0x60, 0x39, 0x84, 0x80, 0x93, 0xdc, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x44, 0xb1, 0xe8, 0x59, 0x17, 0x24, 0x25, 0xb1, 0x81, 0x5d, 0x6d, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xca, 0x17, 0x61, 0x23, 0xd2, 0x00, 0x00, 0x00,
}

func (m *PlanetSystem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanetSystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlanetSystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deviation != 0 {
		i = encodeVarintPlanetSystem(dAtA, i, uint64(m.Deviation))
		i--
		dAtA[i] = 0x28
	}
	if m.Density != 0 {
		i = encodeVarintPlanetSystem(dAtA, i, uint64(m.Density))
		i--
		dAtA[i] = 0x20
	}
	if m.Size_ != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Size_))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlanetSystem(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPlanetSystem(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlanetSystem(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlanetSystem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlanetSystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlanetSystem(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlanetSystem(uint64(l))
	}
	if m.Size_ != 0 {
		n += 9
	}
	if m.Density != 0 {
		n += 1 + sovPlanetSystem(uint64(m.Density))
	}
	if m.Deviation != 0 {
		n += 1 + sovPlanetSystem(uint64(m.Deviation))
	}
	return n
}

func sovPlanetSystem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlanetSystem(x uint64) (n int) {
	return sovPlanetSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlanetSystem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlanetSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanetSystem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanetSystem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlanetSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlanetSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Size_ = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Density", wireType)
			}
			m.Density = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Density |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deviation", wireType)
			}
			m.Deviation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlanetSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deviation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlanetSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlanetSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlanetSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlanetSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlanetSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlanetSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlanetSystem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlanetSystem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlanetSystem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlanetSystem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlanetSystem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlanetSystem = fmt.Errorf("proto: unexpected end of group")
)
