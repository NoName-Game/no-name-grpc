// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dark_merchant.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetDarkMerchant
type GetDarkMerchantRequest struct {
}

func (m *GetDarkMerchantRequest) Reset()         { *m = GetDarkMerchantRequest{} }
func (m *GetDarkMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*GetDarkMerchantRequest) ProtoMessage()    {}
func (*GetDarkMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d2eb9ac93a5deb7, []int{0}
}
func (m *GetDarkMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDarkMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDarkMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDarkMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDarkMerchantRequest.Merge(m, src)
}
func (m *GetDarkMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDarkMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDarkMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDarkMerchantRequest proto.InternalMessageInfo

type GetDarkMerchantResponse struct {
	PlanetID  uint32                                          `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
	Resources []*GetDarkMerchantResponse_DarMerchantResources `protobuf:"bytes,2,rep,name=Resources,proto3" json:"Resources,omitempty"`
}

func (m *GetDarkMerchantResponse) Reset()         { *m = GetDarkMerchantResponse{} }
func (m *GetDarkMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*GetDarkMerchantResponse) ProtoMessage()    {}
func (*GetDarkMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d2eb9ac93a5deb7, []int{1}
}
func (m *GetDarkMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDarkMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDarkMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDarkMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDarkMerchantResponse.Merge(m, src)
}
func (m *GetDarkMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDarkMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDarkMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDarkMerchantResponse proto.InternalMessageInfo

func (m *GetDarkMerchantResponse) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

func (m *GetDarkMerchantResponse) GetResources() []*GetDarkMerchantResponse_DarMerchantResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type GetDarkMerchantResponse_DarMerchantResources struct {
	Resource *Resource `protobuf:"bytes,1,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Price    int64     `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (m *GetDarkMerchantResponse_DarMerchantResources) Reset() {
	*m = GetDarkMerchantResponse_DarMerchantResources{}
}
func (m *GetDarkMerchantResponse_DarMerchantResources) String() string {
	return proto.CompactTextString(m)
}
func (*GetDarkMerchantResponse_DarMerchantResources) ProtoMessage() {}
func (*GetDarkMerchantResponse_DarMerchantResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d2eb9ac93a5deb7, []int{1, 0}
}
func (m *GetDarkMerchantResponse_DarMerchantResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDarkMerchantResponse_DarMerchantResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDarkMerchantResponse_DarMerchantResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDarkMerchantResponse_DarMerchantResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDarkMerchantResponse_DarMerchantResources.Merge(m, src)
}
func (m *GetDarkMerchantResponse_DarMerchantResources) XXX_Size() int {
	return m.Size()
}
func (m *GetDarkMerchantResponse_DarMerchantResources) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDarkMerchantResponse_DarMerchantResources.DiscardUnknown(m)
}

var xxx_messageInfo_GetDarkMerchantResponse_DarMerchantResources proto.InternalMessageInfo

func (m *GetDarkMerchantResponse_DarMerchantResources) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *GetDarkMerchantResponse_DarMerchantResources) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// DarkMerchantBuyResource
type DarkMerchantBuyResourceRequest struct {
	PlayerID   uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	ResourceID uint32 `protobuf:"varint,2,opt,name=ResourceID,proto3" json:"ResourceID,omitempty"`
	Price      int64  `protobuf:"varint,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity   int64  `protobuf:"varint,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (m *DarkMerchantBuyResourceRequest) Reset()         { *m = DarkMerchantBuyResourceRequest{} }
func (m *DarkMerchantBuyResourceRequest) String() string { return proto.CompactTextString(m) }
func (*DarkMerchantBuyResourceRequest) ProtoMessage()    {}
func (*DarkMerchantBuyResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d2eb9ac93a5deb7, []int{2}
}
func (m *DarkMerchantBuyResourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DarkMerchantBuyResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DarkMerchantBuyResourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DarkMerchantBuyResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DarkMerchantBuyResourceRequest.Merge(m, src)
}
func (m *DarkMerchantBuyResourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DarkMerchantBuyResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DarkMerchantBuyResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DarkMerchantBuyResourceRequest proto.InternalMessageInfo

func (m *DarkMerchantBuyResourceRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DarkMerchantBuyResourceRequest) GetResourceID() uint32 {
	if m != nil {
		return m.ResourceID
	}
	return 0
}

func (m *DarkMerchantBuyResourceRequest) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *DarkMerchantBuyResourceRequest) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type DarkMerchantBuyResourceResponse struct {
}

func (m *DarkMerchantBuyResourceResponse) Reset()         { *m = DarkMerchantBuyResourceResponse{} }
func (m *DarkMerchantBuyResourceResponse) String() string { return proto.CompactTextString(m) }
func (*DarkMerchantBuyResourceResponse) ProtoMessage()    {}
func (*DarkMerchantBuyResourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d2eb9ac93a5deb7, []int{3}
}
func (m *DarkMerchantBuyResourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DarkMerchantBuyResourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DarkMerchantBuyResourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DarkMerchantBuyResourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DarkMerchantBuyResourceResponse.Merge(m, src)
}
func (m *DarkMerchantBuyResourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *DarkMerchantBuyResourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DarkMerchantBuyResourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DarkMerchantBuyResourceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetDarkMerchantRequest)(nil), "dark_merchant.GetDarkMerchantRequest")
	proto.RegisterType((*GetDarkMerchantResponse)(nil), "dark_merchant.GetDarkMerchantResponse")
	proto.RegisterType((*GetDarkMerchantResponse_DarMerchantResources)(nil), "dark_merchant.GetDarkMerchantResponse.DarMerchantResources")
	proto.RegisterType((*DarkMerchantBuyResourceRequest)(nil), "dark_merchant.DarkMerchantBuyResourceRequest")
	proto.RegisterType((*DarkMerchantBuyResourceResponse)(nil), "dark_merchant.DarkMerchantBuyResourceResponse")
}

func init() { proto.RegisterFile("proto/dark_merchant.proto", fileDescriptor_5d2eb9ac93a5deb7) }

var fileDescriptor_5d2eb9ac93a5deb7 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0xac, 0xdb, 0x82, 0xca, 0xab, 0xba, 0x58, 0x11, 0x84, 0x0c, 0x26, 0x64, 0xca, 0x64, 0xa4,
	0x32, 0x76, 0xab, 0x22, 0xa1, 0x0e, 0x48, 0xc5, 0x1b, 0x08, 0x09, 0xb9, 0xc1, 0x12, 0x55, 0x21,
	0x09, 0x8e, 0x33, 0xe4, 0x27, 0x10, 0x9f, 0xc5, 0xd8, 0x91, 0x11, 0x25, 0x3b, 0xdf, 0x80, 0xb0,
	0x93, 0x34, 0x11, 0x74, 0xbc, 0x7b, 0xe7, 0x7b, 0x77, 0xcf, 0x70, 0x9a, 0xc8, 0x58, 0xc5, 0x17,
	0x8f, 0x5c, 0x6e, 0x1e, 0x5e, 0x84, 0x0c, 0x9f, 0x78, 0xa4, 0xa8, 0xe6, 0xf0, 0xa4, 0x43, 0x3a,
	0x96, 0x51, 0x4a, 0x91, 0xc6, 0x99, 0x0c, 0x85, 0x11, 0x79, 0x36, 0x1c, 0x5f, 0x09, 0x15, 0x70,
	0xb9, 0xb9, 0xae, 0x84, 0x4c, 0xbc, 0x66, 0x22, 0x55, 0xde, 0x37, 0x82, 0x93, 0x3f, 0xa3, 0x34,
	0x89, 0xa3, 0x54, 0x60, 0x07, 0x46, 0xcb, 0x67, 0x1e, 0x09, 0xb5, 0x08, 0x6c, 0xe4, 0x22, 0x7f,
	0xc2, 0x1a, 0x8c, 0x6f, 0xe1, 0x88, 0x55, 0x3b, 0x52, 0xbb, 0xef, 0x0e, 0xfc, 0xf1, 0x74, 0x46,
	0xbb, 0xf9, 0xf6, 0xd8, 0xd2, 0x80, 0xcb, 0x16, 0x67, 0x2c, 0xd8, 0xce, 0xcd, 0xb9, 0x07, 0xeb,
	0x3f, 0x09, 0xa6, 0x30, 0xaa, 0x81, 0x8e, 0x33, 0x9e, 0x62, 0xda, 0xf4, 0xac, 0x27, 0xac, 0xd1,
	0x60, 0x0b, 0x0e, 0x96, 0x72, 0x1d, 0x0a, 0xbb, 0xef, 0x22, 0x7f, 0xc0, 0x0c, 0xf0, 0xde, 0x10,
	0x90, 0x76, 0xac, 0x79, 0x96, 0x37, 0x6f, 0xcd, 0x4d, 0xaa, 0xde, 0xb9, 0x90, 0x9d, 0xde, 0x1a,
	0x63, 0x02, 0x50, 0xcb, 0x17, 0x81, 0x76, 0x9e, 0xb0, 0x16, 0xb3, 0x5b, 0x3a, 0x68, 0x2d, 0xfd,
	0x75, 0xbc, 0xc9, 0x78, 0xa4, 0xd6, 0x2a, 0xb7, 0x87, 0x7a, 0xd0, 0x60, 0xef, 0x1c, 0xce, 0xf6,
	0xe6, 0x31, 0x17, 0x9b, 0x93, 0x8f, 0x82, 0xa0, 0x6d, 0x41, 0xd0, 0x57, 0x41, 0xd0, 0x7b, 0x49,
	0x7a, 0xdb, 0x92, 0xf4, 0x3e, 0x4b, 0xd2, 0xbb, 0x1b, 0xd2, 0x59, 0xb2, 0x5a, 0x1d, 0xea, 0x5f,
	0xbe, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xba, 0xbc, 0x39, 0xb3, 0x27, 0x02, 0x00, 0x00,
}

func (m *GetDarkMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDarkMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDarkMerchantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetDarkMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDarkMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDarkMerchantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDarkMerchant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PlanetID != 0 {
		i = encodeVarintDarkMerchant(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDarkMerchantResponse_DarMerchantResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDarkMerchantResponse_DarMerchantResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDarkMerchantResponse_DarMerchantResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintDarkMerchant(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDarkMerchant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DarkMerchantBuyResourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkMerchantBuyResourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DarkMerchantBuyResourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintDarkMerchant(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintDarkMerchant(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if m.ResourceID != 0 {
		i = encodeVarintDarkMerchant(dAtA, i, uint64(m.ResourceID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintDarkMerchant(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DarkMerchantBuyResourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkMerchantBuyResourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DarkMerchantBuyResourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintDarkMerchant(dAtA []byte, offset int, v uint64) int {
	offset -= sovDarkMerchant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDarkMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetDarkMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovDarkMerchant(uint64(m.PlanetID))
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovDarkMerchant(uint64(l))
		}
	}
	return n
}

func (m *GetDarkMerchantResponse_DarMerchantResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovDarkMerchant(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovDarkMerchant(uint64(m.Price))
	}
	return n
}

func (m *DarkMerchantBuyResourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovDarkMerchant(uint64(m.PlayerID))
	}
	if m.ResourceID != 0 {
		n += 1 + sovDarkMerchant(uint64(m.ResourceID))
	}
	if m.Price != 0 {
		n += 1 + sovDarkMerchant(uint64(m.Price))
	}
	if m.Quantity != 0 {
		n += 1 + sovDarkMerchant(uint64(m.Quantity))
	}
	return n
}

func (m *DarkMerchantBuyResourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovDarkMerchant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDarkMerchant(x uint64) (n int) {
	return sovDarkMerchant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDarkMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDarkMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDarkMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDarkMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDarkMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDarkMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDarkMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &GetDarkMerchantResponse_DarMerchantResources{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDarkMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDarkMerchantResponse_DarMerchantResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarMerchantResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarMerchantResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkMerchantBuyResourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkMerchantBuyResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkMerchantBuyResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			m.ResourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkMerchantBuyResourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkMerchantBuyResourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkMerchantBuyResourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDarkMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDarkMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDarkMerchant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDarkMerchant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDarkMerchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDarkMerchant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDarkMerchant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDarkMerchant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDarkMerchant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDarkMerchant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDarkMerchant = fmt.Errorf("proto: unexpected end of group")
)
