// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noname.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("noname.proto", fileDescriptor_b1450381e16d9948) }

var fileDescriptor_b1450381e16d9948 = []byte{
	// 4225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5c, 0x59, 0x6f, 0x1c, 0xc7,
	0x76, 0xd6, 0x00, 0x81, 0x13, 0xb5, 0x74, 0xaf, 0xa4, 0xa2, 0x44, 0x52, 0x14, 0x45, 0x91, 0xda,
	0xd7, 0x96, 0xed, 0x1b, 0x59, 0xf2, 0xbd, 0x96, 0x6d, 0x92, 0x43, 0xd1, 0x74, 0x24, 0x45, 0x26,
	0x29, 0x3b, 0x76, 0x90, 0x30, 0xc5, 0x99, 0x22, 0xd9, 0x51, 0x4f, 0xf7, 0xa8, 0xbb, 0x87, 0xd2,
	0x38, 0x41, 0x10, 0x64, 0x41, 0x80, 0x04, 0x09, 0x12, 0x24, 0x48, 0x90, 0x27, 0x03, 0x79, 0xcd,
	0x1f, 0xc9, 0xa3, 0x1f, 0xf3, 0x18, 0xd8, 0xff, 0x22, 0x4f, 0x41, 0xd7, 0x72, 0xea, 0xd4, 0xd2,
	0xcb, 0x30, 0xc6, 0x7d, 0x22, 0x78, 0xbe, 0xef, 0x2c, 0xb5, 0x76, 0xd5, 0xa9, 0xaa, 0x09, 0x4e,
	0x26, 0x69, 0x42, 0x07, 0x2c, 0x1c, 0x66, 0x69, 0x91, 0xce, 0x11, 0xfe, 0xe7, 0x7e, 0x46, 0xb3,
	0xa8, 0x18, 0x4b, 0xd9, 0x19, 0x21, 0xa3, 0xd9, 0x20, 0xcd, 0xa4, 0x68, 0x0e, 0x89, 0x76, 0x7a,
	0xb4, 0x60, 0xfb, 0x69, 0x36, 0x36, 0x4d, 0xbc, 0x61, 0x74, 0x98, 0x26, 0xa6, 0x6c, 0x18, 0xd3,
	0x31, 0x53, 0x36, 0x2e, 0x60, 0xd9, 0x0e, 0xed, 0x15, 0xd1, 0xa1, 0xf6, 0x69, 0x82, 0xc3, 0x34,
	0x8f, 0x8a, 0x08, 0xac, 0xc9, 0x80, 0x58, 0xc2, 0x06, 0x8a, 0x7f, 0x5a, 0x88, 0xa2, 0x82, 0x0d,
	0xa4, 0xe4, 0xbc, 0x96, 0xd8, 0x11, 0x9e, 0x15, 0x50, 0x4c, 0x93, 0xfd, 0x11, 0xdd, 0x67, 0xa6,
	0xb4, 0x88, 0x06, 0xec, 0xdb, 0x34, 0x51, 0xd2, 0x69, 0x08, 0x24, 0x61, 0xc5, 0xce, 0x80, 0x0e,
	0xa5, 0xfc, 0x94, 0x90, 0x27, 0xc3, 0x9e, 0x53, 0xc4, 0x84, 0x15, 0xa6, 0xc9, 0x8c, 0xe5, 0xe9,
	0x28, 0xeb, 0x31, 0x33, 0xd6, 0xfc, 0x20, 0x1a, 0x9a, 0xb1, 0x96, 0x12, 0x3b, 0xd6, 0x39, 0xa3,
	0x22, 0x58, 0x2f, 0x4d, 0x52, 0x28, 0xf4, 0x94, 0x8c, 0x38, 0x63, 0xf9, 0x28, 0x63, 0xa6, 0x70,
	0x10, 0xe5, 0xb9, 0x53, 0x63, 0x45, 0x54, 0x50, 0x25, 0x3a, 0x27, 0x2b, 0xf1, 0xed, 0x90, 0x26,
	0x88, 0x39, 0x03, 0xe2, 0x38, 0xcd, 0x28, 0xaa, 0xf4, 0x45, 0x07, 0xb0, 0x43, 0x95, 0x16, 0x7b,
	0x69, 0xf2, 0x7a, 0xc4, 0x32, 0xe8, 0x2b, 0x33, 0xc8, 0xf7, 0x0e, 0x3b, 0x64, 0x89, 0xaa, 0x9d,
	0x05, 0x59, 0x6a, 0xba, 0xc7, 0x64, 0xf5, 0xf6, 0x32, 0xba, 0x57, 0xd8, 0x1d, 0x84, 0xd7, 0x4a,
	0x4c, 0x77, 0x4b, 0xaf, 0xda, 0xd9, 0x55, 0x47, 0xf9, 0x80, 0x26, 0xfb, 0x34, 0xdb, 0xc9, 0xd8,
	0x90, 0x46, 0x59, 0x13, 0xab, 0x97, 0x31, 0x5a, 0x30, 0x33, 0x70, 0xee, 0x28, 0x63, 0x79, 0x61,
	0x06, 0xce, 0xc5, 0x45, 0x46, 0x0f, 0x59, 0x6c, 0xf5, 0x94, 0x51, 0x91, 0x66, 0x11, 0x55, 0xd2,
	0x79, 0xa3, 0xa5, 0xa2, 0xa4, 0x2c, 0xa9, 0x8e, 0x77, 0xd1, 0x40, 0x7b, 0x69, 0xb2, 0x17, 0xed,
	0x8f, 0x8c, 0x0a, 0xbe, 0xe4, 0xc4, 0x9a, 0xb1, 0x9c, 0xd1, 0xac, 0x77, 0x60, 0xb6, 0x2c, 0xdd,
	0x8d, 0x62, 0x3d, 0x50, 0xe6, 0x0d, 0xa1, 0xdd, 0x24, 0xb2, 0xdd, 0xf7, 0x47, 0x51, 0xdc, 0x37,
	0x45, 0x43, 0x9a, 0x81, 0x8d, 0x19, 0xc4, 0xda, 0x19, 0xa6, 0x51, 0x62, 0xd5, 0x00, 0xed, 0x1d,
	0x44, 0xec, 0x90, 0x0d, 0x74, 0xd3, 0x2d, 0x3a, 0x80, 0xed, 0x79, 0xc1, 0x1a, 0xdd, 0xb6, 0x85,
	0x0b, 0xc6, 0xb8, 0xda, 0x4d, 0xd3, 0x57, 0x03, 0x9a, 0xbd, 0x92, 0xe0, 0x6d, 0x4f, 0x55, 0xc4,
	0xf4, 0xed, 0x4e, 0x71, 0x90, 0x31, 0xd6, 0xa3, 0x59, 0x7f, 0x5f, 0xcf, 0x58, 0x4b, 0x0e, 0x37,
	0x2f, 0x68, 0x11, 0xe5, 0x45, 0xd4, 0xcb, 0xcd, 0xe1, 0xd5, 0xa7, 0xd9, 0xab, 0x9d, 0x01, 0xcb,
	0x7a, 0x07, 0x14, 0xc2, 0x90, 0xb5, 0x11, 0x33, 0xdd, 0xba, 0x32, 0xb2, 0x82, 0xc5, 0x6c, 0x3f,
	0xa3, 0x03, 0x6e, 0x6e, 0xa4, 0x4c, 0x5d, 0x34, 0x8a, 0x25, 0xfa, 0x74, 0x3f, 0x4b, 0xe5, 0x40,
	0x7e, 0xff, 0x7f, 0xbf, 0xeb, 0x04, 0xef, 0x3c, 0x4f, 0x9f, 0xd3, 0x01, 0x23, 0xfd, 0x60, 0xea,
	0x05, 0xa7, 0x6d, 0x15, 0x34, 0x2b, 0xb6, 0x65, 0x67, 0x21, 0x57, 0x43, 0xe8, 0x37, 0x1e, 0x78,
	0x93, 0xbd, 0x1e, 0xb1, 0xbc, 0x98, 0xbb, 0xd6, 0xc0, 0xca, 0x87, 0x69, 0x92, 0xb3, 0xcb, 0xc7,
	0xc8, 0x1f, 0x06, 0x67, 0x04, 0x61, 0x2d, 0xe9, 0x83, 0x8f, 0xcb, 0xb6, 0x36, 0x02, 0x95, 0x87,
	0x2b, 0xb5, 0x1c, 0xb0, 0xdf, 0x0f, 0xa6, 0x84, 0x6b, 0x3e, 0x00, 0x7c, 0xa5, 0xf0, 0xc0, 0x9e,
	0x52, 0x78, 0x59, 0xe0, 0xe5, 0x8b, 0xe0, 0xe7, 0xeb, 0xac, 0x58, 0x8e, 0xe3, 0xcd, 0xf2, 0xc3,
	0x13, 0xb1, 0x9c, 0x5c, 0x0c, 0xe5, 0x37, 0xc8, 0x94, 0x2b, 0xcb, 0x0b, 0x55, 0x30, 0x98, 0x8c,
	0x83, 0x19, 0x81, 0xad, 0x96, 0x93, 0x0a, 0xdd, 0x8d, 0x19, 0xd8, 0xbe, 0x6e, 0x2a, 0x3b, 0x04,
	0xe5, 0xe4, 0x46, 0x23, 0x0f, 0xbc, 0x3d, 0x0f, 0x7e, 0xb6, 0xce, 0x0a, 0x0e, 0x8c, 0x57, 0xc6,
	0x1b, 0x5d, 0x32, 0x8f, 0x74, 0xb5, 0x58, 0x59, 0xbe, 0x58, 0x81, 0x82, 0xbd, 0x8d, 0xe0, 0x64,
	0xe9, 0xb4, 0xfc, 0xbe, 0x72, 0x73, 0x73, 0xa1, 0xf8, 0xfc, 0x62, 0xa1, 0x32, 0x76, 0xc1, 0x8b,
	0x81, 0xa9, 0xdf, 0x15, 0x75, 0x2b, 0x10, 0xde, 0x33, 0xe7, 0x1d, 0x85, 0x52, 0xac, 0x63, 0xf3,
	0xa3, 0x60, 0x70, 0x33, 0x38, 0xb5, 0xce, 0x0a, 0xd1, 0x69, 0x38, 0xa3, 0x6c, 0x2d, 0xd0, 0xc1,
	0x72, 0xdd, 0x5a, 0x15, 0x30, 0xd8, 0x3c, 0x0c, 0x2e, 0x58, 0xe0, 0xca, 0x78, 0x55, 0xce, 0x28,
	0x1b, 0x5d, 0x72, 0xcb, 0x6f, 0x00, 0x73, 0x94, 0xaf, 0xdb, 0x6d, 0xa8, 0xe0, 0xf7, 0x8f, 0x79,
	0x2f, 0xc1, 0xc4, 0xb5, 0xd7, 0xa3, 0x68, 0x38, 0x64, 0x7d, 0x72, 0xcd, 0x6f, 0x48, 0xe1, 0xca,
	0xdf, 0xf5, 0x26, 0x1a, 0xf8, 0xfa, 0xbb, 0x4e, 0x70, 0xd9, 0x64, 0x29, 0x92, 0x51, 0xd6, 0x77,
	0xbd, 0x06, 0x7d, 0x54, 0x15, 0xc2, 0x7b, 0x13, 0x68, 0x40, 0x34, 0xab, 0x41, 0xc0, 0x19, 0x9c,
	0x4b, 0x66, 0xa5, 0x09, 0x2d, 0x52, 0xc6, 0xcf, 0x7b, 0x10, 0x30, 0x32, 0x0c, 0xa6, 0xc4, 0xd8,
	0xe0, 0x80, 0xf2, 0x43, 0x64, 0x1b, 0xe8, 0x6f, 0x82, 0x87, 0xa4, 0xec, 0xdf, 0x69, 0xc5, 0x05,
	0x8f, 0xe3, 0x60, 0x5a, 0x75, 0x4c, 0x85, 0xae, 0x8c, 0xb7, 0xe2, 0xd1, 0x3e, 0xb9, 0xe7, 0x33,
	0xe4, 0xf2, 0x94, 0xdf, 0xb0, 0x2d, 0xdd, 0x1a, 0xe3, 0x5f, 0xf1, 0x75, 0xad, 0x1c, 0xe3, 0x72,
	0x91, 0x6b, 0x88, 0xf5, 0x38, 0xf2, 0xa3, 0x60, 0x6f, 0x9b, 0x8f, 0x23, 0x05, 0xf1, 0x91, 0xb9,
	0xe0, 0xd1, 0xc1, 0x63, 0xf3, 0x52, 0x25, 0x0e, 0x56, 0xbf, 0x0a, 0x4e, 0x43, 0x3f, 0x10, 0x94,
	0x9c, 0x60, 0x35, 0x03, 0x51, 0x76, 0x17, 0xab, 0x09, 0xd6, 0x84, 0x8a, 0x51, 0x18, 0x2a, 0xd7,
	0x2b, 0xd4, 0xed, 0xb1, 0x72, 0xa3, 0x91, 0x07, 0xde, 0x3e, 0x0b, 0x4e, 0x70, 0xa9, 0x20, 0x90,
	0x39, 0xa5, 0x89, 0x84, 0x7a, 0xfe, 0xf3, 0x61, 0x56, 0xb3, 0x09, 0x77, 0xb2, 0xd9, 0xe4, 0x3e,
	0xc4, 0x10, 0xeb, 0x66, 0xf3, 0xa3, 0x60, 0xef, 0x8f, 0x78, 0x9f, 0x57, 0xd0, 0xcb, 0x9c, 0x65,
	0xe5, 0xfe, 0x89, 0x5c, 0xf6, 0xe8, 0x29, 0x50, 0x7f, 0x73, 0xeb, 0x38, 0x5e, 0x0f, 0x6b, 0x6f,
	0x87, 0x2c, 0x8b, 0x58, 0xd2, 0xf3, 0x79, 0xd0, 0x60, 0xb5, 0x07, 0xcc, 0x01, 0x0f, 0x7f, 0x10,
	0x10, 0x20, 0x3c, 0x8d, 0xf6, 0xd8, 0x8b, 0x72, 0xd1, 0x47, 0x96, 0x1c, 0x65, 0xc0, 0x94, 0xfd,
	0xcb, 0x75, 0x14, 0x30, 0xdf, 0x0b, 0xce, 0x02, 0xde, 0xa5, 0x51, 0x3c, 0xde, 0x64, 0x6f, 0x68,
	0xd6, 0x27, 0x6e, 0x74, 0x08, 0x55, 0x2e, 0xae, 0xd6, 0x93, 0xd0, 0x27, 0x43, 0xae, 0x7c, 0xb6,
	0x58, 0xf1, 0x54, 0x6e, 0xe5, 0x48, 0x18, 0x7a, 0x57, 0xd8, 0x0e, 0x51, 0x39, 0xbb, 0xdf, 0x9a,
	0xef, 0xf5, 0xbb, 0x2d, 0x37, 0x8b, 0x8d, 0x7e, 0x15, 0xb1, 0xad, 0x5f, 0xcd, 0x07, 0xbf, 0xaf,
	0x51, 0x9b, 0x6d, 0xca, 0x1d, 0x65, 0x4e, 0xee, 0x84, 0xce, 0x86, 0xc3, 0x65, 0x29, 0xaf, 0x77,
	0xdb, 0x91, 0xc1, 0x25, 0xe3, 0x4b, 0x07, 0x81, 0x6f, 0x14, 0x6c, 0x90, 0x93, 0x1b, 0x35, 0x16,
	0x38, 0x43, 0xb9, 0xba, 0xd9, 0x4c, 0x04, 0x37, 0xaf, 0xd0, 0x94, 0xb5, 0x3c, 0x18, 0xc5, 0xac,
	0xc8, 0xc9, 0xad, 0x1a, 0x7d, 0xc9, 0xd1, 0x5f, 0xfc, 0x16, 0x54, 0x70, 0x96, 0x04, 0x67, 0x8c,
	0x40, 0xf8, 0x94, 0x70, 0xbb, 0x21, 0x5a, 0x3c, 0x41, 0xdc, 0x69, 0xc5, 0x05, 0x7f, 0xdf, 0x06,
	0xe7, 0x9c, 0x3a, 0xe6, 0x3e, 0xc3, 0x16, 0x8d, 0x81, 0xfd, 0xde, 0x6f, 0xcd, 0x07, 0xdf, 0xa3,
	0xe0, 0xec, 0x2a, 0xdf, 0xe8, 0x0a, 0xd6, 0x0b, 0x99, 0x46, 0x21, 0xd0, 0x0f, 0x20, 0xb1, 0xe2,
	0xa3, 0x29, 0xc7, 0xf7, 0x5a, 0xb2, 0xc1, 0xed, 0x9f, 0xf0, 0x6f, 0xb4, 0x80, 0x57, 0x47, 0x59,
	0xc6, 0x92, 0xf2, 0x9f, 0x84, 0x15, 0xba, 0xcc, 0x60, 0xca, 0x4f, 0x74, 0xca, 0xdc, 0xc8, 0x07,
	0xe7, 0x69, 0x40, 0x56, 0xd3, 0x91, 0x02, 0xbe, 0x8c, 0xf2, 0xa8, 0x60, 0x7d, 0xdd, 0xc0, 0xba,
	0x0c, 0x0e, 0xc9, 0x69, 0xe0, 0x5a, 0xae, 0xe3, 0x70, 0x6b, 0x9c, 0x17, 0x6c, 0xd0, 0xe0, 0xd0,
	0x20, 0x35, 0x38, 0xb4, 0xb8, 0xe0, 0xf0, 0x5f, 0x3b, 0xc1, 0x25, 0x15, 0xd1, 0x98, 0x65, 0x92,
	0x60, 0x56, 0xf4, 0xc3, 0xca, 0x32, 0x54, 0x68, 0xa8, 0x58, 0x1e, 0x4d, 0xae, 0x08, 0x81, 0x7d,
	0x18, 0xbc, 0xb3, 0x15, 0xed, 0x27, 0x1b, 0x09, 0x39, 0xa7, 0xe6, 0x70, 0xf1, 0xbf, 0x32, 0x3e,
	0x6d, 0x8b, 0x51, 0x4f, 0xd5, 0x93, 0xdb, 0x56, 0x41, 0x0b, 0x31, 0x44, 0xa0, 0xe7, 0x41, 0x76,
	0x50, 0x0f, 0x6c, 0x29, 0xc1, 0x23, 0x24, 0x6c, 0x4b, 0x07, 0xb7, 0x7f, 0xd5, 0x09, 0xce, 0x97,
	0xeb, 0xbe, 0x12, 0x65, 0x06, 0xb3, 0xdc, 0x27, 0xbe, 0xe7, 0xb3, 0xe7, 0xe7, 0xaa, 0x10, 0xde,
	0x9f, 0x44, 0xa5, 0x6a, 0x9c, 0xaa, 0x60, 0xf5, 0x38, 0x05, 0x6b, 0x3e, 0x9a, 0x33, 0x4e, 0x1b,
	0xd8, 0xd8, 0xed, 0xcb, 0x61, 0xbf, 0x8d, 0x5b, 0x1f, 0xad, 0xda, 0xad, 0x9f, 0x8d, 0xdd, 0x76,
	0x59, 0xcc, 0x5a, 0xb8, 0xf5, 0xd1, 0xaa, 0xdd, 0xfa, 0xd9, 0xe0, 0xf6, 0xdf, 0x3b, 0xc1, 0xa2,
	0x8f, 0xb2, 0x32, 0x5e, 0x4d, 0x93, 0x22, 0x4b, 0xe3, 0x98, 0x65, 0xe4, 0x51, 0x2b, 0xab, 0x58,
	0x45, 0xc5, 0xf3, 0xe1, 0x11, 0x34, 0xed, 0x7e, 0x68, 0x72, 0xb7, 0xd3, 0xe7, 0x69, 0x11, 0xed,
	0x8d, 0xfd, 0xfd, 0xd0, 0xcf, 0xad, 0xed, 0x87, 0x55, 0x2a, 0x46, 0x18, 0x5b, 0x36, 0x8f, 0xb3,
	0x22, 0xd6, 0xf7, 0x84, 0x51, 0xc9, 0xad, 0x0e, 0xa3, 0x46, 0x05, 0xed, 0xf1, 0xca, 0xe5, 0xe3,
	0x76, 0x54, 0xd0, 0xa4, 0x9b, 0xa5, 0x43, 0xa8, 0x07, 0x18, 0xdf, 0x28, 0xef, 0xe6, 0x23, 0x3a,
	0x5f, 0x8f, 0x46, 0x3e, 0x76, 0xbd, 0x85, 0x18, 0x50, 0x76, 0x9f, 0x6b, 0x1f, 0xb1, 0xce, 0xb5,
	0x9f, 0x6f, 0xa5, 0x7c, 0xd6, 0x12, 0x36, 0x18, 0xcb, 0x94, 0x8f, 0x38, 0xe0, 0xc0, 0x42, 0xbd,
	0xe5, 0xf1, 0x61, 0x60, 0xea, 0x71, 0xf0, 0x5b, 0x9f, 0x45, 0x02, 0x21, 0xd3, 0x92, 0xaa, 0x04,
	0xca, 0xc4, 0x8c, 0x23, 0xb7, 0x22, 0xe1, 0xb1, 0xca, 0x48, 0xc4, 0xc1, 0x01, 0x16, 0xea, 0x48,
	0x7c, 0x98, 0x95, 0x7c, 0x92, 0x88, 0x4c, 0x3e, 0xd9, 0x0a, 0x66, 0xf2, 0xc9, 0x8f, 0x82, 0xc1,
	0xdf, 0xe7, 0x1f, 0x0a, 0x89, 0x89, 0x2f, 0xd0, 0x46, 0x97, 0x2c, 0x3a, 0x6a, 0x0a, 0x52, 0x86,
	0x97, 0x6a, 0x18, 0x60, 0x7c, 0x10, 0xcc, 0xda, 0xb8, 0xf8, 0x08, 0x6f, 0x74, 0xc9, 0xf5, 0x0a,
	0x03, 0x8a, 0xa0, 0xf7, 0xb8, 0x4d, 0x3c, 0xab, 0x99, 0x38, 0x8b, 0x4c, 0x4b, 0x35, 0x25, 0xd0,
	0xcd, 0x64, 0xcb, 0x71, 0x1e, 0x4e, 0xf4, 0xa7, 0x28, 0xef, 0xa5, 0x87, 0x2c, 0x63, 0x7d, 0xa2,
	0xaa, 0xcf, 0x92, 0xeb, 0x3c, 0x5c, 0x05, 0x0c, 0x36, 0x73, 0xbe, 0x74, 0xe3, 0xf8, 0x5a, 0xb9,
	0xca, 0xfc, 0xa2, 0xd4, 0x8b, 0xd2, 0x24, 0x27, 0xb7, 0x43, 0x7c, 0x82, 0xe3, 0x27, 0xe9, 0x05,
	0x4d, 0x1b, 0x2e, 0x38, 0xfd, 0x53, 0x3e, 0xf9, 0xb9, 0x1c, 0xb9, 0x06, 0x68, 0xb4, 0x65, 0xae,
	0x01, 0x5a, 0xd2, 0xd1, 0x7e, 0x6e, 0xc6, 0xa0, 0x2d, 0x27, 0xf9, 0x1b, 0x99, 0x29, 0xa8, 0x29,
	0x87, 0x66, 0xe9, 0xcd, 0x55, 0x2b, 0x32, 0xae, 0x6a, 0xcd, 0xd8, 0x1a, 0xed, 0x0e, 0x22, 0xc9,
	0xb3, 0xaa, 0xda, 0x4f, 0xf2, 0x57, 0x75, 0x15, 0x17, 0x1f, 0x17, 0xac, 0xeb, 0x5d, 0xad, 0xcc,
	0x9c, 0x5d, 0x0e, 0xe1, 0x28, 0xd4, 0x01, 0x75, 0x62, 0xa1, 0x8e, 0x53, 0x69, 0xff, 0xb9, 0x48,
	0x8d, 0xf8, 0x75, 0x9f, 0x1b, 0xa9, 0x91, 0x3a, 0x0e, 0xd8, 0xff, 0x3d, 0x9e, 0x33, 0x5b, 0x8e,
	0x63, 0xc5, 0xc8, 0xc9, 0xa2, 0xa1, 0x89, 0x21, 0x3d, 0xf6, 0xab, 0x19, 0xa8, 0x39, 0xc4, 0xd8,
	0x17, 0xfb, 0xee, 0x95, 0x71, 0x97, 0xe5, 0xbd, 0x2c, 0x1a, 0xf2, 0xfd, 0xd2, 0xad, 0x10, 0x4e,
	0x85, 0xab, 0x38, 0x7a, 0x33, 0xda, 0x82, 0x6a, 0x55, 0x97, 0x66, 0xc9, 0xea, 0xf2, 0x9b, 0x30,
	0xab, 0xab, 0x8e, 0xe3, 0x56, 0x97, 0x62, 0xe4, 0x7c, 0xaa, 0xd4, 0x9a, 0x18, 0xc2, 0x53, 0x65,
	0x15, 0x03, 0x2c, 0x7f, 0x14, 0x1c, 0x17, 0xe0, 0xf3, 0x17, 0xab, 0xe4, 0x5c, 0x98, 0x0c, 0x7b,
	0x21, 0xfc, 0xaf, 0x97, 0xfb, 0x96, 0x18, 0xb4, 0x57, 0x82, 0x13, 0x2b, 0x34, 0x79, 0xd5, 0x65,
	0x7c, 0x97, 0x41, 0x66, 0x38, 0x11, 0x49, 0x94, 0x85, 0x59, 0x17, 0x00, 0x1b, 0x6b, 0xc1, 0xc9,
	0x12, 0xf8, 0x2a, 0x2a, 0x0e, 0xfa, 0x19, 0x7d, 0x43, 0x34, 0x57, 0x89, 0x74, 0x0a, 0xdb, 0x45,
	0xdc, 0xf4, 0x60, 0xc2, 0x0a, 0x9d, 0x1e, 0x4c, 0x58, 0x11, 0x1a, 0x62, 0x23, 0x3d, 0xe8, 0x41,
	0xad, 0xac, 0xae, 0x82, 0x64, 0x56, 0xd7, 0xd5, 0x31, 0xb3, 0xba, 0x55, 0x38, 0x58, 0xdd, 0x53,
	0x59, 0x04, 0x0e, 0xae, 0xa6, 0x69, 0xd6, 0x8f, 0x12, 0x5a, 0x30, 0x72, 0xd5, 0xa3, 0xab, 0x61,
	0x7d, 0x10, 0x57, 0xcf, 0x72, 0xb3, 0xc7, 0x9c, 0xf2, 0x8c, 0x0e, 0x37, 0xba, 0xc4, 0x17, 0x1e,
	0x47, 0x74, 0xf6, 0xb8, 0x92, 0x60, 0x19, 0x5e, 0x53, 0xb7, 0x0d, 0x36, 0x92, 0xbd, 0xd4, 0x30,
	0x6c, 0x20, 0x3e, 0xc3, 0x16, 0xc1, 0x3a, 0x3a, 0xdc, 0xa2, 0x7b, 0x4c, 0xb8, 0xce, 0x09, 0x6e,
	0x22, 0x24, 0xd7, 0x1f, 0xc1, 0x0a, 0x18, 0x65, 0xba, 0xcf, 0x2c, 0xf7, 0xfb, 0xb2, 0x24, 0xf2,
	0x64, 0x5a, 0x24, 0xa4, 0x8c, 0xb3, 0x6a, 0x87, 0x63, 0x24, 0xa4, 0x9a, 0xa8, 0x78, 0x3b, 0xb4,
	0xc9, 0x06, 0xe9, 0x21, 0xb3, 0x1c, 0xde, 0x75, 0xac, 0xf8, 0x68, 0xc6, 0x76, 0xa8, 0x05, 0xdb,
	0xcc, 0x22, 0x1c, 0xb0, 0xde, 0xab, 0x8d, 0x3d, 0xb1, 0x20, 0xff, 0x8c, 0x3a, 0x21, 0x3c, 0x74,
	0x8c, 0x36, 0x68, 0x18, 0x59, 0x84, 0xc9, 0x14, 0x21, 0xb0, 0x1d, 0xd4, 0x05, 0x9f, 0xd1, 0x21,
	0x1f, 0x93, 0x57, 0x42, 0x74, 0x01, 0xc7, 0x46, 0x8d, 0xc4, 0x71, 0x35, 0xc9, 0x9a, 0x14, 0x8d,
	0x5c, 0xdc, 0x62, 0x08, 0x77, 0x74, 0x2c, 0x48, 0x4f, 0x8a, 0xd5, 0x0c, 0x6b, 0x3a, 0xd7, 0xa0,
	0x9c, 0xce, 0xfd, 0x9a, 0xe6, 0x74, 0x5e, 0xc7, 0x01, 0xfb, 0xdd, 0xe0, 0x84, 0x98, 0x4d, 0x45,
	0x32, 0x76, 0x36, 0xe4, 0xf7, 0x9d, 0x90, 0x48, 0xcf, 0x78, 0x2e, 0x02, 0x56, 0xbe, 0xe4, 0x51,
	0x6e, 0x1d, 0xa4, 0xc3, 0x21, 0xdd, 0x8d, 0x99, 0xb0, 0xb5, 0x00, 0x1a, 0x26, 0xa0, 0xe7, 0xa8,
	0x2a, 0x1c, 0x35, 0x5c, 0xb9, 0x6d, 0xe3, 0x52, 0xe3, 0x40, 0x73, 0x09, 0x54, 0x1d, 0x4c, 0x1f,
	0x2b, 0xd4, 0x50, 0x50, 0x2a, 0xf5, 0xe2, 0x3a, 0x2b, 0xe0, 0x18, 0xde, 0xf5, 0x74, 0x1b, 0xcc,
	0x54, 0x93, 0xf4, 0xc2, 0xa9, 0x0d, 0x17, 0x7c, 0x3f, 0x0a, 0x7e, 0xf3, 0x65, 0xce, 0x19, 0xe4,
	0xac, 0xd0, 0x94, 0xff, 0x2a, 0x7b, 0xe7, 0x2c, 0x29, 0xd6, 0x5c, 0x19, 0x8d, 0xb1, 0xa6, 0xfc,
	0xd7, 0xd2, 0x04, 0xa9, 0xd5, 0xdc, 0x90, 0xa4, 0x9e, 0x35, 0x2a, 0x09, 0x77, 0xce, 0xf3, 0x1e,
	0x04, 0x9d, 0x1b, 0x9c, 0xd5, 0xfd, 0x40, 0x96, 0x2d, 0x62, 0xb9, 0xac, 0x2c, 0xfb, 0xdc, 0xd5,
	0x24, 0x99, 0x95, 0xd5, 0xc4, 0xb5, 0x02, 0xdf, 0x3a, 0x88, 0x86, 0x32, 0x70, 0x7e, 0xd7, 0x0d,
	0x89, 0x74, 0xe0, 0x2e, 0x02, 0x56, 0x9e, 0xa1, 0xd3, 0x87, 0x12, 0xce, 0xc9, 0x05, 0xa0, 0x23,
	0xa9, 0xb2, 0x35, 0xef, 0x07, 0xc1, 0xdc, 0x2e, 0x4a, 0xc4, 0x97, 0x18, 0x9c, 0x5e, 0x5e, 0xf6,
	0x28, 0xda, 0x27, 0x97, 0x57, 0x6a, 0x39, 0xe0, 0xe3, 0xe3, 0xe0, 0x38, 0x97, 0x96, 0x30, 0x99,
	0x16, 0x3a, 0x20, 0xd0, 0x5b, 0x3a, 0x5b, 0xee, 0xb6, 0x55, 0x29, 0x37, 0xda, 0xca, 0xbc, 0x1b,
	0xe8, 0x23, 0xe9, 0xb6, 0x6a, 0xc3, 0x45, 0xe7, 0x21, 0x53, 0xb2, 0xfa, 0xf5, 0xc1, 0x37, 0xbf,
	0x71, 0xe1, 0x58, 0xb1, 0x39, 0xfa, 0x73, 0xd7, 0x82, 0x0a, 0xfe, 0xfe, 0x2c, 0x98, 0x79, 0x0a,
	0x97, 0xf9, 0xf8, 0xad, 0x20, 0x3e, 0xfe, 0xa2, 0x64, 0x9f, 0xdc, 0x0f, 0xed, 0xbb, 0x7e, 0x15,
	0x4c, 0xe5, 0xf9, 0xdd, 0xf6, 0x0a, 0xe0, 0xff, 0x3f, 0x3b, 0xc1, 0x75, 0xcd, 0xe2, 0x9f, 0xa5,
	0xf2, 0x73, 0xa4, 0xe6, 0xdc, 0x27, 0x69, 0x06, 0xf1, 0x7c, 0x5c, 0x63, 0xbe, 0x4e, 0x51, 0x85,
	0xf7, 0xc9, 0x91, 0xf5, 0xfd, 0xb5, 0xc5, 0x75, 0x5a, 0xd5, 0x96, 0xc1, 0x6c, 0x53, 0x5b, 0x96,
	0x02, 0xf8, 0x7f, 0x1b, 0x9c, 0xd3, 0xa4, 0xb5, 0xa4, 0x0f, 0xde, 0xef, 0xd5, 0x18, 0x43, 0x3c,
	0xbd, 0x2d, 0x6f, 0x49, 0x47, 0xeb, 0xba, 0x93, 0xe2, 0x53, 0x58, 0xe4, 0x7c, 0xb1, 0xb8, 0x10,
	0xea, 0xfb, 0x99, 0x18, 0xd0, 0x1f, 0xa8, 0x2a, 0x1c, 0x4c, 0x7e, 0x13, 0x9c, 0xe2, 0xbd, 0x02,
	0xce, 0xcc, 0x0a, 0xb2, 0x84, 0xb4, 0x2c, 0x4c, 0x7f, 0x9b, 0x6a, 0x28, 0xe8, 0xbe, 0xc2, 0xf1,
	0x52, 0xc2, 0xeb, 0x51, 0xce, 0x53, 0x42, 0x05, 0xa4, 0xe6, 0x3c, 0xe5, 0x80, 0x68, 0x03, 0xf1,
	0xb3, 0xb5, 0xa4, 0x8f, 0x62, 0xc4, 0x25, 0x33, 0x10, 0xbd, 0x4c, 0xae, 0x24, 0xe0, 0x3b, 0x05,
	0xe5, 0xa0, 0x14, 0x37, 0xf0, 0x36, 0x69, 0x9f, 0x66, 0xbc, 0x56, 0x65, 0xe1, 0xe4, 0xf5, 0x56,
	0xcd, 0xc0, 0x35, 0x7b, 0xa5, 0x96, 0x83, 0x0e, 0xfd, 0xa7, 0x35, 0xf6, 0x84, 0x1e, 0xa6, 0x59,
	0x54, 0xb0, 0x9f, 0xda, 0xc9, 0x20, 0x38, 0xab, 0xb1, 0x67, 0x34, 0x19, 0x51, 0xce, 0x20, 0x37,
	0x2b, 0xd4, 0x35, 0x45, 0x39, 0xba, 0xd5, 0x82, 0x89, 0x16, 0x74, 0xa2, 0xc7, 0x68, 0x1a, 0xb1,
	0x02, 0x35, 0x51, 0xbd, 0x14, 0xad, 0x25, 0x61, 0xfb, 0xbc, 0xf9, 0x2b, 0xed, 0x5b, 0xa8, 0xdf,
	0xbe, 0x43, 0x42, 0x4b, 0xdd, 0xb2, 0x2f, 0x21, 0xeb, 0x4b, 0x86, 0xa2, 0x81, 0x59, 0xfd, 0xdd,
	0x4f, 0xc1, 0x8b, 0x3d, 0x03, 0xea, 0x46, 0x74, 0x90, 0x26, 0xfd, 0x9f, 0xce, 0xc1, 0xcb, 0xe0,
	0x24, 0xc8, 0x7a, 0x23, 0x46, 0x16, 0x0d, 0x2d, 0x0c, 0xe9, 0x25, 0x7a, 0x35, 0x03, 0xcc, 0xee,
	0xa3, 0xbb, 0x06, 0x6b, 0xe2, 0x36, 0xbd, 0xbe, 0xd4, 0xa0, 0xae, 0xd7, 0xdb, 0x0c, 0xe7, 0x52,
	0x43, 0x35, 0x11, 0x1c, 0x7d, 0x1e, 0x9c, 0xe0, 0x67, 0x0c, 0xe2, 0x72, 0x3e, 0xb9, 0x10, 0xaa,
	0x6b, 0xfa, 0x48, 0xaa, 0xa7, 0x04, 0x2f, 0x08, 0xb6, 0xd6, 0x83, 0x60, 0x9d, 0x15, 0xcf, 0xc4,
	0x95, 0x7e, 0x32, 0x17, 0xaa, 0xcb, 0xfd, 0x5a, 0xa8, 0xd3, 0xf1, 0x3e, 0x0c, 0x2d, 0xa9, 0x4e,
	0xf2, 0xce, 0xa2, 0x4c, 0xcd, 0x03, 0x1d, 0x8b, 0x75, 0xae, 0xc3, 0x8f, 0x82, 0xb9, 0xaf, 0x79,
	0x65, 0x82, 0x9c, 0xdf, 0xf1, 0x59, 0xf4, 0x46, 0x80, 0x2f, 0xf8, 0x2c, 0xd5, 0x30, 0xf0, 0x51,
	0x54, 0xb9, 0xd8, 0xdf, 0x66, 0x31, 0x2b, 0x32, 0x9a, 0x0f, 0xd3, 0x0c, 0x6d, 0xd6, 0x9f, 0x46,
	0x79, 0x41, 0xee, 0x87, 0xfa, 0xed, 0x42, 0x2d, 0x53, 0x7f, 0xff, 0x5a, 0x2b, 0xa0, 0xef, 0xdf,
	0xf9, 0xb5, 0xa4, 0xef, 0xa7, 0x92, 0x3b, 0xc8, 0x60, 0x25, 0x4b, 0xa7, 0x87, 0x5b, 0x91, 0xc1,
	0xf3, 0x5f, 0x76, 0x78, 0x2a, 0x7e, 0x93, 0xf5, 0xe8, 0x50, 0x1c, 0x20, 0x6f, 0xca, 0xe7, 0x00,
	0xe4, 0xfd, 0xd0, 0xf7, 0x48, 0xc0, 0x4f, 0x56, 0xee, 0x7f, 0x31, 0x91, 0x0e, 0x5a, 0x90, 0x9e,
	0x56, 0xd2, 0x6e, 0x9a, 0x50, 0x79, 0x7b, 0xc4, 0x67, 0xca, 0xa6, 0xe9, 0xc4, 0x44, 0x3b, 0x36,
	0xb8, 0xa4, 0xc1, 0xe9, 0x35, 0xfd, 0xc8, 0x84, 0xcf, 0x9d, 0xe4, 0x6a, 0x88, 0x1f, 0xa4, 0xd8,
	0xb0, 0xce, 0x72, 0xd5, 0xb3, 0xd0, 0xad, 0xdf, 0x29, 0x84, 0xae, 0xa6, 0x49, 0x11, 0x25, 0x23,
	0x46, 0x6e, 0x54, 0xe9, 0x2b, 0x86, 0x9e, 0x07, 0x1a, 0x89, 0xe8, 0xc0, 0xea, 0xe7, 0x88, 0xb0,
	0x96, 0x94, 0xfb, 0x8d, 0x0a, 0xed, 0xb5, 0x04, 0xed, 0x37, 0xea, 0x38, 0x15, 0x75, 0x25, 0x16,
	0x1f, 0x95, 0x75, 0x65, 0xac, 0x42, 0xae, 0x35, 0xb0, 0xd0, 0x89, 0xe8, 0x2c, 0x42, 0xcb, 0xf9,
	0x49, 0x5f, 0x3e, 0xbb, 0x5b, 0x65, 0xc4, 0xa0, 0xe9, 0x9e, 0xd0, 0x8e, 0x0d, 0xae, 0xff, 0xa5,
	0xc3, 0x6f, 0x85, 0x2f, 0xc7, 0x31, 0x8e, 0x4f, 0xef, 0x8a, 0x1e, 0x85, 0xde, 0xd7, 0x48, 0x35,
	0x2a, 0xfa, 0xb0, 0x7e, 0x72, 0x4d, 0x08, 0x2b, 0xe3, 0x07, 0x46, 0xab, 0xea, 0x99, 0x53, 0x8e,
	0xce, 0x21, 0x6f, 0x85, 0xfa, 0xf5, 0x53, 0x05, 0x47, 0xef, 0x9a, 0x5a, 0x50, 0xed, 0xe9, 0x50,
	0xde, 0xbc, 0x01, 0x32, 0x72, 0x7d, 0xdf, 0xb2, 0x57, 0xc9, 0xd4, 0xd3, 0x61, 0x6b, 0x05, 0xb4,
	0xc6, 0x3b, 0xb9, 0x2a, 0xde, 0x68, 0x89, 0x71, 0x79, 0x23, 0xf4, 0xbc, 0xde, 0xc2, 0x0c, 0x3d,
	0x62, 0x1a, 0x89, 0xe8, 0x72, 0x6a, 0x20, 0x91, 0x72, 0xb4, 0x5c, 0xab, 0xd1, 0x44, 0x03, 0xe6,
	0x7a, 0x13, 0xcd, 0x53, 0x06, 0x31, 0x5e, 0xea, 0xca, 0x60, 0x0c, 0x99, 0x9b, 0xcd, 0x44, 0x70,
	0xf2, 0xf7, 0x9d, 0x60, 0x4e, 0x42, 0x7c, 0x8e, 0x1d, 0xd2, 0x48, 0xde, 0x75, 0xe6, 0xcb, 0xd5,
	0x07, 0x35, 0xa6, 0x3c, 0x7c, 0x15, 0xc1, 0x07, 0x93, 0xaa, 0xa1, 0xef, 0xd8, 0x94, 0xe4, 0x61,
	0x12, 0x09, 0x6b, 0x0c, 0x62, 0xa2, 0xbe, 0xd6, 0xd0, 0x96, 0x8f, 0xae, 0xc7, 0x9d, 0x96, 0x84,
	0x2e, 0xeb, 0xa5, 0x83, 0x61, 0x9a, 0x33, 0x72, 0xa7, 0xc6, 0x0c, 0xb0, 0xf4, 0x87, 0xb3, 0x15,
	0x19, 0x1c, 0xfe, 0xb9, 0x18, 0x2a, 0xcb, 0xe2, 0x45, 0xdc, 0x93, 0x34, 0x53, 0x37, 0xad, 0xe1,
	0x79, 0xc2, 0xbd, 0x50, 0xbd, 0xa1, 0xab, 0xe5, 0xa1, 0x97, 0x02, 0xed, 0xe8, 0x78, 0x99, 0xf5,
	0x94, 0xd1, 0x2c, 0x91, 0x64, 0x32, 0x0f, 0x16, 0xb0, 0x18, 0x3d, 0xb8, 0xf1, 0xa2, 0xe8, 0x23,
	0x3c, 0xeb, 0xa4, 0xcf, 0x95, 0xe9, 0x9b, 0xa0, 0x5c, 0x45, 0xd1, 0x1b, 0x9f, 0x66, 0xa6, 0x75,
	0x6b, 0x75, 0x39, 0x8e, 0x25, 0x04, 0x75, 0x07, 0x95, 0xe1, 0x3c, 0xd8, 0x30, 0x89, 0xba, 0xc7,
	0xb4, 0xe5, 0xe3, 0x95, 0xcf, 0xac, 0xae, 0x69, 0xeb, 0x95, 0xc7, 0x7b, 0x7e, 0x7b, 0x3e, 0xae,
	0xbe, 0x84, 0x34, 0x81, 0x8a, 0xfd, 0xca, 0x89, 0x66, 0xc5, 0xb8, 0xcb, 0x0a, 0x1a, 0xc5, 0xfc,
	0x60, 0x89, 0xbf, 0x9a, 0xb4, 0xe4, 0xe8, 0x60, 0xc9, 0x0f, 0x83, 0xcd, 0x27, 0xc1, 0x09, 0x79,
	0x25, 0xaf, 0xc4, 0xc9, 0x79, 0xa9, 0x80, 0x64, 0xca, 0xd6, 0x9c, 0x0f, 0x42, 0x7b, 0xa3, 0xd3,
	0xe2, 0x44, 0x69, 0xcc, 0xb2, 0xed, 0x54, 0x18, 0x53, 0xde, 0x6d, 0x00, 0x1d, 0x32, 0x56, 0xe0,
	0x68, 0x37, 0x3a, 0x05, 0x87, 0x46, 0xc8, 0xf2, 0x92, 0xd4, 0xf4, 0x60, 0xe8, 0x59, 0x40, 0x35,
	0x05, 0xbd, 0x25, 0x3c, 0x87, 0x09, 0x4f, 0xb2, 0x74, 0x20, 0x3c, 0x5c, 0xf1, 0xa8, 0x03, 0x8a,
	0x8e, 0x77, 0xea, 0x48, 0xf8, 0xca, 0x11, 0xef, 0xe0, 0xeb, 0xa3, 0x28, 0xee, 0xcb, 0x2b, 0x47,
	0xe2, 0x01, 0xac, 0x29, 0xd6, 0xc3, 0xcf, 0x8f, 0xba, 0xad, 0xc6, 0x41, 0x72, 0x5e, 0xf1, 0xb5,
	0x4c, 0xb7, 0x9a, 0x07, 0x02, 0x3b, 0x9f, 0x06, 0xc7, 0x3f, 0x4f, 0xa3, 0x44, 0x58, 0x99, 0x91,
	0x54, 0x90, 0xe8, 0x23, 0x6f, 0x07, 0x40, 0xdb, 0xf9, 0x33, 0xeb, 0xac, 0x00, 0x24, 0xe7, 0xfb,
	0xa0, 0x4b, 0x52, 0xc1, 0x41, 0x74, 0x7a, 0xa8, 0x92, 0x60, 0xdd, 0xd3, 0x12, 0x95, 0x2a, 0x02,
	0x9c, 0xd7, 0x5a, 0x48, 0x6c, 0x57, 0x9a, 0x8d, 0xe2, 0xe7, 0x65, 0x4f, 0x19, 0x3d, 0x94, 0x75,
	0xa6, 0x0a, 0xa5, 0x45, 0xfa, 0x04, 0xc0, 0x45, 0xbc, 0x2f, 0x0d, 0x73, 0x61, 0xc9, 0x71, 0x9c,
	0x1b, 0xe6, 0x16, 0xaa, 0xe0, 0x8a, 0xb1, 0x23, 0x8c, 0x2a, 0x2d, 0x1b, 0xd0, 0x63, 0xa7, 0x0a,
	0xaf, 0x1e, 0x3b, 0xc2, 0xf2, 0x92, 0xd4, 0xf4, 0x60, 0x7a, 0xec, 0xd4, 0x50, 0xf0, 0x36, 0x62,
	0x9d, 0x15, 0x5c, 0xca, 0x5f, 0xdb, 0xe4, 0x44, 0xea, 0xc9, 0x07, 0xdb, 0x26, 0xa8, 0xb7, 0x11,
	0x75, 0x1c, 0x9c, 0x55, 0x33, 0x1b, 0x52, 0xba, 0xb8, 0x69, 0xab, 0x3b, 0x14, 0xfd, 0x71, 0x69,
	0x66, 0xa2, 0xa4, 0xf6, 0x19, 0x79, 0x46, 0x20, 0xd6, 0x0c, 0x7c, 0x49, 0x64, 0x6c, 0x6a, 0xcd,
	0xb7, 0xfc, 0x0e, 0xd9, 0xbb, 0xa9, 0x6d, 0xd4, 0x41, 0x8b, 0x21, 0x9d, 0xd5, 0x13, 0x04, 0xf2,
	0x6e, 0xb5, 0x25, 0x8b, 0xaa, 0x1f, 0x5d, 0xb6, 0xd7, 0x40, 0x5b, 0x07, 0x95, 0x8f, 0x93, 0x7e,
	0xc3, 0x6a, 0x2b, 0x06, 0xd1, 0xbb, 0x00, 0xab, 0xe5, 0xe3, 0xd2, 0x42, 0x82, 0xb0, 0xb9, 0xb4,
	0x16, 0xb5, 0x45, 0x69, 0x1d, 0x0d, 0xab, 0x9d, 0xc5, 0x64, 0x58, 0x12, 0x2a, 0xdb, 0x59, 0xfe,
	0x1a, 0x83, 0x43, 0xae, 0x6b, 0xe7, 0x6a, 0x1d, 0xa7, 0x9d, 0x35, 0xc1, 0x5b, 0x72, 0x69, 0xc9,
	0xa2, 0xd6, 0x95, 0xbc, 0x4a, 0xc3, 0xa9, 0xf3, 0x76, 0x9e, 0x2d, 0x6a, 0x0b, 0xcf, 0x8e, 0x86,
	0xd5, 0xc3, 0x90, 0xdf, 0xb0, 0xda, 0x8a, 0x41, 0xac, 0xeb, 0x61, 0x7e, 0x3e, 0xbe, 0x34, 0x6d,
	0x40, 0x2a, 0x17, 0xfc, 0x6b, 0x70, 0xdd, 0xe7, 0x5d, 0xac, 0x5c, 0x4e, 0xea, 0x5f, 0x98, 0x20,
	0xd7, 0x42, 0xfc, 0x7b, 0x13, 0x0e, 0x8e, 0x5e, 0x6e, 0xd7, 0xd3, 0xc0, 0xcb, 0x5f, 0xc8, 0x44,
	0x84, 0x06, 0xcd, 0x7b, 0x07, 0xf7, 0x1d, 0x4b, 0x15, 0x4c, 0xbd, 0xf7, 0x6e, 0xad, 0x80, 0xb3,
	0x21, 0x4b, 0x26, 0xd3, 0xb7, 0xb7, 0x79, 0x50, 0x63, 0xb9, 0x66, 0x8f, 0xf3, 0xc1, 0xa4, 0x6a,
	0x10, 0xd6, 0x5f, 0x77, 0x82, 0x79, 0x77, 0x43, 0x81, 0x5a, 0xc3, 0x2c, 0x6b, 0x1d, 0x15, 0xbd,
	0x67, 0x6f, 0xad, 0x01, 0x71, 0xfc, 0x83, 0x7c, 0xca, 0x63, 0xb4, 0x21, 0x54, 0x8b, 0x51, 0x3e,
	0x67, 0x2b, 0xe2, 0x2a, 0xa8, 0x50, 0x1e, 0x4e, 0xac, 0x07, 0x01, 0xfd, 0x53, 0x27, 0x98, 0x33,
	0x2b, 0xd2, 0x38, 0x60, 0xaf, 0xb1, 0xec, 0xd7, 0xd0, 0x77, 0xab, 0x26, 0x56, 0x84, 0x98, 0xfe,
	0xad, 0x13, 0xcc, 0x57, 0x11, 0xf9, 0xf6, 0xea, 0xc3, 0xc9, 0x8c, 0xe3, 0x6d, 0xd6, 0x2f, 0x8f,
	0xa2, 0x0a, 0x91, 0xfd, 0xb3, 0x88, 0x4c, 0xbd, 0x0d, 0x01, 0x05, 0x78, 0xfc, 0xf1, 0x30, 0xf4,
	0xfc, 0x96, 0x4c, 0x9d, 0x86, 0xf3, 0xa2, 0xad, 0xbd, 0xa2, 0x11, 0xd5, 0x96, 0x87, 0x0a, 0xef,
	0x42, 0xbc, 0x51, 0xd5, 0x69, 0xd4, 0x46, 0x55, 0xaf, 0x08, 0x51, 0xfd, 0x6d, 0x27, 0x38, 0xb3,
	0x7d, 0x90, 0x31, 0xb6, 0x4a, 0xb3, 0xfe, 0x3a, 0x1d, 0xf0, 0x45, 0x23, 0x79, 0x14, 0x36, 0xfc,
	0x5e, 0x8e, 0xa3, 0xa2, 0xb3, 0xa1, 0x93, 0x6b, 0xe2, 0x4c, 0x17, 0x31, 0x70, 0x91, 0x55, 0x9b,
	0xcc, 0xa6, 0x91, 0x67, 0xfb, 0xe5, 0x51, 0x54, 0x21, 0x9e, 0xef, 0x3a, 0xc1, 0xac, 0x41, 0xd8,
	0x64, 0xfc, 0x99, 0x03, 0xaf, 0xa3, 0x4f, 0x26, 0x32, 0x8d, 0x34, 0x55, 0x6c, 0x9f, 0x1e, 0xdd,
	0x00, 0xee, 0x54, 0x67, 0x0d, 0xda, 0x5a, 0xc2, 0xff, 0x90, 0x5f, 0x4d, 0x64, 0x5c, 0x6a, 0xa9,
	0xc8, 0x3e, 0x3a, 0x9a, 0x32, 0x44, 0xf5, 0x1f, 0x9d, 0xe0, 0xd2, 0x16, 0xfc, 0x72, 0xd2, 0x76,
	0x3a, 0x54, 0xbf, 0x0a, 0xc4, 0x06, 0xe3, 0xdf, 0x89, 0xe2, 0x78, 0x39, 0x8e, 0xc9, 0xe3, 0xd0,
	0xff, 0x33, 0x4b, 0x0d, 0x7a, 0x2a, 0xc4, 0x8f, 0x8f, 0xaa, 0xde, 0x3a, 0xc8, 0xaf, 0xd3, 0xd1,
	0x91, 0x82, 0xfc, 0x3a, 0x1d, 0xfd, 0x7f, 0x82, 0xe4, 0xea, 0xb8, 0x07, 0x2e, 0xd8, 0xec, 0x84,
	0x5f, 0x60, 0x8e, 0xd3, 0x8c, 0xf5, 0xcb, 0x8a, 0xfc, 0xa8, 0xa5, 0x13, 0x53, 0x4d, 0x85, 0xf8,
	0xf8, 0x88, 0xda, 0x6d, 0x23, 0x2c, 0x6b, 0xf1, 0x08, 0x11, 0xa2, 0x4a, 0x7c, 0x7c, 0x44, 0x6d,
	0x88, 0xf0, 0x6f, 0x3a, 0xc1, 0xb4, 0x41, 0x16, 0xc7, 0xf9, 0x65, 0xdd, 0xfd, 0x76, 0x1b, 0xdb,
	0x40, 0x57, 0x11, 0x3d, 0x98, 0x50, 0xab, 0x29, 0x92, 0xb2, 0x8e, 0x26, 0x88, 0x04, 0xd5, 0xcd,
	0x83, 0x09, 0xb5, 0xf0, 0xb4, 0x3f, 0x63, 0x90, 0xe4, 0xd9, 0x79, 0x59, 0x29, 0xad, 0x8c, 0x6a,
	0xbe, 0xf7, 0x40, 0xa1, 0x8d, 0x5a, 0x63, 0x30, 0x65, 0xbd, 0x4c, 0x12, 0x0c, 0xaa, 0x98, 0x0f,
	0x26, 0x55, 0x43, 0x57, 0x3b, 0x4f, 0xad, 0xb3, 0xa2, 0x4b, 0xb3, 0x57, 0xcf, 0xe4, 0xcf, 0xbb,
	0x91, 0x6b, 0xa1, 0xf9, 0x73, 0x6f, 0x16, 0xae, 0xf7, 0x00, 0x0d, 0x34, 0x94, 0x11, 0x9f, 0xc1,
	0xc8, 0xca, 0x68, 0xac, 0x8e, 0x2c, 0xc9, 0x3d, 0xcb, 0x48, 0x05, 0x4f, 0x9f, 0x27, 0xb4, 0xa4,
	0x5b, 0x0f, 0x32, 0x9f, 0xb2, 0x43, 0x16, 0xcb, 0x07, 0x99, 0xe2, 0x07, 0xeb, 0xb0, 0x50, 0xdf,
	0x00, 0xf1, 0x61, 0xee, 0x53, 0xf3, 0x6d, 0xf9, 0xfb, 0x76, 0x5b, 0xfc, 0xe7, 0xed, 0xc8, 0xdd,
	0xd0, 0xfe, 0xc1, 0x3b, 0x1f, 0x4d, 0x1f, 0xe5, 0xb6, 0x63, 0xe3, 0x27, 0x15, 0xf2, 0xca, 0x05,
	0xf2, 0x79, 0xcb, 0xb1, 0xe2, 0x70, 0xd0, 0xb3, 0xaa, 0x66, 0xaa, 0xfb, 0xc2, 0xbc, 0xb1, 0x90,
	0x3e, 0x5a, 0x75, 0x21, 0xfd, 0x6c, 0xe5, 0x76, 0x65, 0xe1, 0xbf, 0x7e, 0x58, 0xe8, 0x7c, 0xff,
	0xc3, 0x42, 0xe7, 0x7f, 0x7e, 0x58, 0xe8, 0xfc, 0xe3, 0x8f, 0x0b, 0xc7, 0xbe, 0xff, 0x71, 0xe1,
	0xd8, 0x7f, 0xff, 0xb8, 0x70, 0xec, 0x9b, 0xdf, 0x08, 0x7f, 0x35, 0xdc, 0xdd, 0x7d, 0x87, 0xff,
	0x48, 0xe0, 0x2f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xcb, 0xea, 0x22, 0x73, 0x55, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoNameClient is the client API for NoName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoNameClient interface {
	// Tutorial
	PlayerStartTutorial(ctx context.Context, in *PlayerStartTutorialRequest, opts ...grpc.CallOption) (*PlayerStartTutorialResponse, error)
	PlayerEndTutorial(ctx context.Context, in *PlayerEndTutorialRequest, opts ...grpc.CallOption) (*PlayerEndTutorialResponse, error)
	StartTravelTutorial(ctx context.Context, in *StartTravelTutorialRequest, opts ...grpc.CallOption) (*StartTravelTutorialResponse, error)
	// Rarity
	GetAllRarities(ctx context.Context, in *GetAllRaritiesRequest, opts ...grpc.CallOption) (*GetAllRaritiesResponse, error)
	GetAllCraftableRarities(ctx context.Context, in *GetAllCraftableRaritiesRequest, opts ...grpc.CallOption) (*GetAllCraftableRaritiesResponse, error)
	GetRarityByID(ctx context.Context, in *GetRarityByIDRequest, opts ...grpc.CallOption) (*GetRarityByIDResponse, error)
	// Armor
	GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error)
	GetArmorByName(ctx context.Context, in *GetArmorByNameRequest, opts ...grpc.CallOption) (*GetArmorByNameResponse, error)
	GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error)
	GetPlayerArmorsByCategoryID(ctx context.Context, in *GetPlayerArmorsByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorsByCategoryIDResponse, error)
	GetPlayerArmorsEquipped(ctx context.Context, in *GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*GetPlayerArmorsEquippedResponse, error)
	GetPlayerArmorEquippedByCategoryID(ctx context.Context, in *GetPlayerArmorEquippedByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorEquippedByCategoryIDResponse, error)
	EquipArmor(ctx context.Context, in *EquipArmorRequest, opts ...grpc.CallOption) (*EquipArmorResponse, error)
	// ArmorCategory
	GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error)
	GetArmorCategoryBySlug(ctx context.Context, in *GetArmorCategoryBySlugRequest, opts ...grpc.CallOption) (*GetArmorCategoryBySlugResponse, error)
	// Weapon
	GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error)
	GetWeaponByName(ctx context.Context, in *GetWeaponByNameRequest, opts ...grpc.CallOption) (*GetWeaponByNameResponse, error)
	GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error)
	EquipWeapon(ctx context.Context, in *EquipWeaponRequest, opts ...grpc.CallOption) (*EquipWeaponResponse, error)
	// Player
	GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error)
	GetPlayerExperience(ctx context.Context, in *GetPlayerExperienceRequest, opts ...grpc.CallOption) (*GetPlayerExperienceResponse, error)
	GetPlayerLifePoint(ctx context.Context, in *GetPlayerLifePointRequest, opts ...grpc.CallOption) (*GetPlayerLifePointResponse, error)
	GetPlayerDailyReward(ctx context.Context, in *GetPlayerDailyRewardRequest, opts ...grpc.CallOption) (*GetPlayerDailyRewardResponse, error)
	// Player - Configuration
	PlayerSetLanguage(ctx context.Context, in *PlayerSetLanguageRequest, opts ...grpc.CallOption) (*PlayerSetLanguageResponse, error)
	PlayerSetTimezone(ctx context.Context, in *PlayerSetTimezoneRequest, opts ...grpc.CallOption) (*PlayerSetTimezoneResponse, error)
	// Player - Inventory
	GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error)
	GetPlayerAmulets(ctx context.Context, in *GetPlayerAmuletsRequest, opts ...grpc.CallOption) (*GetPlayerAmuletsResponse, error)
	GetPlayerItemByID(ctx context.Context, in *GetPlayerItemByIDRequest, opts ...grpc.CallOption) (*GetPlayerItemByIDResponse, error)
	GetPlayerResourceByID(ctx context.Context, in *GetPlayerResourceByIDRequest, opts ...grpc.CallOption) (*GetPlayerResourceByIDResponse, error)
	// Player - Position
	CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(ctx context.Context, in *CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*CountPlayerVisitedCurrentPlanetResponse, error)
	// Player - Signin
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// Player - Activity
	GetPlayerStateByID(ctx context.Context, in *GetPlayerActivityByIDRequest, opts ...grpc.CallOption) (*GetPlayerActivityByIDResponse, error)
	GetActivePlayerActivities(ctx context.Context, in *GetActivePlayerActivitiesRequest, opts ...grpc.CallOption) (*GetActivePlayerActivitiesResponse, error)
	CreatePlayerActivity(ctx context.Context, in *CreatePlayerActivityRequest, opts ...grpc.CallOption) (*CreatePlayerActivityResponse, error)
	UpdatePlayerActivity(ctx context.Context, in *UpdatePlayerActivityRequest, opts ...grpc.CallOption) (*UpdatePlayerActivityResponse, error)
	DeletePlayerActivity(ctx context.Context, in *DeletePlayerActivityRequest, opts ...grpc.CallOption) (*DeletePlayerActivityResponse, error)
	DeletePlayerActivityByController(ctx context.Context, in *DeletePlayerActivityByControllerRequest, opts ...grpc.CallOption) (*DeletePlayerActivityByControllerResponse, error)
	// Player - Activity - Notify
	GetPlayerActivityToNotify(ctx context.Context, in *GetPlayerActivityToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerActivityToNotifyResponse, error)
	SetPlayerActivityNotified(ctx context.Context, in *SetPlayerActivityNotifiedRequest, opts ...grpc.CallOption) (*SetPlayerActivityNotifiedResponse, error)
	// Player - TitanDrop - Notify
	GetTitanDropToNotify(ctx context.Context, in *GetTitanDropToNotifyRequest, opts ...grpc.CallOption) (*GetTitanDropToNotifyResponse, error)
	SetTitanDropNotified(ctx context.Context, in *SetTitanDropNotifiedRequest, opts ...grpc.CallOption) (*SetTitanDropNotifiedResponse, error)
	// Enemy
	GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error)
	HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error)
	GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error)
	GetTitanByPlanetSystemID(ctx context.Context, in *GetTitanByPlanetSystemIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetSystemIDResponse, error)
	HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error)
	TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error)
	// Titan Event
	GetTitanEventQuestions(ctx context.Context, in *GetTitanEventQuestionsRequest, opts ...grpc.CallOption) (*GetTitanEventQuestionsResponse, error)
	GetTitanEventQuestionByID(ctx context.Context, in *GetTitanEventQuestionByIDRequest, opts ...grpc.CallOption) (*GetTitanEventQuestionByIDResponse, error)
	GetTitanEventAnswerByID(ctx context.Context, in *GetTitanEventAnswerByIDRequest, opts ...grpc.CallOption) (*GetTitanEventAnswerByIDResponse, error)
	TitanEventSubmitAnswer(ctx context.Context, in *TitanEventSubmitAnswerRequest, opts ...grpc.CallOption) (*TitanEventSubmitAnswerResponse, error)
	// Language
	GetLanguageBySlug(ctx context.Context, in *GetLanguageBySlugRequest, opts ...grpc.CallOption) (*GetLanguageBySlugResponse, error)
	GetLanguageByName(ctx context.Context, in *GetLanguageByNameRequest, opts ...grpc.CallOption) (*GetLanguageByNameResponse, error)
	GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error)
	// Timezone
	GetTimezoneByDescription(ctx context.Context, in *GetTimezoneByDescriptionRequest, opts ...grpc.CallOption) (*GetTimezoneByDescriptionResponse, error)
	GetTimezoneByName(ctx context.Context, in *GetTimezoneByNameRequest, opts ...grpc.CallOption) (*GetTimezoneByNameResponse, error)
	GetAllTimezones(ctx context.Context, in *GetAllTimezonesRequest, opts ...grpc.CallOption) (*GetAllTimezonesResponse, error)
	// NPC
	GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error)
	// NPC - Banck
	BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error)
	BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error)
	GetPlanetByName(ctx context.Context, in *GetPlanetByNameRequest, opts ...grpc.CallOption) (*GetPlanetByNameResponse, error)
	GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error)
	GetExpansionInfo(ctx context.Context, in *GetExpansionInfoRequest, opts ...grpc.CallOption) (*GetExpansionInfoResponse, error)
	GetSafePlanets(ctx context.Context, in *GetSafePlanetsRequest, opts ...grpc.CallOption) (*GetSafePlanetsResponse, error)
	// Planet Bookmark
	AddPlanetBookmark(ctx context.Context, in *AddPlanetBookmarkRequest, opts ...grpc.CallOption) (*AddPlanetBookmarkResponse, error)
	RemovePlanetBookmark(ctx context.Context, in *RemovePlanetBookmarkRequest, opts ...grpc.CallOption) (*RemovePlanetBookmarkResponse, error)
	CheckIfPlayerHavePlanetBookmark(ctx context.Context, in *CheckIfPlayerHavePlanetBookmarkRequest, opts ...grpc.CallOption) (*CheckIfPlayerHavePlanetBookmarkResponse, error)
	// PlanetMap
	GetPlanetMapByID(ctx context.Context, in *GetPlanetMapByIDRequest, opts ...grpc.CallOption) (*GetPlanetMapByIDResponse, error)
	// Resource
	GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error)
	GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error)
	// Item
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	GetShoppableItems(ctx context.Context, in *GetShoppableItemsRequest, opts ...grpc.CallOption) (*GetShoppableItemsResponse, error)
	GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error)
	GetCraftableItemsByCategoryID(ctx context.Context, in *GetCraftableItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetCraftableItemsByCategoryIDResponse, error)
	UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error)
	BuyItem(ctx context.Context, in *BuyItemRequest, opts ...grpc.CallOption) (*BuyItemResponse, error)
	GetItemByID(ctx context.Context, in *GetItemByIDRequest, opts ...grpc.CallOption) (*GetItemByIDResponse, error)
	// ItemCateogory
	GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipByID(ctx context.Context, in *GetShipByIDRequest, opts ...grpc.CallOption) (*GetShipByIDResponse, error)
	GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error)
	EquipShip(ctx context.Context, in *EquipShipRequest, opts ...grpc.CallOption) (*EquipShipResponse, error)
	// Ship - Categoru
	GetAllShipCategories(ctx context.Context, in *GetAllShipCategoriesRequest, opts ...grpc.CallOption) (*GetAllShipCategoriesResponse, error)
	GetShipCategoryByID(ctx context.Context, in *GetShipCategoryByIDRequest, opts ...grpc.CallOption) (*GetShipCategoryByIDResponse, error)
	// Ship - Laboratory
	LaboratoryStartCrafting(ctx context.Context, in *LaboratoryStartCraftingRequest, opts ...grpc.CallOption) (*LaboratoryStartCraftingResponse, error)
	LaboratoryCheckHaveResourceForCrafting(ctx context.Context, in *LaboratoryCheckHaveResourceForCraftingRequest, opts ...grpc.CallOption) (*LaboratoryCheckHaveResourceForCraftingResponse, error)
	LaboratoryCheckCrafting(ctx context.Context, in *LaboratoryCheckCraftingRequest, opts ...grpc.CallOption) (*LaboratoryCheckCraftingResponse, error)
	LaboratoryEndCrafting(ctx context.Context, in *LaboratoryEndCraftingRequest, opts ...grpc.CallOption) (*LaboratoryEndCraftingResponse, error)
	// Ship - Rests
	GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error)
	StartPlayerRest(ctx context.Context, in *StartPlayerRestRequest, opts ...grpc.CallOption) (*StartPlayerRestResponse, error)
	RestCheck(ctx context.Context, in *RestCheckRequest, opts ...grpc.CallOption) (*RestCheckResponse, error)
	EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error)
	// Ship - Travel
	ShipTravelRadarInfo(ctx context.Context, in *ShipTravelInfoRequest, opts ...grpc.CallOption) (*ShipTravelInfoResponse, error)
	ShipTravelFavoriteInfo(ctx context.Context, in *ShipTravelInfoRequest, opts ...grpc.CallOption) (*ShipTravelInfoResponse, error)
	ShipTravelManualInfo(ctx context.Context, in *ShipTravelManualInfoRequest, opts ...grpc.CallOption) (*ShipTravelManualInfoResponse, error)
	StartShipTravel(ctx context.Context, in *StartShipTravelRequest, opts ...grpc.CallOption) (*StartShipTravelResponse, error)
	CheckShipTravel(ctx context.Context, in *CheckShipTravelRequest, opts ...grpc.CallOption) (*CheckShipTravelResponse, error)
	EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error)
	EndShipTravelDiamond(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error)
	TravelRescue(ctx context.Context, in *TravelRescueRequest, opts ...grpc.CallOption) (*TravelRescueResponse, error)
	// Transaction
	GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error)
	// Tresure
	DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error)
	// Mission
	GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error)
	CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error)
	GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error)
	// Expansion
	GetTeletrasportSafePlanetList(ctx context.Context, in *GetTeletrasportSafePlanetListRequest, opts ...grpc.CallOption) (*GetTeletrasportSafePlanetListResponse, error)
	EndTeletrasportSafePlanet(ctx context.Context, in *EndTeletrasportSafePlanetRequest, opts ...grpc.CallOption) (*EndTeletrasportSafePlanetResponse, error)
	// Research
	GetRecapActiveResearch(ctx context.Context, in *GetRecapActiveResearchRequest, opts ...grpc.CallOption) (*GetRecapActiveResearchResponse, error)
	ResearchDonation(ctx context.Context, in *ResearchDonationRequest, opts ...grpc.CallOption) (*ResearchDonationResponse, error)
	// Exploration
	ExplorationStart(ctx context.Context, in *ExplorationStartRequest, opts ...grpc.CallOption) (*ExplorationStartResponse, error)
	ExplorationContinue(ctx context.Context, in *ExplorationContinueRequest, opts ...grpc.CallOption) (*ExplorationContinueResponse, error)
	ExplorationEnd(ctx context.Context, in *ExplorationEndRequest, opts ...grpc.CallOption) (*ExplorationEndResponse, error)
	ExplorationCheck(ctx context.Context, in *ExplorationCheckRequest, opts ...grpc.CallOption) (*ExplorationCheckResponse, error)
	ExplorationDropResources(ctx context.Context, in *ExplorationDropResourcesRequest, opts ...grpc.CallOption) (*ExplorationDropResourcesResponse, error)
	// Exploration Category
	GetAllExplorationCategories(ctx context.Context, in *GetAllExplorationCategoriesRequest, opts ...grpc.CallOption) (*GetAllExplorationCategoriesResponse, error)
	// Conquerors
	GetConquerorsByPlanetID(ctx context.Context, in *GetConquerorsByPlanetIDRequest, opts ...grpc.CallOption) (*GetConquerorsByPlanetIDResponse, error)
	GetCurrentConquerorByPlanetID(ctx context.Context, in *GetCurrentConquerorByPlanetIDRequest, opts ...grpc.CallOption) (*GetCurrentConquerorByPlanetIDResponse, error)
	// Safeplanet - Crafter
	CrafterStart(ctx context.Context, in *CrafterStartRequest, opts ...grpc.CallOption) (*CrafterStartResponse, error)
	CrafterEnd(ctx context.Context, in *CrafterEndRequest, opts ...grpc.CallOption) (*CrafterEndResponse, error)
	CrafterCheck(ctx context.Context, in *CrafterCheckRequest, opts ...grpc.CallOption) (*CrafterCheckResponse, error)
	// Safeplanet - Crafter - Repair
	CrafterGetRepairWeaponInfo(ctx context.Context, in *CrafterGetRepairWeaponInfoRequest, opts ...grpc.CallOption) (*CrafterGetRepairWeaponInfoResponse, error)
	CrafterRepairWeapon(ctx context.Context, in *CrafterRepairWeaponRequest, opts ...grpc.CallOption) (*CrafterRepairWeaponResponse, error)
	// Safeplanet - Crafter - Decompose
	CrafterDecompose(ctx context.Context, in *CrafterDecomposeRequest, opts ...grpc.CallOption) (*CrafterDecomposeResponse, error)
	// Ability
	GetAbilityForPlayerByCategory(ctx context.Context, in *GetAbilityForPlayerByCategoryRequest, opts ...grpc.CallOption) (*GetAbilityForPlayerByCategoryResponse, error)
	LearnAbility(ctx context.Context, in *LearnAbilityRequest, opts ...grpc.CallOption) (*LearnAbilityResponse, error)
	CheckIfPlayerHaveAbility(ctx context.Context, in *CheckIfPlayerHaveAbilityRequest, opts ...grpc.CallOption) (*CheckIfPlayerHaveAbilityResponse, error)
	// AbilityCategory
	GetAllAbilityCategory(ctx context.Context, in *GetAllAbilityCategoryRequest, opts ...grpc.CallOption) (*GetAllAbilityCategoryResponse, error)
	GetAbilityCategoryBySlug(ctx context.Context, in *GetAbilityCategoryBySlugRequest, opts ...grpc.CallOption) (*GetAbilityCategoryBySlugResponse, error)
	// Party
	GetPartyDetails(ctx context.Context, in *GetPartyDetailsRequest, opts ...grpc.CallOption) (*GetPartyDetailsResponse, error)
	CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error)
	AddPlayerToParty(ctx context.Context, in *AddPlayerToPartyRequest, opts ...grpc.CallOption) (*AddPlayerToPartyResponse, error)
	RemovePlayerToParty(ctx context.Context, in *RemovePlayerToPartyRequest, opts ...grpc.CallOption) (*RemovePlayerToPartyResponse, error)
	RemovePlayerFromParty(ctx context.Context, in *RemovePlayerFromPartyRequest, opts ...grpc.CallOption) (*RemovePlayerFromPartyResponse, error)
	// Guild
	CheckGuildName(ctx context.Context, in *CheckGuildNameRequest, opts ...grpc.CallOption) (*CheckGuildNameResponse, error)
	CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error)
	JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*JoinGuildResponse, error)
	GetJoinGuildsList(ctx context.Context, in *GetJoinGuildsListRequest, opts ...grpc.CallOption) (*GetJoinGuildsListResponse, error)
	GetPlayerGuild(ctx context.Context, in *GetPlayerGuildRequest, opts ...grpc.CallOption) (*GetPlayerGuildResponse, error)
	LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*LeaveGuildResponse, error)
	GetPlayersGuild(ctx context.Context, in *GetPlayersGuildRequest, opts ...grpc.CallOption) (*GetPlayersGuildResponse, error)
	AddPlayerToGuild(ctx context.Context, in *AddPlayerToGuildRequest, opts ...grpc.CallOption) (*AddPlayerToGuildResponse, error)
	RemovePlayerToGuild(ctx context.Context, in *RemovePlayerToGuildRequest, opts ...grpc.CallOption) (*RemovePlayerToGuildResponse, error)
	// Guild - Points
	GetGuildPoints(ctx context.Context, in *GetGuildPointsRequest, opts ...grpc.CallOption) (*GetGuildPointsResponse, error)
	GetPlayerGuildPoints(ctx context.Context, in *GetPlayerGuildPointsRequest, opts ...grpc.CallOption) (*GetPlayerGuildPointsResponse, error)
	// Hangar - Repair
	GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error)
	StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error)
	EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error)
	CheckShipRepair(ctx context.Context, in *CheckShipRepairRequest, opts ...grpc.CallOption) (*CheckShipRepairResponse, error)
	// Hangar - Create
	GetCreateShipInfo(ctx context.Context, in *GetCreateShipInfoRequest, opts ...grpc.CallOption) (*GetCreateShipInfoResponse, error)
	StartCreateShip(ctx context.Context, in *StartCreateShipRequest, opts ...grpc.CallOption) (*StartCreateShipResponse, error)
	CheckCreateShip(ctx context.Context, in *CheckCreateShipRequest, opts ...grpc.CallOption) (*CheckCreateShipResponse, error)
	EndCreateShip(ctx context.Context, in *EndCreateShipRequest, opts ...grpc.CallOption) (*EndCreateShipResponse, error)
	EndCreateShipDiamond(ctx context.Context, in *EndCreateShipRequest, opts ...grpc.CallOption) (*EndCreateShipResponse, error)
	// Achievement
	GetAllAchievement(ctx context.Context, in *GetAllAchievementRequest, opts ...grpc.CallOption) (*GetAllAchievementResponse, error)
	GetAchievementsByCategoryID(ctx context.Context, in *GetAchievementsByCategoryIDRequest, opts ...grpc.CallOption) (*GetAchievementsByCategoryIDResponse, error)
	GetAchievementForPlayerByCategory(ctx context.Context, in *GetAchievementForPlayerByCategoryRequest, opts ...grpc.CallOption) (*GetAchievementForPlayerByCategoryResponse, error)
	CheckIfPlayerHaveAchievement(ctx context.Context, in *CheckIfPlayerHaveAchievementRequest, opts ...grpc.CallOption) (*CheckIfPlayerHaveAchievementResponse, error)
	// Achievement - Category
	GetAllAchievementCategory(ctx context.Context, in *GetAllAchievementCategoryRequest, opts ...grpc.CallOption) (*GetAllAchievementCategoryResponse, error)
	GetAchievementCategoryByID(ctx context.Context, in *GetAchievementCategoryByIDRequest, opts ...grpc.CallOption) (*GetAchievementCategoryByIDResponse, error)
	GetAchievementCategoryBySlug(ctx context.Context, in *GetAchievementCategoryBySlugRequest, opts ...grpc.CallOption) (*GetAchievementCategoryBySlugResponse, error)
	// Achievement - Player
	GetPlayerAchievementToNotify(ctx context.Context, in *GetPlayerAchievementToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerAchievementToNotifyResponse, error)
	SetPlayerAchievementNotified(ctx context.Context, in *SetPlayerAchievementNotifiedRequest, opts ...grpc.CallOption) (*SetPlayerAchievementNotifiedResponse, error)
	// Relax - Three Card Game
	ThreeCardGamePlay(ctx context.Context, in *ThreeCardGamePlayRequest, opts ...grpc.CallOption) (*ThreeCardGamePlayResponse, error)
	ThreeCardGameCheck(ctx context.Context, in *ThreeCardGameCheckRequest, opts ...grpc.CallOption) (*ThreeCardGameCheckResponse, error)
	ThreeCardGameRecoverPlay(ctx context.Context, in *ThreeCardGameRecoverPlayRequest, opts ...grpc.CallOption) (*ThreeCardGameRecoverPlayResponse, error)
	ThreeCardGameEndGame(ctx context.Context, in *ThreeCardGameEndGameRequest, opts ...grpc.CallOption) (*ThreeCardGameEndGameResponse, error)
	// Sefeplanet - Statistics
	StatisticsTopPlayerEnemyKillAll(ctx context.Context, in *StatisticsTopPlayerEnemyKillAllRequest, opts ...grpc.CallOption) (*StatisticsTopPlayerEnemyKillAllResponse, error)
	StatisticsTopPlayerEnemyKillYou(ctx context.Context, in *StatisticsTopPlayerEnemyKillYouRequest, opts ...grpc.CallOption) (*StatisticsTopPlayerEnemyKillYouResponse, error)
	StatisticsTopPlanetExploredAll(ctx context.Context, in *StatisticsTopPlanetExploredAllRequest, opts ...grpc.CallOption) (*StatisticsTopPlanetExploredAllResponse, error)
	StatisticsTopPlanetExploredYou(ctx context.Context, in *StatisticsTopPlanetExploredYouRequest, opts ...grpc.CallOption) (*StatisticsTopPlanetExploredYouResponse, error)
	StatisticsTopTravelAll(ctx context.Context, in *StatisticsTopTravelAllRequest, opts ...grpc.CallOption) (*StatisticsTopTravelAllResponse, error)
	StatisticsTopTravelYou(ctx context.Context, in *StatisticsTopTravelYouRequest, opts ...grpc.CallOption) (*StatisticsTopTravelYouResponse, error)
	StatisticsTopMissionAll(ctx context.Context, in *StatisticsTopMissionAllRequest, opts ...grpc.CallOption) (*StatisticsTopMissionAllResponse, error)
	StatisticsTopMissionYou(ctx context.Context, in *StatisticsTopMissionYouRequest, opts ...grpc.CallOption) (*StatisticsTopMissionYouResponse, error)
	// Dark Merchant
	GetDarkMerchant(ctx context.Context, in *GetDarkMerchantRequest, opts ...grpc.CallOption) (*GetDarkMerchantResponse, error)
	DarkMerchantBuyResource(ctx context.Context, in *DarkMerchantBuyResourceRequest, opts ...grpc.CallOption) (*DarkMerchantBuyResourceResponse, error)
	// Level
	GetLevelByID(ctx context.Context, in *GetLevelByIDRequest, opts ...grpc.CallOption) (*GetLevelByIDResponse, error)
	// Telegram Status
	CreateTelegramStatus(ctx context.Context, in *CreateTelegramStatusRequest, opts ...grpc.CallOption) (*CreateTelegramStatusResponse, error)
	GetTelegramStatus(ctx context.Context, in *GetTelegramStatusRequest, opts ...grpc.CallOption) (*GetTelegramStatusResponse, error)
	DeleteTelegramStatus(ctx context.Context, in *DeleteTelegramStatusRequest, opts ...grpc.CallOption) (*DeleteTelegramStatusResponse, error)
}

type noNameClient struct {
	cc *grpc.ClientConn
}

func NewNoNameClient(cc *grpc.ClientConn) NoNameClient {
	return &noNameClient{cc}
}

func (c *noNameClient) PlayerStartTutorial(ctx context.Context, in *PlayerStartTutorialRequest, opts ...grpc.CallOption) (*PlayerStartTutorialResponse, error) {
	out := new(PlayerStartTutorialResponse)
	err := c.cc.Invoke(ctx, "/NoName/PlayerStartTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) PlayerEndTutorial(ctx context.Context, in *PlayerEndTutorialRequest, opts ...grpc.CallOption) (*PlayerEndTutorialResponse, error) {
	out := new(PlayerEndTutorialResponse)
	err := c.cc.Invoke(ctx, "/NoName/PlayerEndTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartTravelTutorial(ctx context.Context, in *StartTravelTutorialRequest, opts ...grpc.CallOption) (*StartTravelTutorialResponse, error) {
	out := new(StartTravelTutorialResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartTravelTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllRarities(ctx context.Context, in *GetAllRaritiesRequest, opts ...grpc.CallOption) (*GetAllRaritiesResponse, error) {
	out := new(GetAllRaritiesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllRarities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllCraftableRarities(ctx context.Context, in *GetAllCraftableRaritiesRequest, opts ...grpc.CallOption) (*GetAllCraftableRaritiesResponse, error) {
	out := new(GetAllCraftableRaritiesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllCraftableRarities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRarityByID(ctx context.Context, in *GetRarityByIDRequest, opts ...grpc.CallOption) (*GetRarityByIDResponse, error) {
	out := new(GetRarityByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRarityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error) {
	out := new(GetArmorByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetArmorByName(ctx context.Context, in *GetArmorByNameRequest, opts ...grpc.CallOption) (*GetArmorByNameResponse, error) {
	out := new(GetArmorByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error) {
	out := new(GetPlayerArmorsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorsByCategoryID(ctx context.Context, in *GetPlayerArmorsByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorsByCategoryIDResponse, error) {
	out := new(GetPlayerArmorsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorsEquipped(ctx context.Context, in *GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*GetPlayerArmorsEquippedResponse, error) {
	out := new(GetPlayerArmorsEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorsEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorEquippedByCategoryID(ctx context.Context, in *GetPlayerArmorEquippedByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorEquippedByCategoryIDResponse, error) {
	out := new(GetPlayerArmorEquippedByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorEquippedByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EquipArmor(ctx context.Context, in *EquipArmorRequest, opts ...grpc.CallOption) (*EquipArmorResponse, error) {
	out := new(EquipArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/EquipArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error) {
	out := new(GetAllArmorCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllArmorCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetArmorCategoryBySlug(ctx context.Context, in *GetArmorCategoryBySlugRequest, opts ...grpc.CallOption) (*GetArmorCategoryBySlugResponse, error) {
	out := new(GetArmorCategoryBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorCategoryBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error) {
	out := new(GetWeaponByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetWeaponByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetWeaponByName(ctx context.Context, in *GetWeaponByNameRequest, opts ...grpc.CallOption) (*GetWeaponByNameResponse, error) {
	out := new(GetWeaponByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetWeaponByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error) {
	out := new(GetPlayerWeaponsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeapons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error) {
	out := new(GetPlayerWeaponEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeaponEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EquipWeapon(ctx context.Context, in *EquipWeaponRequest, opts ...grpc.CallOption) (*EquipWeaponResponse, error) {
	out := new(EquipWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/EquipWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error) {
	out := new(GetPlayerByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error) {
	out := new(GetPlayerByUsernameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerExperience(ctx context.Context, in *GetPlayerExperienceRequest, opts ...grpc.CallOption) (*GetPlayerExperienceResponse, error) {
	out := new(GetPlayerExperienceResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerLifePoint(ctx context.Context, in *GetPlayerLifePointRequest, opts ...grpc.CallOption) (*GetPlayerLifePointResponse, error) {
	out := new(GetPlayerLifePointResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerLifePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerDailyReward(ctx context.Context, in *GetPlayerDailyRewardRequest, opts ...grpc.CallOption) (*GetPlayerDailyRewardResponse, error) {
	out := new(GetPlayerDailyRewardResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerDailyReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) PlayerSetLanguage(ctx context.Context, in *PlayerSetLanguageRequest, opts ...grpc.CallOption) (*PlayerSetLanguageResponse, error) {
	out := new(PlayerSetLanguageResponse)
	err := c.cc.Invoke(ctx, "/NoName/PlayerSetLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) PlayerSetTimezone(ctx context.Context, in *PlayerSetTimezoneRequest, opts ...grpc.CallOption) (*PlayerSetTimezoneResponse, error) {
	out := new(PlayerSetTimezoneResponse)
	err := c.cc.Invoke(ctx, "/NoName/PlayerSetTimezone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error) {
	out := new(GetPlayerResourcesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error) {
	out := new(GetPlayerItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerAmulets(ctx context.Context, in *GetPlayerAmuletsRequest, opts ...grpc.CallOption) (*GetPlayerAmuletsResponse, error) {
	out := new(GetPlayerAmuletsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerAmulets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerItemByID(ctx context.Context, in *GetPlayerItemByIDRequest, opts ...grpc.CallOption) (*GetPlayerItemByIDResponse, error) {
	out := new(GetPlayerItemByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerItemByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerResourceByID(ctx context.Context, in *GetPlayerResourceByIDRequest, opts ...grpc.CallOption) (*GetPlayerResourceByIDResponse, error) {
	out := new(GetPlayerResourceByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerResourceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error) {
	out := new(CreatePlayerPositionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error) {
	out := new(GetPlayerCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error) {
	out := new(CountPlanetVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlanetVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error) {
	out := new(CountSystemVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountSystemVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlayerVisitedCurrentPlanet(ctx context.Context, in *CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*CountPlayerVisitedCurrentPlanetResponse, error) {
	out := new(CountPlayerVisitedCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlayerVisitedCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/NoName/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateByID(ctx context.Context, in *GetPlayerActivityByIDRequest, opts ...grpc.CallOption) (*GetPlayerActivityByIDResponse, error) {
	out := new(GetPlayerActivityByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetActivePlayerActivities(ctx context.Context, in *GetActivePlayerActivitiesRequest, opts ...grpc.CallOption) (*GetActivePlayerActivitiesResponse, error) {
	out := new(GetActivePlayerActivitiesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetActivePlayerActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerActivity(ctx context.Context, in *CreatePlayerActivityRequest, opts ...grpc.CallOption) (*CreatePlayerActivityResponse, error) {
	out := new(CreatePlayerActivityResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdatePlayerActivity(ctx context.Context, in *UpdatePlayerActivityRequest, opts ...grpc.CallOption) (*UpdatePlayerActivityResponse, error) {
	out := new(UpdatePlayerActivityResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdatePlayerActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeletePlayerActivity(ctx context.Context, in *DeletePlayerActivityRequest, opts ...grpc.CallOption) (*DeletePlayerActivityResponse, error) {
	out := new(DeletePlayerActivityResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeletePlayerActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeletePlayerActivityByController(ctx context.Context, in *DeletePlayerActivityByControllerRequest, opts ...grpc.CallOption) (*DeletePlayerActivityByControllerResponse, error) {
	out := new(DeletePlayerActivityByControllerResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeletePlayerActivityByController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerActivityToNotify(ctx context.Context, in *GetPlayerActivityToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerActivityToNotifyResponse, error) {
	out := new(GetPlayerActivityToNotifyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerActivityToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SetPlayerActivityNotified(ctx context.Context, in *SetPlayerActivityNotifiedRequest, opts ...grpc.CallOption) (*SetPlayerActivityNotifiedResponse, error) {
	out := new(SetPlayerActivityNotifiedResponse)
	err := c.cc.Invoke(ctx, "/NoName/SetPlayerActivityNotified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanDropToNotify(ctx context.Context, in *GetTitanDropToNotifyRequest, opts ...grpc.CallOption) (*GetTitanDropToNotifyResponse, error) {
	out := new(GetTitanDropToNotifyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanDropToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SetTitanDropNotified(ctx context.Context, in *SetTitanDropNotifiedRequest, opts ...grpc.CallOption) (*SetTitanDropNotifiedResponse, error) {
	out := new(SetTitanDropNotifiedResponse)
	err := c.cc.Invoke(ctx, "/NoName/SetTitanDropNotified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error) {
	out := new(GetEnemyByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetEnemyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error) {
	out := new(HitEnemyResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error) {
	out := new(GetTitanByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error) {
	out := new(GetTitanByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error) {
	out := new(GetTitanByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByPlanetSystemID(ctx context.Context, in *GetTitanByPlanetSystemIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetSystemIDResponse, error) {
	out := new(GetTitanByPlanetSystemIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByPlanetSystemID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error) {
	out := new(HitTitanResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitTitan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error) {
	out := new(TitanDiscoveredResponse)
	err := c.cc.Invoke(ctx, "/NoName/TitanDiscovered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanEventQuestions(ctx context.Context, in *GetTitanEventQuestionsRequest, opts ...grpc.CallOption) (*GetTitanEventQuestionsResponse, error) {
	out := new(GetTitanEventQuestionsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanEventQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanEventQuestionByID(ctx context.Context, in *GetTitanEventQuestionByIDRequest, opts ...grpc.CallOption) (*GetTitanEventQuestionByIDResponse, error) {
	out := new(GetTitanEventQuestionByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanEventQuestionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanEventAnswerByID(ctx context.Context, in *GetTitanEventAnswerByIDRequest, opts ...grpc.CallOption) (*GetTitanEventAnswerByIDResponse, error) {
	out := new(GetTitanEventAnswerByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanEventAnswerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) TitanEventSubmitAnswer(ctx context.Context, in *TitanEventSubmitAnswerRequest, opts ...grpc.CallOption) (*TitanEventSubmitAnswerResponse, error) {
	out := new(TitanEventSubmitAnswerResponse)
	err := c.cc.Invoke(ctx, "/NoName/TitanEventSubmitAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetLanguageBySlug(ctx context.Context, in *GetLanguageBySlugRequest, opts ...grpc.CallOption) (*GetLanguageBySlugResponse, error) {
	out := new(GetLanguageBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetLanguageBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetLanguageByName(ctx context.Context, in *GetLanguageByNameRequest, opts ...grpc.CallOption) (*GetLanguageByNameResponse, error) {
	out := new(GetLanguageByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetLanguageByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error) {
	out := new(GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTimezoneByDescription(ctx context.Context, in *GetTimezoneByDescriptionRequest, opts ...grpc.CallOption) (*GetTimezoneByDescriptionResponse, error) {
	out := new(GetTimezoneByDescriptionResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTimezoneByDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTimezoneByName(ctx context.Context, in *GetTimezoneByNameRequest, opts ...grpc.CallOption) (*GetTimezoneByNameResponse, error) {
	out := new(GetTimezoneByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTimezoneByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllTimezones(ctx context.Context, in *GetAllTimezonesRequest, opts ...grpc.CallOption) (*GetAllTimezonesResponse, error) {
	out := new(GetAllTimezonesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllTimezones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error) {
	out := new(GetAllNPCResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllNPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error) {
	out := new(BankDepositResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error) {
	out := new(BankWithdrawResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error) {
	out := new(GetPlanetByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByName(ctx context.Context, in *GetPlanetByNameRequest, opts ...grpc.CallOption) (*GetPlanetByNameResponse, error) {
	out := new(GetPlanetByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error) {
	out := new(GetPlanetByCoordinateResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error) {
	out := new(GetPlanetByMapIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByMapID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetExpansionInfo(ctx context.Context, in *GetExpansionInfoRequest, opts ...grpc.CallOption) (*GetExpansionInfoResponse, error) {
	out := new(GetExpansionInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetExpansionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetSafePlanets(ctx context.Context, in *GetSafePlanetsRequest, opts ...grpc.CallOption) (*GetSafePlanetsResponse, error) {
	out := new(GetSafePlanetsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetSafePlanets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) AddPlanetBookmark(ctx context.Context, in *AddPlanetBookmarkRequest, opts ...grpc.CallOption) (*AddPlanetBookmarkResponse, error) {
	out := new(AddPlanetBookmarkResponse)
	err := c.cc.Invoke(ctx, "/NoName/AddPlanetBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) RemovePlanetBookmark(ctx context.Context, in *RemovePlanetBookmarkRequest, opts ...grpc.CallOption) (*RemovePlanetBookmarkResponse, error) {
	out := new(RemovePlanetBookmarkResponse)
	err := c.cc.Invoke(ctx, "/NoName/RemovePlanetBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckIfPlayerHavePlanetBookmark(ctx context.Context, in *CheckIfPlayerHavePlanetBookmarkRequest, opts ...grpc.CallOption) (*CheckIfPlayerHavePlanetBookmarkResponse, error) {
	out := new(CheckIfPlayerHavePlanetBookmarkResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckIfPlayerHavePlanetBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetMapByID(ctx context.Context, in *GetPlanetMapByIDRequest, opts ...grpc.CallOption) (*GetPlanetMapByIDResponse, error) {
	out := new(GetPlanetMapByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error) {
	out := new(GetResourceByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error) {
	out := new(GetResourceByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShoppableItems(ctx context.Context, in *GetShoppableItemsRequest, opts ...grpc.CallOption) (*GetShoppableItemsResponse, error) {
	out := new(GetShoppableItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShoppableItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error) {
	out := new(GetItemsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetItemsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetCraftableItemsByCategoryID(ctx context.Context, in *GetCraftableItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetCraftableItemsByCategoryIDResponse, error) {
	out := new(GetCraftableItemsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetCraftableItemsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error) {
	out := new(UseItemResponse)
	err := c.cc.Invoke(ctx, "/NoName/UseItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BuyItem(ctx context.Context, in *BuyItemRequest, opts ...grpc.CallOption) (*BuyItemResponse, error) {
	out := new(BuyItemResponse)
	err := c.cc.Invoke(ctx, "/NoName/BuyItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetItemByID(ctx context.Context, in *GetItemByIDRequest, opts ...grpc.CallOption) (*GetItemByIDResponse, error) {
	out := new(GetItemByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetItemByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error) {
	out := new(GetAllItemCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItemCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipByID(ctx context.Context, in *GetShipByIDRequest, opts ...grpc.CallOption) (*GetShipByIDResponse, error) {
	out := new(GetShipByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error) {
	out := new(GetPlayerShipsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error) {
	out := new(GetPlayerShipEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShipEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EquipShip(ctx context.Context, in *EquipShipRequest, opts ...grpc.CallOption) (*EquipShipResponse, error) {
	out := new(EquipShipResponse)
	err := c.cc.Invoke(ctx, "/NoName/EquipShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllShipCategories(ctx context.Context, in *GetAllShipCategoriesRequest, opts ...grpc.CallOption) (*GetAllShipCategoriesResponse, error) {
	out := new(GetAllShipCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllShipCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipCategoryByID(ctx context.Context, in *GetShipCategoryByIDRequest, opts ...grpc.CallOption) (*GetShipCategoryByIDResponse, error) {
	out := new(GetShipCategoryByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipCategoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) LaboratoryStartCrafting(ctx context.Context, in *LaboratoryStartCraftingRequest, opts ...grpc.CallOption) (*LaboratoryStartCraftingResponse, error) {
	out := new(LaboratoryStartCraftingResponse)
	err := c.cc.Invoke(ctx, "/NoName/LaboratoryStartCrafting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) LaboratoryCheckHaveResourceForCrafting(ctx context.Context, in *LaboratoryCheckHaveResourceForCraftingRequest, opts ...grpc.CallOption) (*LaboratoryCheckHaveResourceForCraftingResponse, error) {
	out := new(LaboratoryCheckHaveResourceForCraftingResponse)
	err := c.cc.Invoke(ctx, "/NoName/LaboratoryCheckHaveResourceForCrafting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) LaboratoryCheckCrafting(ctx context.Context, in *LaboratoryCheckCraftingRequest, opts ...grpc.CallOption) (*LaboratoryCheckCraftingResponse, error) {
	out := new(LaboratoryCheckCraftingResponse)
	err := c.cc.Invoke(ctx, "/NoName/LaboratoryCheckCrafting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) LaboratoryEndCrafting(ctx context.Context, in *LaboratoryEndCraftingRequest, opts ...grpc.CallOption) (*LaboratoryEndCraftingResponse, error) {
	out := new(LaboratoryEndCraftingResponse)
	err := c.cc.Invoke(ctx, "/NoName/LaboratoryEndCrafting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error) {
	out := new(GetRestsInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRestsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartPlayerRest(ctx context.Context, in *StartPlayerRestRequest, opts ...grpc.CallOption) (*StartPlayerRestResponse, error) {
	out := new(StartPlayerRestResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartPlayerRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) RestCheck(ctx context.Context, in *RestCheckRequest, opts ...grpc.CallOption) (*RestCheckResponse, error) {
	out := new(RestCheckResponse)
	err := c.cc.Invoke(ctx, "/NoName/RestCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error) {
	out := new(EndPlayerRestResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndPlayerRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ShipTravelRadarInfo(ctx context.Context, in *ShipTravelInfoRequest, opts ...grpc.CallOption) (*ShipTravelInfoResponse, error) {
	out := new(ShipTravelInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/ShipTravelRadarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ShipTravelFavoriteInfo(ctx context.Context, in *ShipTravelInfoRequest, opts ...grpc.CallOption) (*ShipTravelInfoResponse, error) {
	out := new(ShipTravelInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/ShipTravelFavoriteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ShipTravelManualInfo(ctx context.Context, in *ShipTravelManualInfoRequest, opts ...grpc.CallOption) (*ShipTravelManualInfoResponse, error) {
	out := new(ShipTravelManualInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/ShipTravelManualInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartShipTravel(ctx context.Context, in *StartShipTravelRequest, opts ...grpc.CallOption) (*StartShipTravelResponse, error) {
	out := new(StartShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartShipTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckShipTravel(ctx context.Context, in *CheckShipTravelRequest, opts ...grpc.CallOption) (*CheckShipTravelResponse, error) {
	out := new(CheckShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckShipTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error) {
	out := new(EndShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipTravelDiamond(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error) {
	out := new(EndShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipTravelDiamond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) TravelRescue(ctx context.Context, in *TravelRescueRequest, opts ...grpc.CallOption) (*TravelRescueResponse, error) {
	out := new(TravelRescueResponse)
	err := c.cc.Invoke(ctx, "/NoName/TravelRescue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error) {
	out := new(GetPlayerEconomyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerEconomy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error) {
	out := new(DropTresureResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropTresure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error) {
	out := new(GetMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error) {
	out := new(CheckMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error) {
	out := new(GetMissionRewardResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMissionReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTeletrasportSafePlanetList(ctx context.Context, in *GetTeletrasportSafePlanetListRequest, opts ...grpc.CallOption) (*GetTeletrasportSafePlanetListResponse, error) {
	out := new(GetTeletrasportSafePlanetListResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTeletrasportSafePlanetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndTeletrasportSafePlanet(ctx context.Context, in *EndTeletrasportSafePlanetRequest, opts ...grpc.CallOption) (*EndTeletrasportSafePlanetResponse, error) {
	out := new(EndTeletrasportSafePlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndTeletrasportSafePlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRecapActiveResearch(ctx context.Context, in *GetRecapActiveResearchRequest, opts ...grpc.CallOption) (*GetRecapActiveResearchResponse, error) {
	out := new(GetRecapActiveResearchResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRecapActiveResearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ResearchDonation(ctx context.Context, in *ResearchDonationRequest, opts ...grpc.CallOption) (*ResearchDonationResponse, error) {
	out := new(ResearchDonationResponse)
	err := c.cc.Invoke(ctx, "/NoName/ResearchDonation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationStart(ctx context.Context, in *ExplorationStartRequest, opts ...grpc.CallOption) (*ExplorationStartResponse, error) {
	out := new(ExplorationStartResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationContinue(ctx context.Context, in *ExplorationContinueRequest, opts ...grpc.CallOption) (*ExplorationContinueResponse, error) {
	out := new(ExplorationContinueResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationContinue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationEnd(ctx context.Context, in *ExplorationEndRequest, opts ...grpc.CallOption) (*ExplorationEndResponse, error) {
	out := new(ExplorationEndResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationCheck(ctx context.Context, in *ExplorationCheckRequest, opts ...grpc.CallOption) (*ExplorationCheckResponse, error) {
	out := new(ExplorationCheckResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationDropResources(ctx context.Context, in *ExplorationDropResourcesRequest, opts ...grpc.CallOption) (*ExplorationDropResourcesResponse, error) {
	out := new(ExplorationDropResourcesResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationDropResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllExplorationCategories(ctx context.Context, in *GetAllExplorationCategoriesRequest, opts ...grpc.CallOption) (*GetAllExplorationCategoriesResponse, error) {
	out := new(GetAllExplorationCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllExplorationCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetConquerorsByPlanetID(ctx context.Context, in *GetConquerorsByPlanetIDRequest, opts ...grpc.CallOption) (*GetConquerorsByPlanetIDResponse, error) {
	out := new(GetConquerorsByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetConquerorsByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetCurrentConquerorByPlanetID(ctx context.Context, in *GetCurrentConquerorByPlanetIDRequest, opts ...grpc.CallOption) (*GetCurrentConquerorByPlanetIDResponse, error) {
	out := new(GetCurrentConquerorByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetCurrentConquerorByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterStart(ctx context.Context, in *CrafterStartRequest, opts ...grpc.CallOption) (*CrafterStartResponse, error) {
	out := new(CrafterStartResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterEnd(ctx context.Context, in *CrafterEndRequest, opts ...grpc.CallOption) (*CrafterEndResponse, error) {
	out := new(CrafterEndResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterCheck(ctx context.Context, in *CrafterCheckRequest, opts ...grpc.CallOption) (*CrafterCheckResponse, error) {
	out := new(CrafterCheckResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterGetRepairWeaponInfo(ctx context.Context, in *CrafterGetRepairWeaponInfoRequest, opts ...grpc.CallOption) (*CrafterGetRepairWeaponInfoResponse, error) {
	out := new(CrafterGetRepairWeaponInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterGetRepairWeaponInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterRepairWeapon(ctx context.Context, in *CrafterRepairWeaponRequest, opts ...grpc.CallOption) (*CrafterRepairWeaponResponse, error) {
	out := new(CrafterRepairWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterRepairWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterDecompose(ctx context.Context, in *CrafterDecomposeRequest, opts ...grpc.CallOption) (*CrafterDecomposeResponse, error) {
	out := new(CrafterDecomposeResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterDecompose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAbilityForPlayerByCategory(ctx context.Context, in *GetAbilityForPlayerByCategoryRequest, opts ...grpc.CallOption) (*GetAbilityForPlayerByCategoryResponse, error) {
	out := new(GetAbilityForPlayerByCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAbilityForPlayerByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) LearnAbility(ctx context.Context, in *LearnAbilityRequest, opts ...grpc.CallOption) (*LearnAbilityResponse, error) {
	out := new(LearnAbilityResponse)
	err := c.cc.Invoke(ctx, "/NoName/LearnAbility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckIfPlayerHaveAbility(ctx context.Context, in *CheckIfPlayerHaveAbilityRequest, opts ...grpc.CallOption) (*CheckIfPlayerHaveAbilityResponse, error) {
	out := new(CheckIfPlayerHaveAbilityResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckIfPlayerHaveAbility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllAbilityCategory(ctx context.Context, in *GetAllAbilityCategoryRequest, opts ...grpc.CallOption) (*GetAllAbilityCategoryResponse, error) {
	out := new(GetAllAbilityCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllAbilityCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAbilityCategoryBySlug(ctx context.Context, in *GetAbilityCategoryBySlugRequest, opts ...grpc.CallOption) (*GetAbilityCategoryBySlugResponse, error) {
	out := new(GetAbilityCategoryBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAbilityCategoryBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPartyDetails(ctx context.Context, in *GetPartyDetailsRequest, opts ...grpc.CallOption) (*GetPartyDetailsResponse, error) {
	out := new(GetPartyDetailsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPartyDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error) {
	out := new(CreatePartyResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreateParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) AddPlayerToParty(ctx context.Context, in *AddPlayerToPartyRequest, opts ...grpc.CallOption) (*AddPlayerToPartyResponse, error) {
	out := new(AddPlayerToPartyResponse)
	err := c.cc.Invoke(ctx, "/NoName/AddPlayerToParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) RemovePlayerToParty(ctx context.Context, in *RemovePlayerToPartyRequest, opts ...grpc.CallOption) (*RemovePlayerToPartyResponse, error) {
	out := new(RemovePlayerToPartyResponse)
	err := c.cc.Invoke(ctx, "/NoName/RemovePlayerToParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) RemovePlayerFromParty(ctx context.Context, in *RemovePlayerFromPartyRequest, opts ...grpc.CallOption) (*RemovePlayerFromPartyResponse, error) {
	out := new(RemovePlayerFromPartyResponse)
	err := c.cc.Invoke(ctx, "/NoName/RemovePlayerFromParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckGuildName(ctx context.Context, in *CheckGuildNameRequest, opts ...grpc.CallOption) (*CheckGuildNameResponse, error) {
	out := new(CheckGuildNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckGuildName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error) {
	out := new(CreateGuildResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreateGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*JoinGuildResponse, error) {
	out := new(JoinGuildResponse)
	err := c.cc.Invoke(ctx, "/NoName/JoinGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetJoinGuildsList(ctx context.Context, in *GetJoinGuildsListRequest, opts ...grpc.CallOption) (*GetJoinGuildsListResponse, error) {
	out := new(GetJoinGuildsListResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetJoinGuildsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerGuild(ctx context.Context, in *GetPlayerGuildRequest, opts ...grpc.CallOption) (*GetPlayerGuildResponse, error) {
	out := new(GetPlayerGuildResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*LeaveGuildResponse, error) {
	out := new(LeaveGuildResponse)
	err := c.cc.Invoke(ctx, "/NoName/LeaveGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayersGuild(ctx context.Context, in *GetPlayersGuildRequest, opts ...grpc.CallOption) (*GetPlayersGuildResponse, error) {
	out := new(GetPlayersGuildResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayersGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) AddPlayerToGuild(ctx context.Context, in *AddPlayerToGuildRequest, opts ...grpc.CallOption) (*AddPlayerToGuildResponse, error) {
	out := new(AddPlayerToGuildResponse)
	err := c.cc.Invoke(ctx, "/NoName/AddPlayerToGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) RemovePlayerToGuild(ctx context.Context, in *RemovePlayerToGuildRequest, opts ...grpc.CallOption) (*RemovePlayerToGuildResponse, error) {
	out := new(RemovePlayerToGuildResponse)
	err := c.cc.Invoke(ctx, "/NoName/RemovePlayerToGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetGuildPoints(ctx context.Context, in *GetGuildPointsRequest, opts ...grpc.CallOption) (*GetGuildPointsResponse, error) {
	out := new(GetGuildPointsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetGuildPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerGuildPoints(ctx context.Context, in *GetPlayerGuildPointsRequest, opts ...grpc.CallOption) (*GetPlayerGuildPointsResponse, error) {
	out := new(GetPlayerGuildPointsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerGuildPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error) {
	out := new(GetShipRepairInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipRepairInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error) {
	out := new(StartShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error) {
	out := new(EndShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckShipRepair(ctx context.Context, in *CheckShipRepairRequest, opts ...grpc.CallOption) (*CheckShipRepairResponse, error) {
	out := new(CheckShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetCreateShipInfo(ctx context.Context, in *GetCreateShipInfoRequest, opts ...grpc.CallOption) (*GetCreateShipInfoResponse, error) {
	out := new(GetCreateShipInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetCreateShipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartCreateShip(ctx context.Context, in *StartCreateShipRequest, opts ...grpc.CallOption) (*StartCreateShipResponse, error) {
	out := new(StartCreateShipResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartCreateShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckCreateShip(ctx context.Context, in *CheckCreateShipRequest, opts ...grpc.CallOption) (*CheckCreateShipResponse, error) {
	out := new(CheckCreateShipResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckCreateShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndCreateShip(ctx context.Context, in *EndCreateShipRequest, opts ...grpc.CallOption) (*EndCreateShipResponse, error) {
	out := new(EndCreateShipResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndCreateShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndCreateShipDiamond(ctx context.Context, in *EndCreateShipRequest, opts ...grpc.CallOption) (*EndCreateShipResponse, error) {
	out := new(EndCreateShipResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndCreateShipDiamond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllAchievement(ctx context.Context, in *GetAllAchievementRequest, opts ...grpc.CallOption) (*GetAllAchievementResponse, error) {
	out := new(GetAllAchievementResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAchievementsByCategoryID(ctx context.Context, in *GetAchievementsByCategoryIDRequest, opts ...grpc.CallOption) (*GetAchievementsByCategoryIDResponse, error) {
	out := new(GetAchievementsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAchievementsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAchievementForPlayerByCategory(ctx context.Context, in *GetAchievementForPlayerByCategoryRequest, opts ...grpc.CallOption) (*GetAchievementForPlayerByCategoryResponse, error) {
	out := new(GetAchievementForPlayerByCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAchievementForPlayerByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckIfPlayerHaveAchievement(ctx context.Context, in *CheckIfPlayerHaveAchievementRequest, opts ...grpc.CallOption) (*CheckIfPlayerHaveAchievementResponse, error) {
	out := new(CheckIfPlayerHaveAchievementResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckIfPlayerHaveAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllAchievementCategory(ctx context.Context, in *GetAllAchievementCategoryRequest, opts ...grpc.CallOption) (*GetAllAchievementCategoryResponse, error) {
	out := new(GetAllAchievementCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllAchievementCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAchievementCategoryByID(ctx context.Context, in *GetAchievementCategoryByIDRequest, opts ...grpc.CallOption) (*GetAchievementCategoryByIDResponse, error) {
	out := new(GetAchievementCategoryByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAchievementCategoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAchievementCategoryBySlug(ctx context.Context, in *GetAchievementCategoryBySlugRequest, opts ...grpc.CallOption) (*GetAchievementCategoryBySlugResponse, error) {
	out := new(GetAchievementCategoryBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAchievementCategoryBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerAchievementToNotify(ctx context.Context, in *GetPlayerAchievementToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerAchievementToNotifyResponse, error) {
	out := new(GetPlayerAchievementToNotifyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerAchievementToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SetPlayerAchievementNotified(ctx context.Context, in *SetPlayerAchievementNotifiedRequest, opts ...grpc.CallOption) (*SetPlayerAchievementNotifiedResponse, error) {
	out := new(SetPlayerAchievementNotifiedResponse)
	err := c.cc.Invoke(ctx, "/NoName/SetPlayerAchievementNotified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ThreeCardGamePlay(ctx context.Context, in *ThreeCardGamePlayRequest, opts ...grpc.CallOption) (*ThreeCardGamePlayResponse, error) {
	out := new(ThreeCardGamePlayResponse)
	err := c.cc.Invoke(ctx, "/NoName/ThreeCardGamePlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ThreeCardGameCheck(ctx context.Context, in *ThreeCardGameCheckRequest, opts ...grpc.CallOption) (*ThreeCardGameCheckResponse, error) {
	out := new(ThreeCardGameCheckResponse)
	err := c.cc.Invoke(ctx, "/NoName/ThreeCardGameCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ThreeCardGameRecoverPlay(ctx context.Context, in *ThreeCardGameRecoverPlayRequest, opts ...grpc.CallOption) (*ThreeCardGameRecoverPlayResponse, error) {
	out := new(ThreeCardGameRecoverPlayResponse)
	err := c.cc.Invoke(ctx, "/NoName/ThreeCardGameRecoverPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ThreeCardGameEndGame(ctx context.Context, in *ThreeCardGameEndGameRequest, opts ...grpc.CallOption) (*ThreeCardGameEndGameResponse, error) {
	out := new(ThreeCardGameEndGameResponse)
	err := c.cc.Invoke(ctx, "/NoName/ThreeCardGameEndGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopPlayerEnemyKillAll(ctx context.Context, in *StatisticsTopPlayerEnemyKillAllRequest, opts ...grpc.CallOption) (*StatisticsTopPlayerEnemyKillAllResponse, error) {
	out := new(StatisticsTopPlayerEnemyKillAllResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopPlayerEnemyKillAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopPlayerEnemyKillYou(ctx context.Context, in *StatisticsTopPlayerEnemyKillYouRequest, opts ...grpc.CallOption) (*StatisticsTopPlayerEnemyKillYouResponse, error) {
	out := new(StatisticsTopPlayerEnemyKillYouResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopPlayerEnemyKillYou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopPlanetExploredAll(ctx context.Context, in *StatisticsTopPlanetExploredAllRequest, opts ...grpc.CallOption) (*StatisticsTopPlanetExploredAllResponse, error) {
	out := new(StatisticsTopPlanetExploredAllResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopPlanetExploredAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopPlanetExploredYou(ctx context.Context, in *StatisticsTopPlanetExploredYouRequest, opts ...grpc.CallOption) (*StatisticsTopPlanetExploredYouResponse, error) {
	out := new(StatisticsTopPlanetExploredYouResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopPlanetExploredYou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopTravelAll(ctx context.Context, in *StatisticsTopTravelAllRequest, opts ...grpc.CallOption) (*StatisticsTopTravelAllResponse, error) {
	out := new(StatisticsTopTravelAllResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopTravelAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopTravelYou(ctx context.Context, in *StatisticsTopTravelYouRequest, opts ...grpc.CallOption) (*StatisticsTopTravelYouResponse, error) {
	out := new(StatisticsTopTravelYouResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopTravelYou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopMissionAll(ctx context.Context, in *StatisticsTopMissionAllRequest, opts ...grpc.CallOption) (*StatisticsTopMissionAllResponse, error) {
	out := new(StatisticsTopMissionAllResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopMissionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StatisticsTopMissionYou(ctx context.Context, in *StatisticsTopMissionYouRequest, opts ...grpc.CallOption) (*StatisticsTopMissionYouResponse, error) {
	out := new(StatisticsTopMissionYouResponse)
	err := c.cc.Invoke(ctx, "/NoName/StatisticsTopMissionYou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetDarkMerchant(ctx context.Context, in *GetDarkMerchantRequest, opts ...grpc.CallOption) (*GetDarkMerchantResponse, error) {
	out := new(GetDarkMerchantResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetDarkMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DarkMerchantBuyResource(ctx context.Context, in *DarkMerchantBuyResourceRequest, opts ...grpc.CallOption) (*DarkMerchantBuyResourceResponse, error) {
	out := new(DarkMerchantBuyResourceResponse)
	err := c.cc.Invoke(ctx, "/NoName/DarkMerchantBuyResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetLevelByID(ctx context.Context, in *GetLevelByIDRequest, opts ...grpc.CallOption) (*GetLevelByIDResponse, error) {
	out := new(GetLevelByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetLevelByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreateTelegramStatus(ctx context.Context, in *CreateTelegramStatusRequest, opts ...grpc.CallOption) (*CreateTelegramStatusResponse, error) {
	out := new(CreateTelegramStatusResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreateTelegramStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTelegramStatus(ctx context.Context, in *GetTelegramStatusRequest, opts ...grpc.CallOption) (*GetTelegramStatusResponse, error) {
	out := new(GetTelegramStatusResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTelegramStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeleteTelegramStatus(ctx context.Context, in *DeleteTelegramStatusRequest, opts ...grpc.CallOption) (*DeleteTelegramStatusResponse, error) {
	out := new(DeleteTelegramStatusResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeleteTelegramStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoNameServer is the server API for NoName service.
type NoNameServer interface {
	// Tutorial
	PlayerStartTutorial(context.Context, *PlayerStartTutorialRequest) (*PlayerStartTutorialResponse, error)
	PlayerEndTutorial(context.Context, *PlayerEndTutorialRequest) (*PlayerEndTutorialResponse, error)
	StartTravelTutorial(context.Context, *StartTravelTutorialRequest) (*StartTravelTutorialResponse, error)
	// Rarity
	GetAllRarities(context.Context, *GetAllRaritiesRequest) (*GetAllRaritiesResponse, error)
	GetAllCraftableRarities(context.Context, *GetAllCraftableRaritiesRequest) (*GetAllCraftableRaritiesResponse, error)
	GetRarityByID(context.Context, *GetRarityByIDRequest) (*GetRarityByIDResponse, error)
	// Armor
	GetArmorByID(context.Context, *GetArmorByIDRequest) (*GetArmorByIDResponse, error)
	GetArmorByName(context.Context, *GetArmorByNameRequest) (*GetArmorByNameResponse, error)
	GetPlayerArmors(context.Context, *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error)
	GetPlayerArmorsByCategoryID(context.Context, *GetPlayerArmorsByCategoryIDRequest) (*GetPlayerArmorsByCategoryIDResponse, error)
	GetPlayerArmorsEquipped(context.Context, *GetPlayerArmorsEquippedRequest) (*GetPlayerArmorsEquippedResponse, error)
	GetPlayerArmorEquippedByCategoryID(context.Context, *GetPlayerArmorEquippedByCategoryIDRequest) (*GetPlayerArmorEquippedByCategoryIDResponse, error)
	EquipArmor(context.Context, *EquipArmorRequest) (*EquipArmorResponse, error)
	// ArmorCategory
	GetAllArmorCategory(context.Context, *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error)
	GetArmorCategoryBySlug(context.Context, *GetArmorCategoryBySlugRequest) (*GetArmorCategoryBySlugResponse, error)
	// Weapon
	GetWeaponByID(context.Context, *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error)
	GetWeaponByName(context.Context, *GetWeaponByNameRequest) (*GetWeaponByNameResponse, error)
	GetPlayerWeapons(context.Context, *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(context.Context, *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error)
	EquipWeapon(context.Context, *EquipWeaponRequest) (*EquipWeaponResponse, error)
	// Player
	GetPlayerByID(context.Context, *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(context.Context, *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error)
	GetPlayerExperience(context.Context, *GetPlayerExperienceRequest) (*GetPlayerExperienceResponse, error)
	GetPlayerLifePoint(context.Context, *GetPlayerLifePointRequest) (*GetPlayerLifePointResponse, error)
	GetPlayerDailyReward(context.Context, *GetPlayerDailyRewardRequest) (*GetPlayerDailyRewardResponse, error)
	// Player - Configuration
	PlayerSetLanguage(context.Context, *PlayerSetLanguageRequest) (*PlayerSetLanguageResponse, error)
	PlayerSetTimezone(context.Context, *PlayerSetTimezoneRequest) (*PlayerSetTimezoneResponse, error)
	// Player - Inventory
	GetPlayerResources(context.Context, *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(context.Context, *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error)
	GetPlayerAmulets(context.Context, *GetPlayerAmuletsRequest) (*GetPlayerAmuletsResponse, error)
	GetPlayerItemByID(context.Context, *GetPlayerItemByIDRequest) (*GetPlayerItemByIDResponse, error)
	GetPlayerResourceByID(context.Context, *GetPlayerResourceByIDRequest) (*GetPlayerResourceByIDResponse, error)
	// Player - Position
	CreatePlayerPosition(context.Context, *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(context.Context, *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(context.Context, *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(context.Context, *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(context.Context, *CountPlayerVisitedCurrentPlanetRequest) (*CountPlayerVisitedCurrentPlanetResponse, error)
	// Player - Signin
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// Player - Activity
	GetPlayerStateByID(context.Context, *GetPlayerActivityByIDRequest) (*GetPlayerActivityByIDResponse, error)
	GetActivePlayerActivities(context.Context, *GetActivePlayerActivitiesRequest) (*GetActivePlayerActivitiesResponse, error)
	CreatePlayerActivity(context.Context, *CreatePlayerActivityRequest) (*CreatePlayerActivityResponse, error)
	UpdatePlayerActivity(context.Context, *UpdatePlayerActivityRequest) (*UpdatePlayerActivityResponse, error)
	DeletePlayerActivity(context.Context, *DeletePlayerActivityRequest) (*DeletePlayerActivityResponse, error)
	DeletePlayerActivityByController(context.Context, *DeletePlayerActivityByControllerRequest) (*DeletePlayerActivityByControllerResponse, error)
	// Player - Activity - Notify
	GetPlayerActivityToNotify(context.Context, *GetPlayerActivityToNotifyRequest) (*GetPlayerActivityToNotifyResponse, error)
	SetPlayerActivityNotified(context.Context, *SetPlayerActivityNotifiedRequest) (*SetPlayerActivityNotifiedResponse, error)
	// Player - TitanDrop - Notify
	GetTitanDropToNotify(context.Context, *GetTitanDropToNotifyRequest) (*GetTitanDropToNotifyResponse, error)
	SetTitanDropNotified(context.Context, *SetTitanDropNotifiedRequest) (*SetTitanDropNotifiedResponse, error)
	// Enemy
	GetEnemyByID(context.Context, *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error)
	HitEnemy(context.Context, *HitEnemyRequest) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(context.Context, *GetTitanByIDRequest) (*GetTitanByIDResponse, error)
	GetTitanByName(context.Context, *GetTitanByNameRequest) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(context.Context, *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error)
	GetTitanByPlanetSystemID(context.Context, *GetTitanByPlanetSystemIDRequest) (*GetTitanByPlanetSystemIDResponse, error)
	HitTitan(context.Context, *HitTitanRequest) (*HitTitanResponse, error)
	TitanDiscovered(context.Context, *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error)
	// Titan Event
	GetTitanEventQuestions(context.Context, *GetTitanEventQuestionsRequest) (*GetTitanEventQuestionsResponse, error)
	GetTitanEventQuestionByID(context.Context, *GetTitanEventQuestionByIDRequest) (*GetTitanEventQuestionByIDResponse, error)
	GetTitanEventAnswerByID(context.Context, *GetTitanEventAnswerByIDRequest) (*GetTitanEventAnswerByIDResponse, error)
	TitanEventSubmitAnswer(context.Context, *TitanEventSubmitAnswerRequest) (*TitanEventSubmitAnswerResponse, error)
	// Language
	GetLanguageBySlug(context.Context, *GetLanguageBySlugRequest) (*GetLanguageBySlugResponse, error)
	GetLanguageByName(context.Context, *GetLanguageByNameRequest) (*GetLanguageByNameResponse, error)
	GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error)
	// Timezone
	GetTimezoneByDescription(context.Context, *GetTimezoneByDescriptionRequest) (*GetTimezoneByDescriptionResponse, error)
	GetTimezoneByName(context.Context, *GetTimezoneByNameRequest) (*GetTimezoneByNameResponse, error)
	GetAllTimezones(context.Context, *GetAllTimezonesRequest) (*GetAllTimezonesResponse, error)
	// NPC
	GetAllNPC(context.Context, *GetAllNPCRequest) (*GetAllNPCResponse, error)
	// NPC - Banck
	BankDeposit(context.Context, *BankDepositRequest) (*BankDepositResponse, error)
	BankWithdraw(context.Context, *BankWithdrawRequest) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(context.Context, *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error)
	GetPlanetByName(context.Context, *GetPlanetByNameRequest) (*GetPlanetByNameResponse, error)
	GetPlanetByCoordinate(context.Context, *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(context.Context, *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error)
	GetExpansionInfo(context.Context, *GetExpansionInfoRequest) (*GetExpansionInfoResponse, error)
	GetSafePlanets(context.Context, *GetSafePlanetsRequest) (*GetSafePlanetsResponse, error)
	// Planet Bookmark
	AddPlanetBookmark(context.Context, *AddPlanetBookmarkRequest) (*AddPlanetBookmarkResponse, error)
	RemovePlanetBookmark(context.Context, *RemovePlanetBookmarkRequest) (*RemovePlanetBookmarkResponse, error)
	CheckIfPlayerHavePlanetBookmark(context.Context, *CheckIfPlayerHavePlanetBookmarkRequest) (*CheckIfPlayerHavePlanetBookmarkResponse, error)
	// PlanetMap
	GetPlanetMapByID(context.Context, *GetPlanetMapByIDRequest) (*GetPlanetMapByIDResponse, error)
	// Resource
	GetResourceByID(context.Context, *GetResourceByIDRequest) (*GetResourceByIDResponse, error)
	GetResourceByName(context.Context, *GetResourceByNameRequest) (*GetResourceByNameResponse, error)
	// Item
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	GetShoppableItems(context.Context, *GetShoppableItemsRequest) (*GetShoppableItemsResponse, error)
	GetItemsByCategoryID(context.Context, *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error)
	GetCraftableItemsByCategoryID(context.Context, *GetCraftableItemsByCategoryIDRequest) (*GetCraftableItemsByCategoryIDResponse, error)
	UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error)
	BuyItem(context.Context, *BuyItemRequest) (*BuyItemResponse, error)
	GetItemByID(context.Context, *GetItemByIDRequest) (*GetItemByIDResponse, error)
	// ItemCateogory
	GetAllItemCategories(context.Context, *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipByID(context.Context, *GetShipByIDRequest) (*GetShipByIDResponse, error)
	GetPlayerShips(context.Context, *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(context.Context, *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error)
	EquipShip(context.Context, *EquipShipRequest) (*EquipShipResponse, error)
	// Ship - Categoru
	GetAllShipCategories(context.Context, *GetAllShipCategoriesRequest) (*GetAllShipCategoriesResponse, error)
	GetShipCategoryByID(context.Context, *GetShipCategoryByIDRequest) (*GetShipCategoryByIDResponse, error)
	// Ship - Laboratory
	LaboratoryStartCrafting(context.Context, *LaboratoryStartCraftingRequest) (*LaboratoryStartCraftingResponse, error)
	LaboratoryCheckHaveResourceForCrafting(context.Context, *LaboratoryCheckHaveResourceForCraftingRequest) (*LaboratoryCheckHaveResourceForCraftingResponse, error)
	LaboratoryCheckCrafting(context.Context, *LaboratoryCheckCraftingRequest) (*LaboratoryCheckCraftingResponse, error)
	LaboratoryEndCrafting(context.Context, *LaboratoryEndCraftingRequest) (*LaboratoryEndCraftingResponse, error)
	// Ship - Rests
	GetRestsInfo(context.Context, *GetRestsInfoRequest) (*GetRestsInfoResponse, error)
	StartPlayerRest(context.Context, *StartPlayerRestRequest) (*StartPlayerRestResponse, error)
	RestCheck(context.Context, *RestCheckRequest) (*RestCheckResponse, error)
	EndPlayerRest(context.Context, *EndPlayerRestRequest) (*EndPlayerRestResponse, error)
	// Ship - Travel
	ShipTravelRadarInfo(context.Context, *ShipTravelInfoRequest) (*ShipTravelInfoResponse, error)
	ShipTravelFavoriteInfo(context.Context, *ShipTravelInfoRequest) (*ShipTravelInfoResponse, error)
	ShipTravelManualInfo(context.Context, *ShipTravelManualInfoRequest) (*ShipTravelManualInfoResponse, error)
	StartShipTravel(context.Context, *StartShipTravelRequest) (*StartShipTravelResponse, error)
	CheckShipTravel(context.Context, *CheckShipTravelRequest) (*CheckShipTravelResponse, error)
	EndShipTravel(context.Context, *EndShipTravelRequest) (*EndShipTravelResponse, error)
	EndShipTravelDiamond(context.Context, *EndShipTravelRequest) (*EndShipTravelResponse, error)
	TravelRescue(context.Context, *TravelRescueRequest) (*TravelRescueResponse, error)
	// Transaction
	GetPlayerEconomy(context.Context, *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error)
	// Tresure
	DropTresure(context.Context, *DropTresureRequest) (*DropTresureResponse, error)
	// Mission
	GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error)
	CheckMission(context.Context, *CheckMissionRequest) (*CheckMissionResponse, error)
	GetMissionReward(context.Context, *GetMissionRewardRequest) (*GetMissionRewardResponse, error)
	// Expansion
	GetTeletrasportSafePlanetList(context.Context, *GetTeletrasportSafePlanetListRequest) (*GetTeletrasportSafePlanetListResponse, error)
	EndTeletrasportSafePlanet(context.Context, *EndTeletrasportSafePlanetRequest) (*EndTeletrasportSafePlanetResponse, error)
	// Research
	GetRecapActiveResearch(context.Context, *GetRecapActiveResearchRequest) (*GetRecapActiveResearchResponse, error)
	ResearchDonation(context.Context, *ResearchDonationRequest) (*ResearchDonationResponse, error)
	// Exploration
	ExplorationStart(context.Context, *ExplorationStartRequest) (*ExplorationStartResponse, error)
	ExplorationContinue(context.Context, *ExplorationContinueRequest) (*ExplorationContinueResponse, error)
	ExplorationEnd(context.Context, *ExplorationEndRequest) (*ExplorationEndResponse, error)
	ExplorationCheck(context.Context, *ExplorationCheckRequest) (*ExplorationCheckResponse, error)
	ExplorationDropResources(context.Context, *ExplorationDropResourcesRequest) (*ExplorationDropResourcesResponse, error)
	// Exploration Category
	GetAllExplorationCategories(context.Context, *GetAllExplorationCategoriesRequest) (*GetAllExplorationCategoriesResponse, error)
	// Conquerors
	GetConquerorsByPlanetID(context.Context, *GetConquerorsByPlanetIDRequest) (*GetConquerorsByPlanetIDResponse, error)
	GetCurrentConquerorByPlanetID(context.Context, *GetCurrentConquerorByPlanetIDRequest) (*GetCurrentConquerorByPlanetIDResponse, error)
	// Safeplanet - Crafter
	CrafterStart(context.Context, *CrafterStartRequest) (*CrafterStartResponse, error)
	CrafterEnd(context.Context, *CrafterEndRequest) (*CrafterEndResponse, error)
	CrafterCheck(context.Context, *CrafterCheckRequest) (*CrafterCheckResponse, error)
	// Safeplanet - Crafter - Repair
	CrafterGetRepairWeaponInfo(context.Context, *CrafterGetRepairWeaponInfoRequest) (*CrafterGetRepairWeaponInfoResponse, error)
	CrafterRepairWeapon(context.Context, *CrafterRepairWeaponRequest) (*CrafterRepairWeaponResponse, error)
	// Safeplanet - Crafter - Decompose
	CrafterDecompose(context.Context, *CrafterDecomposeRequest) (*CrafterDecomposeResponse, error)
	// Ability
	GetAbilityForPlayerByCategory(context.Context, *GetAbilityForPlayerByCategoryRequest) (*GetAbilityForPlayerByCategoryResponse, error)
	LearnAbility(context.Context, *LearnAbilityRequest) (*LearnAbilityResponse, error)
	CheckIfPlayerHaveAbility(context.Context, *CheckIfPlayerHaveAbilityRequest) (*CheckIfPlayerHaveAbilityResponse, error)
	// AbilityCategory
	GetAllAbilityCategory(context.Context, *GetAllAbilityCategoryRequest) (*GetAllAbilityCategoryResponse, error)
	GetAbilityCategoryBySlug(context.Context, *GetAbilityCategoryBySlugRequest) (*GetAbilityCategoryBySlugResponse, error)
	// Party
	GetPartyDetails(context.Context, *GetPartyDetailsRequest) (*GetPartyDetailsResponse, error)
	CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error)
	AddPlayerToParty(context.Context, *AddPlayerToPartyRequest) (*AddPlayerToPartyResponse, error)
	RemovePlayerToParty(context.Context, *RemovePlayerToPartyRequest) (*RemovePlayerToPartyResponse, error)
	RemovePlayerFromParty(context.Context, *RemovePlayerFromPartyRequest) (*RemovePlayerFromPartyResponse, error)
	// Guild
	CheckGuildName(context.Context, *CheckGuildNameRequest) (*CheckGuildNameResponse, error)
	CreateGuild(context.Context, *CreateGuildRequest) (*CreateGuildResponse, error)
	JoinGuild(context.Context, *JoinGuildRequest) (*JoinGuildResponse, error)
	GetJoinGuildsList(context.Context, *GetJoinGuildsListRequest) (*GetJoinGuildsListResponse, error)
	GetPlayerGuild(context.Context, *GetPlayerGuildRequest) (*GetPlayerGuildResponse, error)
	LeaveGuild(context.Context, *LeaveGuildRequest) (*LeaveGuildResponse, error)
	GetPlayersGuild(context.Context, *GetPlayersGuildRequest) (*GetPlayersGuildResponse, error)
	AddPlayerToGuild(context.Context, *AddPlayerToGuildRequest) (*AddPlayerToGuildResponse, error)
	RemovePlayerToGuild(context.Context, *RemovePlayerToGuildRequest) (*RemovePlayerToGuildResponse, error)
	// Guild - Points
	GetGuildPoints(context.Context, *GetGuildPointsRequest) (*GetGuildPointsResponse, error)
	GetPlayerGuildPoints(context.Context, *GetPlayerGuildPointsRequest) (*GetPlayerGuildPointsResponse, error)
	// Hangar - Repair
	GetShipRepairInfo(context.Context, *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error)
	StartShipRepair(context.Context, *StartShipRepairRequest) (*StartShipRepairResponse, error)
	EndShipRepair(context.Context, *EndShipRepairRequest) (*EndShipRepairResponse, error)
	CheckShipRepair(context.Context, *CheckShipRepairRequest) (*CheckShipRepairResponse, error)
	// Hangar - Create
	GetCreateShipInfo(context.Context, *GetCreateShipInfoRequest) (*GetCreateShipInfoResponse, error)
	StartCreateShip(context.Context, *StartCreateShipRequest) (*StartCreateShipResponse, error)
	CheckCreateShip(context.Context, *CheckCreateShipRequest) (*CheckCreateShipResponse, error)
	EndCreateShip(context.Context, *EndCreateShipRequest) (*EndCreateShipResponse, error)
	EndCreateShipDiamond(context.Context, *EndCreateShipRequest) (*EndCreateShipResponse, error)
	// Achievement
	GetAllAchievement(context.Context, *GetAllAchievementRequest) (*GetAllAchievementResponse, error)
	GetAchievementsByCategoryID(context.Context, *GetAchievementsByCategoryIDRequest) (*GetAchievementsByCategoryIDResponse, error)
	GetAchievementForPlayerByCategory(context.Context, *GetAchievementForPlayerByCategoryRequest) (*GetAchievementForPlayerByCategoryResponse, error)
	CheckIfPlayerHaveAchievement(context.Context, *CheckIfPlayerHaveAchievementRequest) (*CheckIfPlayerHaveAchievementResponse, error)
	// Achievement - Category
	GetAllAchievementCategory(context.Context, *GetAllAchievementCategoryRequest) (*GetAllAchievementCategoryResponse, error)
	GetAchievementCategoryByID(context.Context, *GetAchievementCategoryByIDRequest) (*GetAchievementCategoryByIDResponse, error)
	GetAchievementCategoryBySlug(context.Context, *GetAchievementCategoryBySlugRequest) (*GetAchievementCategoryBySlugResponse, error)
	// Achievement - Player
	GetPlayerAchievementToNotify(context.Context, *GetPlayerAchievementToNotifyRequest) (*GetPlayerAchievementToNotifyResponse, error)
	SetPlayerAchievementNotified(context.Context, *SetPlayerAchievementNotifiedRequest) (*SetPlayerAchievementNotifiedResponse, error)
	// Relax - Three Card Game
	ThreeCardGamePlay(context.Context, *ThreeCardGamePlayRequest) (*ThreeCardGamePlayResponse, error)
	ThreeCardGameCheck(context.Context, *ThreeCardGameCheckRequest) (*ThreeCardGameCheckResponse, error)
	ThreeCardGameRecoverPlay(context.Context, *ThreeCardGameRecoverPlayRequest) (*ThreeCardGameRecoverPlayResponse, error)
	ThreeCardGameEndGame(context.Context, *ThreeCardGameEndGameRequest) (*ThreeCardGameEndGameResponse, error)
	// Sefeplanet - Statistics
	StatisticsTopPlayerEnemyKillAll(context.Context, *StatisticsTopPlayerEnemyKillAllRequest) (*StatisticsTopPlayerEnemyKillAllResponse, error)
	StatisticsTopPlayerEnemyKillYou(context.Context, *StatisticsTopPlayerEnemyKillYouRequest) (*StatisticsTopPlayerEnemyKillYouResponse, error)
	StatisticsTopPlanetExploredAll(context.Context, *StatisticsTopPlanetExploredAllRequest) (*StatisticsTopPlanetExploredAllResponse, error)
	StatisticsTopPlanetExploredYou(context.Context, *StatisticsTopPlanetExploredYouRequest) (*StatisticsTopPlanetExploredYouResponse, error)
	StatisticsTopTravelAll(context.Context, *StatisticsTopTravelAllRequest) (*StatisticsTopTravelAllResponse, error)
	StatisticsTopTravelYou(context.Context, *StatisticsTopTravelYouRequest) (*StatisticsTopTravelYouResponse, error)
	StatisticsTopMissionAll(context.Context, *StatisticsTopMissionAllRequest) (*StatisticsTopMissionAllResponse, error)
	StatisticsTopMissionYou(context.Context, *StatisticsTopMissionYouRequest) (*StatisticsTopMissionYouResponse, error)
	// Dark Merchant
	GetDarkMerchant(context.Context, *GetDarkMerchantRequest) (*GetDarkMerchantResponse, error)
	DarkMerchantBuyResource(context.Context, *DarkMerchantBuyResourceRequest) (*DarkMerchantBuyResourceResponse, error)
	// Level
	GetLevelByID(context.Context, *GetLevelByIDRequest) (*GetLevelByIDResponse, error)
	// Telegram Status
	CreateTelegramStatus(context.Context, *CreateTelegramStatusRequest) (*CreateTelegramStatusResponse, error)
	GetTelegramStatus(context.Context, *GetTelegramStatusRequest) (*GetTelegramStatusResponse, error)
	DeleteTelegramStatus(context.Context, *DeleteTelegramStatusRequest) (*DeleteTelegramStatusResponse, error)
}

// UnimplementedNoNameServer can be embedded to have forward compatible implementations.
type UnimplementedNoNameServer struct {
}

func (*UnimplementedNoNameServer) PlayerStartTutorial(ctx context.Context, req *PlayerStartTutorialRequest) (*PlayerStartTutorialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerStartTutorial not implemented")
}
func (*UnimplementedNoNameServer) PlayerEndTutorial(ctx context.Context, req *PlayerEndTutorialRequest) (*PlayerEndTutorialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerEndTutorial not implemented")
}
func (*UnimplementedNoNameServer) StartTravelTutorial(ctx context.Context, req *StartTravelTutorialRequest) (*StartTravelTutorialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTravelTutorial not implemented")
}
func (*UnimplementedNoNameServer) GetAllRarities(ctx context.Context, req *GetAllRaritiesRequest) (*GetAllRaritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRarities not implemented")
}
func (*UnimplementedNoNameServer) GetAllCraftableRarities(ctx context.Context, req *GetAllCraftableRaritiesRequest) (*GetAllCraftableRaritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCraftableRarities not implemented")
}
func (*UnimplementedNoNameServer) GetRarityByID(ctx context.Context, req *GetRarityByIDRequest) (*GetRarityByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRarityByID not implemented")
}
func (*UnimplementedNoNameServer) GetArmorByID(ctx context.Context, req *GetArmorByIDRequest) (*GetArmorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByID not implemented")
}
func (*UnimplementedNoNameServer) GetArmorByName(ctx context.Context, req *GetArmorByNameRequest) (*GetArmorByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByName not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmors(ctx context.Context, req *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmors not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorsByCategoryID(ctx context.Context, req *GetPlayerArmorsByCategoryIDRequest) (*GetPlayerArmorsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorsEquipped(ctx context.Context, req *GetPlayerArmorsEquippedRequest) (*GetPlayerArmorsEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorsEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorEquippedByCategoryID(ctx context.Context, req *GetPlayerArmorEquippedByCategoryIDRequest) (*GetPlayerArmorEquippedByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorEquippedByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) EquipArmor(ctx context.Context, req *EquipArmorRequest) (*EquipArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipArmor not implemented")
}
func (*UnimplementedNoNameServer) GetAllArmorCategory(ctx context.Context, req *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArmorCategory not implemented")
}
func (*UnimplementedNoNameServer) GetArmorCategoryBySlug(ctx context.Context, req *GetArmorCategoryBySlugRequest) (*GetArmorCategoryBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorCategoryBySlug not implemented")
}
func (*UnimplementedNoNameServer) GetWeaponByID(ctx context.Context, req *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByID not implemented")
}
func (*UnimplementedNoNameServer) GetWeaponByName(ctx context.Context, req *GetWeaponByNameRequest) (*GetWeaponByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByName not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeapons(ctx context.Context, req *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeapons not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeaponEquipped(ctx context.Context, req *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeaponEquipped not implemented")
}
func (*UnimplementedNoNameServer) EquipWeapon(ctx context.Context, req *EquipWeaponRequest) (*EquipWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipWeapon not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByID(ctx context.Context, req *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByUsername(ctx context.Context, req *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByUsername not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerExperience(ctx context.Context, req *GetPlayerExperienceRequest) (*GetPlayerExperienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerExperience not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerLifePoint(ctx context.Context, req *GetPlayerLifePointRequest) (*GetPlayerLifePointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerLifePoint not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerDailyReward(ctx context.Context, req *GetPlayerDailyRewardRequest) (*GetPlayerDailyRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerDailyReward not implemented")
}
func (*UnimplementedNoNameServer) PlayerSetLanguage(ctx context.Context, req *PlayerSetLanguageRequest) (*PlayerSetLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerSetLanguage not implemented")
}
func (*UnimplementedNoNameServer) PlayerSetTimezone(ctx context.Context, req *PlayerSetTimezoneRequest) (*PlayerSetTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerSetTimezone not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerResources(ctx context.Context, req *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerResources not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerItems(ctx context.Context, req *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItems not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerAmulets(ctx context.Context, req *GetPlayerAmuletsRequest) (*GetPlayerAmuletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerAmulets not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerItemByID(ctx context.Context, req *GetPlayerItemByIDRequest) (*GetPlayerItemByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItemByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerResourceByID(ctx context.Context, req *GetPlayerResourceByIDRequest) (*GetPlayerResourceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerResourceByID not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerPosition(ctx context.Context, req *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerPosition not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerCurrentPlanet(ctx context.Context, req *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) CountPlanetVisited(ctx context.Context, req *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlanetVisited not implemented")
}
func (*UnimplementedNoNameServer) CountSystemVisited(ctx context.Context, req *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSystemVisited not implemented")
}
func (*UnimplementedNoNameServer) CountPlayerVisitedCurrentPlanet(ctx context.Context, req *CountPlayerVisitedCurrentPlanetRequest) (*CountPlayerVisitedCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlayerVisitedCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) SignIn(ctx context.Context, req *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateByID(ctx context.Context, req *GetPlayerActivityByIDRequest) (*GetPlayerActivityByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateByID not implemented")
}
func (*UnimplementedNoNameServer) GetActivePlayerActivities(ctx context.Context, req *GetActivePlayerActivitiesRequest) (*GetActivePlayerActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlayerActivities not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerActivity(ctx context.Context, req *CreatePlayerActivityRequest) (*CreatePlayerActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerActivity not implemented")
}
func (*UnimplementedNoNameServer) UpdatePlayerActivity(ctx context.Context, req *UpdatePlayerActivityRequest) (*UpdatePlayerActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerActivity not implemented")
}
func (*UnimplementedNoNameServer) DeletePlayerActivity(ctx context.Context, req *DeletePlayerActivityRequest) (*DeletePlayerActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerActivity not implemented")
}
func (*UnimplementedNoNameServer) DeletePlayerActivityByController(ctx context.Context, req *DeletePlayerActivityByControllerRequest) (*DeletePlayerActivityByControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerActivityByController not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerActivityToNotify(ctx context.Context, req *GetPlayerActivityToNotifyRequest) (*GetPlayerActivityToNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerActivityToNotify not implemented")
}
func (*UnimplementedNoNameServer) SetPlayerActivityNotified(ctx context.Context, req *SetPlayerActivityNotifiedRequest) (*SetPlayerActivityNotifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerActivityNotified not implemented")
}
func (*UnimplementedNoNameServer) GetTitanDropToNotify(ctx context.Context, req *GetTitanDropToNotifyRequest) (*GetTitanDropToNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanDropToNotify not implemented")
}
func (*UnimplementedNoNameServer) SetTitanDropNotified(ctx context.Context, req *SetTitanDropNotifiedRequest) (*SetTitanDropNotifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTitanDropNotified not implemented")
}
func (*UnimplementedNoNameServer) GetEnemyByID(ctx context.Context, req *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemyByID not implemented")
}
func (*UnimplementedNoNameServer) HitEnemy(ctx context.Context, req *HitEnemyRequest) (*HitEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitEnemy not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByID(ctx context.Context, req *GetTitanByIDRequest) (*GetTitanByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByID not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByName(ctx context.Context, req *GetTitanByNameRequest) (*GetTitanByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByName not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByPlanetID(ctx context.Context, req *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByPlanetSystemID(ctx context.Context, req *GetTitanByPlanetSystemIDRequest) (*GetTitanByPlanetSystemIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByPlanetSystemID not implemented")
}
func (*UnimplementedNoNameServer) HitTitan(ctx context.Context, req *HitTitanRequest) (*HitTitanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitTitan not implemented")
}
func (*UnimplementedNoNameServer) TitanDiscovered(ctx context.Context, req *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitanDiscovered not implemented")
}
func (*UnimplementedNoNameServer) GetTitanEventQuestions(ctx context.Context, req *GetTitanEventQuestionsRequest) (*GetTitanEventQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanEventQuestions not implemented")
}
func (*UnimplementedNoNameServer) GetTitanEventQuestionByID(ctx context.Context, req *GetTitanEventQuestionByIDRequest) (*GetTitanEventQuestionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanEventQuestionByID not implemented")
}
func (*UnimplementedNoNameServer) GetTitanEventAnswerByID(ctx context.Context, req *GetTitanEventAnswerByIDRequest) (*GetTitanEventAnswerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanEventAnswerByID not implemented")
}
func (*UnimplementedNoNameServer) TitanEventSubmitAnswer(ctx context.Context, req *TitanEventSubmitAnswerRequest) (*TitanEventSubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitanEventSubmitAnswer not implemented")
}
func (*UnimplementedNoNameServer) GetLanguageBySlug(ctx context.Context, req *GetLanguageBySlugRequest) (*GetLanguageBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageBySlug not implemented")
}
func (*UnimplementedNoNameServer) GetLanguageByName(ctx context.Context, req *GetLanguageByNameRequest) (*GetLanguageByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllLanguages(ctx context.Context, req *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (*UnimplementedNoNameServer) GetTimezoneByDescription(ctx context.Context, req *GetTimezoneByDescriptionRequest) (*GetTimezoneByDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimezoneByDescription not implemented")
}
func (*UnimplementedNoNameServer) GetTimezoneByName(ctx context.Context, req *GetTimezoneByNameRequest) (*GetTimezoneByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimezoneByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllTimezones(ctx context.Context, req *GetAllTimezonesRequest) (*GetAllTimezonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTimezones not implemented")
}
func (*UnimplementedNoNameServer) GetAllNPC(ctx context.Context, req *GetAllNPCRequest) (*GetAllNPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNPC not implemented")
}
func (*UnimplementedNoNameServer) BankDeposit(ctx context.Context, req *BankDepositRequest) (*BankDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankDeposit not implemented")
}
func (*UnimplementedNoNameServer) BankWithdraw(ctx context.Context, req *BankWithdrawRequest) (*BankWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankWithdraw not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByID(ctx context.Context, req *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByName(ctx context.Context, req *GetPlanetByNameRequest) (*GetPlanetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByName not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByCoordinate(ctx context.Context, req *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByCoordinate not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByMapID(ctx context.Context, req *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByMapID not implemented")
}
func (*UnimplementedNoNameServer) GetExpansionInfo(ctx context.Context, req *GetExpansionInfoRequest) (*GetExpansionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpansionInfo not implemented")
}
func (*UnimplementedNoNameServer) GetSafePlanets(ctx context.Context, req *GetSafePlanetsRequest) (*GetSafePlanetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSafePlanets not implemented")
}
func (*UnimplementedNoNameServer) AddPlanetBookmark(ctx context.Context, req *AddPlanetBookmarkRequest) (*AddPlanetBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlanetBookmark not implemented")
}
func (*UnimplementedNoNameServer) RemovePlanetBookmark(ctx context.Context, req *RemovePlanetBookmarkRequest) (*RemovePlanetBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlanetBookmark not implemented")
}
func (*UnimplementedNoNameServer) CheckIfPlayerHavePlanetBookmark(ctx context.Context, req *CheckIfPlayerHavePlanetBookmarkRequest) (*CheckIfPlayerHavePlanetBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfPlayerHavePlanetBookmark not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetMapByID(ctx context.Context, req *GetPlanetMapByIDRequest) (*GetPlanetMapByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetMapByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByID(ctx context.Context, req *GetResourceByIDRequest) (*GetResourceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByName(ctx context.Context, req *GetResourceByNameRequest) (*GetResourceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllItems(ctx context.Context, req *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (*UnimplementedNoNameServer) GetShoppableItems(ctx context.Context, req *GetShoppableItemsRequest) (*GetShoppableItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShoppableItems not implemented")
}
func (*UnimplementedNoNameServer) GetItemsByCategoryID(ctx context.Context, req *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) GetCraftableItemsByCategoryID(ctx context.Context, req *GetCraftableItemsByCategoryIDRequest) (*GetCraftableItemsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCraftableItemsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) UseItem(ctx context.Context, req *UseItemRequest) (*UseItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (*UnimplementedNoNameServer) BuyItem(ctx context.Context, req *BuyItemRequest) (*BuyItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyItem not implemented")
}
func (*UnimplementedNoNameServer) GetItemByID(ctx context.Context, req *GetItemByIDRequest) (*GetItemByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemByID not implemented")
}
func (*UnimplementedNoNameServer) GetAllItemCategories(ctx context.Context, req *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemCategories not implemented")
}
func (*UnimplementedNoNameServer) GetShipByID(ctx context.Context, req *GetShipByIDRequest) (*GetShipByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShips(ctx context.Context, req *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShips not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShipEquipped(ctx context.Context, req *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShipEquipped not implemented")
}
func (*UnimplementedNoNameServer) EquipShip(ctx context.Context, req *EquipShipRequest) (*EquipShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipShip not implemented")
}
func (*UnimplementedNoNameServer) GetAllShipCategories(ctx context.Context, req *GetAllShipCategoriesRequest) (*GetAllShipCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShipCategories not implemented")
}
func (*UnimplementedNoNameServer) GetShipCategoryByID(ctx context.Context, req *GetShipCategoryByIDRequest) (*GetShipCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipCategoryByID not implemented")
}
func (*UnimplementedNoNameServer) LaboratoryStartCrafting(ctx context.Context, req *LaboratoryStartCraftingRequest) (*LaboratoryStartCraftingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaboratoryStartCrafting not implemented")
}
func (*UnimplementedNoNameServer) LaboratoryCheckHaveResourceForCrafting(ctx context.Context, req *LaboratoryCheckHaveResourceForCraftingRequest) (*LaboratoryCheckHaveResourceForCraftingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaboratoryCheckHaveResourceForCrafting not implemented")
}
func (*UnimplementedNoNameServer) LaboratoryCheckCrafting(ctx context.Context, req *LaboratoryCheckCraftingRequest) (*LaboratoryCheckCraftingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaboratoryCheckCrafting not implemented")
}
func (*UnimplementedNoNameServer) LaboratoryEndCrafting(ctx context.Context, req *LaboratoryEndCraftingRequest) (*LaboratoryEndCraftingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaboratoryEndCrafting not implemented")
}
func (*UnimplementedNoNameServer) GetRestsInfo(ctx context.Context, req *GetRestsInfoRequest) (*GetRestsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestsInfo not implemented")
}
func (*UnimplementedNoNameServer) StartPlayerRest(ctx context.Context, req *StartPlayerRestRequest) (*StartPlayerRestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPlayerRest not implemented")
}
func (*UnimplementedNoNameServer) RestCheck(ctx context.Context, req *RestCheckRequest) (*RestCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestCheck not implemented")
}
func (*UnimplementedNoNameServer) EndPlayerRest(ctx context.Context, req *EndPlayerRestRequest) (*EndPlayerRestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPlayerRest not implemented")
}
func (*UnimplementedNoNameServer) ShipTravelRadarInfo(ctx context.Context, req *ShipTravelInfoRequest) (*ShipTravelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipTravelRadarInfo not implemented")
}
func (*UnimplementedNoNameServer) ShipTravelFavoriteInfo(ctx context.Context, req *ShipTravelInfoRequest) (*ShipTravelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipTravelFavoriteInfo not implemented")
}
func (*UnimplementedNoNameServer) ShipTravelManualInfo(ctx context.Context, req *ShipTravelManualInfoRequest) (*ShipTravelManualInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipTravelManualInfo not implemented")
}
func (*UnimplementedNoNameServer) StartShipTravel(ctx context.Context, req *StartShipTravelRequest) (*StartShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartShipTravel not implemented")
}
func (*UnimplementedNoNameServer) CheckShipTravel(ctx context.Context, req *CheckShipTravelRequest) (*CheckShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckShipTravel not implemented")
}
func (*UnimplementedNoNameServer) EndShipTravel(ctx context.Context, req *EndShipTravelRequest) (*EndShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipTravel not implemented")
}
func (*UnimplementedNoNameServer) EndShipTravelDiamond(ctx context.Context, req *EndShipTravelRequest) (*EndShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipTravelDiamond not implemented")
}
func (*UnimplementedNoNameServer) TravelRescue(ctx context.Context, req *TravelRescueRequest) (*TravelRescueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TravelRescue not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerEconomy(ctx context.Context, req *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEconomy not implemented")
}
func (*UnimplementedNoNameServer) DropTresure(ctx context.Context, req *DropTresureRequest) (*DropTresureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTresure not implemented")
}
func (*UnimplementedNoNameServer) GetMission(ctx context.Context, req *GetMissionRequest) (*GetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (*UnimplementedNoNameServer) CheckMission(ctx context.Context, req *CheckMissionRequest) (*CheckMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMission not implemented")
}
func (*UnimplementedNoNameServer) GetMissionReward(ctx context.Context, req *GetMissionRewardRequest) (*GetMissionRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionReward not implemented")
}
func (*UnimplementedNoNameServer) GetTeletrasportSafePlanetList(ctx context.Context, req *GetTeletrasportSafePlanetListRequest) (*GetTeletrasportSafePlanetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeletrasportSafePlanetList not implemented")
}
func (*UnimplementedNoNameServer) EndTeletrasportSafePlanet(ctx context.Context, req *EndTeletrasportSafePlanetRequest) (*EndTeletrasportSafePlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTeletrasportSafePlanet not implemented")
}
func (*UnimplementedNoNameServer) GetRecapActiveResearch(ctx context.Context, req *GetRecapActiveResearchRequest) (*GetRecapActiveResearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecapActiveResearch not implemented")
}
func (*UnimplementedNoNameServer) ResearchDonation(ctx context.Context, req *ResearchDonationRequest) (*ResearchDonationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResearchDonation not implemented")
}
func (*UnimplementedNoNameServer) ExplorationStart(ctx context.Context, req *ExplorationStartRequest) (*ExplorationStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationStart not implemented")
}
func (*UnimplementedNoNameServer) ExplorationContinue(ctx context.Context, req *ExplorationContinueRequest) (*ExplorationContinueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationContinue not implemented")
}
func (*UnimplementedNoNameServer) ExplorationEnd(ctx context.Context, req *ExplorationEndRequest) (*ExplorationEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationEnd not implemented")
}
func (*UnimplementedNoNameServer) ExplorationCheck(ctx context.Context, req *ExplorationCheckRequest) (*ExplorationCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationCheck not implemented")
}
func (*UnimplementedNoNameServer) ExplorationDropResources(ctx context.Context, req *ExplorationDropResourcesRequest) (*ExplorationDropResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationDropResources not implemented")
}
func (*UnimplementedNoNameServer) GetAllExplorationCategories(ctx context.Context, req *GetAllExplorationCategoriesRequest) (*GetAllExplorationCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExplorationCategories not implemented")
}
func (*UnimplementedNoNameServer) GetConquerorsByPlanetID(ctx context.Context, req *GetConquerorsByPlanetIDRequest) (*GetConquerorsByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConquerorsByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) GetCurrentConquerorByPlanetID(ctx context.Context, req *GetCurrentConquerorByPlanetIDRequest) (*GetCurrentConquerorByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentConquerorByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) CrafterStart(ctx context.Context, req *CrafterStartRequest) (*CrafterStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterStart not implemented")
}
func (*UnimplementedNoNameServer) CrafterEnd(ctx context.Context, req *CrafterEndRequest) (*CrafterEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterEnd not implemented")
}
func (*UnimplementedNoNameServer) CrafterCheck(ctx context.Context, req *CrafterCheckRequest) (*CrafterCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterCheck not implemented")
}
func (*UnimplementedNoNameServer) CrafterGetRepairWeaponInfo(ctx context.Context, req *CrafterGetRepairWeaponInfoRequest) (*CrafterGetRepairWeaponInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterGetRepairWeaponInfo not implemented")
}
func (*UnimplementedNoNameServer) CrafterRepairWeapon(ctx context.Context, req *CrafterRepairWeaponRequest) (*CrafterRepairWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterRepairWeapon not implemented")
}
func (*UnimplementedNoNameServer) CrafterDecompose(ctx context.Context, req *CrafterDecomposeRequest) (*CrafterDecomposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterDecompose not implemented")
}
func (*UnimplementedNoNameServer) GetAbilityForPlayerByCategory(ctx context.Context, req *GetAbilityForPlayerByCategoryRequest) (*GetAbilityForPlayerByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbilityForPlayerByCategory not implemented")
}
func (*UnimplementedNoNameServer) LearnAbility(ctx context.Context, req *LearnAbilityRequest) (*LearnAbilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LearnAbility not implemented")
}
func (*UnimplementedNoNameServer) CheckIfPlayerHaveAbility(ctx context.Context, req *CheckIfPlayerHaveAbilityRequest) (*CheckIfPlayerHaveAbilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfPlayerHaveAbility not implemented")
}
func (*UnimplementedNoNameServer) GetAllAbilityCategory(ctx context.Context, req *GetAllAbilityCategoryRequest) (*GetAllAbilityCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAbilityCategory not implemented")
}
func (*UnimplementedNoNameServer) GetAbilityCategoryBySlug(ctx context.Context, req *GetAbilityCategoryBySlugRequest) (*GetAbilityCategoryBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbilityCategoryBySlug not implemented")
}
func (*UnimplementedNoNameServer) GetPartyDetails(ctx context.Context, req *GetPartyDetailsRequest) (*GetPartyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyDetails not implemented")
}
func (*UnimplementedNoNameServer) CreateParty(ctx context.Context, req *CreatePartyRequest) (*CreatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParty not implemented")
}
func (*UnimplementedNoNameServer) AddPlayerToParty(ctx context.Context, req *AddPlayerToPartyRequest) (*AddPlayerToPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayerToParty not implemented")
}
func (*UnimplementedNoNameServer) RemovePlayerToParty(ctx context.Context, req *RemovePlayerToPartyRequest) (*RemovePlayerToPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlayerToParty not implemented")
}
func (*UnimplementedNoNameServer) RemovePlayerFromParty(ctx context.Context, req *RemovePlayerFromPartyRequest) (*RemovePlayerFromPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlayerFromParty not implemented")
}
func (*UnimplementedNoNameServer) CheckGuildName(ctx context.Context, req *CheckGuildNameRequest) (*CheckGuildNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGuildName not implemented")
}
func (*UnimplementedNoNameServer) CreateGuild(ctx context.Context, req *CreateGuildRequest) (*CreateGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuild not implemented")
}
func (*UnimplementedNoNameServer) JoinGuild(ctx context.Context, req *JoinGuildRequest) (*JoinGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGuild not implemented")
}
func (*UnimplementedNoNameServer) GetJoinGuildsList(ctx context.Context, req *GetJoinGuildsListRequest) (*GetJoinGuildsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinGuildsList not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerGuild(ctx context.Context, req *GetPlayerGuildRequest) (*GetPlayerGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerGuild not implemented")
}
func (*UnimplementedNoNameServer) LeaveGuild(ctx context.Context, req *LeaveGuildRequest) (*LeaveGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGuild not implemented")
}
func (*UnimplementedNoNameServer) GetPlayersGuild(ctx context.Context, req *GetPlayersGuildRequest) (*GetPlayersGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersGuild not implemented")
}
func (*UnimplementedNoNameServer) AddPlayerToGuild(ctx context.Context, req *AddPlayerToGuildRequest) (*AddPlayerToGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayerToGuild not implemented")
}
func (*UnimplementedNoNameServer) RemovePlayerToGuild(ctx context.Context, req *RemovePlayerToGuildRequest) (*RemovePlayerToGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlayerToGuild not implemented")
}
func (*UnimplementedNoNameServer) GetGuildPoints(ctx context.Context, req *GetGuildPointsRequest) (*GetGuildPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildPoints not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerGuildPoints(ctx context.Context, req *GetPlayerGuildPointsRequest) (*GetPlayerGuildPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerGuildPoints not implemented")
}
func (*UnimplementedNoNameServer) GetShipRepairInfo(ctx context.Context, req *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipRepairInfo not implemented")
}
func (*UnimplementedNoNameServer) StartShipRepair(ctx context.Context, req *StartShipRepairRequest) (*StartShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartShipRepair not implemented")
}
func (*UnimplementedNoNameServer) EndShipRepair(ctx context.Context, req *EndShipRepairRequest) (*EndShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipRepair not implemented")
}
func (*UnimplementedNoNameServer) CheckShipRepair(ctx context.Context, req *CheckShipRepairRequest) (*CheckShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckShipRepair not implemented")
}
func (*UnimplementedNoNameServer) GetCreateShipInfo(ctx context.Context, req *GetCreateShipInfoRequest) (*GetCreateShipInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreateShipInfo not implemented")
}
func (*UnimplementedNoNameServer) StartCreateShip(ctx context.Context, req *StartCreateShipRequest) (*StartCreateShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCreateShip not implemented")
}
func (*UnimplementedNoNameServer) CheckCreateShip(ctx context.Context, req *CheckCreateShipRequest) (*CheckCreateShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCreateShip not implemented")
}
func (*UnimplementedNoNameServer) EndCreateShip(ctx context.Context, req *EndCreateShipRequest) (*EndCreateShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndCreateShip not implemented")
}
func (*UnimplementedNoNameServer) EndCreateShipDiamond(ctx context.Context, req *EndCreateShipRequest) (*EndCreateShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndCreateShipDiamond not implemented")
}
func (*UnimplementedNoNameServer) GetAllAchievement(ctx context.Context, req *GetAllAchievementRequest) (*GetAllAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAchievement not implemented")
}
func (*UnimplementedNoNameServer) GetAchievementsByCategoryID(ctx context.Context, req *GetAchievementsByCategoryIDRequest) (*GetAchievementsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) GetAchievementForPlayerByCategory(ctx context.Context, req *GetAchievementForPlayerByCategoryRequest) (*GetAchievementForPlayerByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementForPlayerByCategory not implemented")
}
func (*UnimplementedNoNameServer) CheckIfPlayerHaveAchievement(ctx context.Context, req *CheckIfPlayerHaveAchievementRequest) (*CheckIfPlayerHaveAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfPlayerHaveAchievement not implemented")
}
func (*UnimplementedNoNameServer) GetAllAchievementCategory(ctx context.Context, req *GetAllAchievementCategoryRequest) (*GetAllAchievementCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAchievementCategory not implemented")
}
func (*UnimplementedNoNameServer) GetAchievementCategoryByID(ctx context.Context, req *GetAchievementCategoryByIDRequest) (*GetAchievementCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementCategoryByID not implemented")
}
func (*UnimplementedNoNameServer) GetAchievementCategoryBySlug(ctx context.Context, req *GetAchievementCategoryBySlugRequest) (*GetAchievementCategoryBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementCategoryBySlug not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerAchievementToNotify(ctx context.Context, req *GetPlayerAchievementToNotifyRequest) (*GetPlayerAchievementToNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerAchievementToNotify not implemented")
}
func (*UnimplementedNoNameServer) SetPlayerAchievementNotified(ctx context.Context, req *SetPlayerAchievementNotifiedRequest) (*SetPlayerAchievementNotifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerAchievementNotified not implemented")
}
func (*UnimplementedNoNameServer) ThreeCardGamePlay(ctx context.Context, req *ThreeCardGamePlayRequest) (*ThreeCardGamePlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreeCardGamePlay not implemented")
}
func (*UnimplementedNoNameServer) ThreeCardGameCheck(ctx context.Context, req *ThreeCardGameCheckRequest) (*ThreeCardGameCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreeCardGameCheck not implemented")
}
func (*UnimplementedNoNameServer) ThreeCardGameRecoverPlay(ctx context.Context, req *ThreeCardGameRecoverPlayRequest) (*ThreeCardGameRecoverPlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreeCardGameRecoverPlay not implemented")
}
func (*UnimplementedNoNameServer) ThreeCardGameEndGame(ctx context.Context, req *ThreeCardGameEndGameRequest) (*ThreeCardGameEndGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreeCardGameEndGame not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopPlayerEnemyKillAll(ctx context.Context, req *StatisticsTopPlayerEnemyKillAllRequest) (*StatisticsTopPlayerEnemyKillAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopPlayerEnemyKillAll not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopPlayerEnemyKillYou(ctx context.Context, req *StatisticsTopPlayerEnemyKillYouRequest) (*StatisticsTopPlayerEnemyKillYouResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopPlayerEnemyKillYou not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopPlanetExploredAll(ctx context.Context, req *StatisticsTopPlanetExploredAllRequest) (*StatisticsTopPlanetExploredAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopPlanetExploredAll not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopPlanetExploredYou(ctx context.Context, req *StatisticsTopPlanetExploredYouRequest) (*StatisticsTopPlanetExploredYouResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopPlanetExploredYou not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopTravelAll(ctx context.Context, req *StatisticsTopTravelAllRequest) (*StatisticsTopTravelAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopTravelAll not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopTravelYou(ctx context.Context, req *StatisticsTopTravelYouRequest) (*StatisticsTopTravelYouResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopTravelYou not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopMissionAll(ctx context.Context, req *StatisticsTopMissionAllRequest) (*StatisticsTopMissionAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopMissionAll not implemented")
}
func (*UnimplementedNoNameServer) StatisticsTopMissionYou(ctx context.Context, req *StatisticsTopMissionYouRequest) (*StatisticsTopMissionYouResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTopMissionYou not implemented")
}
func (*UnimplementedNoNameServer) GetDarkMerchant(ctx context.Context, req *GetDarkMerchantRequest) (*GetDarkMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDarkMerchant not implemented")
}
func (*UnimplementedNoNameServer) DarkMerchantBuyResource(ctx context.Context, req *DarkMerchantBuyResourceRequest) (*DarkMerchantBuyResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DarkMerchantBuyResource not implemented")
}
func (*UnimplementedNoNameServer) GetLevelByID(ctx context.Context, req *GetLevelByIDRequest) (*GetLevelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelByID not implemented")
}
func (*UnimplementedNoNameServer) CreateTelegramStatus(ctx context.Context, req *CreateTelegramStatusRequest) (*CreateTelegramStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelegramStatus not implemented")
}
func (*UnimplementedNoNameServer) GetTelegramStatus(ctx context.Context, req *GetTelegramStatusRequest) (*GetTelegramStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramStatus not implemented")
}
func (*UnimplementedNoNameServer) DeleteTelegramStatus(ctx context.Context, req *DeleteTelegramStatusRequest) (*DeleteTelegramStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelegramStatus not implemented")
}

func RegisterNoNameServer(s *grpc.Server, srv NoNameServer) {
	s.RegisterService(&_NoName_serviceDesc, srv)
}

func _NoName_PlayerStartTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStartTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).PlayerStartTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/PlayerStartTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).PlayerStartTutorial(ctx, req.(*PlayerStartTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_PlayerEndTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerEndTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).PlayerEndTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/PlayerEndTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).PlayerEndTutorial(ctx, req.(*PlayerEndTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartTravelTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTravelTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartTravelTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartTravelTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartTravelTutorial(ctx, req.(*StartTravelTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllRarities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRaritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllRarities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllRarities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllRarities(ctx, req.(*GetAllRaritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllCraftableRarities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCraftableRaritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllCraftableRarities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllCraftableRarities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllCraftableRarities(ctx, req.(*GetAllCraftableRaritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRarityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRarityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRarityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRarityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRarityByID(ctx, req.(*GetRarityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetArmorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByID(ctx, req.(*GetArmorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetArmorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByName(ctx, req.(*GetArmorByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmors(ctx, req.(*GetPlayerArmorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorsByCategoryID(ctx, req.(*GetPlayerArmorsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorsEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorsEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, req.(*GetPlayerArmorsEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorEquippedByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorEquippedByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorEquippedByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorEquippedByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorEquippedByCategoryID(ctx, req.(*GetPlayerArmorEquippedByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EquipArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EquipArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EquipArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EquipArmor(ctx, req.(*EquipArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllArmorCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllArmorCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllArmorCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, req.(*GetAllArmorCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetArmorCategoryBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorCategoryBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorCategoryBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorCategoryBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorCategoryBySlug(ctx, req.(*GetArmorCategoryBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetWeaponByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetWeaponByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetWeaponByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetWeaponByID(ctx, req.(*GetWeaponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetWeaponByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetWeaponByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetWeaponByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetWeaponByName(ctx, req.(*GetWeaponByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeapons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeapons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, req.(*GetPlayerWeaponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeaponEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeaponEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, req.(*GetPlayerWeaponEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EquipWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EquipWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EquipWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EquipWeapon(ctx, req.(*EquipWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByID(ctx, req.(*GetPlayerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, req.(*GetPlayerByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerExperience(ctx, req.(*GetPlayerExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerLifePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerLifePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerLifePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerLifePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerLifePoint(ctx, req.(*GetPlayerLifePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerDailyReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerDailyRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerDailyReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerDailyReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerDailyReward(ctx, req.(*GetPlayerDailyRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_PlayerSetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerSetLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).PlayerSetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/PlayerSetLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).PlayerSetLanguage(ctx, req.(*PlayerSetLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_PlayerSetTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerSetTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).PlayerSetTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/PlayerSetTimezone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).PlayerSetTimezone(ctx, req.(*PlayerSetTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerResources(ctx, req.(*GetPlayerResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerItems(ctx, req.(*GetPlayerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerAmulets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerAmuletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerAmulets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerAmulets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerAmulets(ctx, req.(*GetPlayerAmuletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerItemByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerItemByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerItemByID(ctx, req.(*GetPlayerItemByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerResourceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerResourceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerResourceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerResourceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerResourceByID(ctx, req.(*GetPlayerResourceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, req.(*CreatePlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, req.(*GetPlayerCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlanetVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlanetVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlanetVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlanetVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlanetVisited(ctx, req.(*CountPlanetVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountSystemVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSystemVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountSystemVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountSystemVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountSystemVisited(ctx, req.(*CountSystemVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlayerVisitedCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlayerVisitedCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlayerVisitedCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, req.(*CountPlayerVisitedCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerActivityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, req.(*GetPlayerActivityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetActivePlayerActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePlayerActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetActivePlayerActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetActivePlayerActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetActivePlayerActivities(ctx, req.(*GetActivePlayerActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerActivity(ctx, req.(*CreatePlayerActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdatePlayerActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdatePlayerActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdatePlayerActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdatePlayerActivity(ctx, req.(*UpdatePlayerActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeletePlayerActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeletePlayerActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeletePlayerActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeletePlayerActivity(ctx, req.(*DeletePlayerActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeletePlayerActivityByController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerActivityByControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeletePlayerActivityByController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeletePlayerActivityByController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeletePlayerActivityByController(ctx, req.(*DeletePlayerActivityByControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerActivityToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerActivityToNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerActivityToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerActivityToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerActivityToNotify(ctx, req.(*GetPlayerActivityToNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SetPlayerActivityNotified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerActivityNotifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SetPlayerActivityNotified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SetPlayerActivityNotified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SetPlayerActivityNotified(ctx, req.(*SetPlayerActivityNotifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanDropToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanDropToNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanDropToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanDropToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanDropToNotify(ctx, req.(*GetTitanDropToNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SetTitanDropNotified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTitanDropNotifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SetTitanDropNotified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SetTitanDropNotified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SetTitanDropNotified(ctx, req.(*SetTitanDropNotifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetEnemyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnemyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetEnemyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetEnemyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetEnemyByID(ctx, req.(*GetEnemyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitEnemy(ctx, req.(*HitEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByID(ctx, req.(*GetTitanByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByName(ctx, req.(*GetTitanByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, req.(*GetTitanByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByPlanetSystemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByPlanetSystemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByPlanetSystemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByPlanetSystemID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByPlanetSystemID(ctx, req.(*GetTitanByPlanetSystemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitTitan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitTitanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitTitan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitTitan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitTitan(ctx, req.(*HitTitanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_TitanDiscovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitanDiscoveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).TitanDiscovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/TitanDiscovered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).TitanDiscovered(ctx, req.(*TitanDiscoveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanEventQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanEventQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanEventQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanEventQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanEventQuestions(ctx, req.(*GetTitanEventQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanEventQuestionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanEventQuestionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanEventQuestionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanEventQuestionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanEventQuestionByID(ctx, req.(*GetTitanEventQuestionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanEventAnswerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanEventAnswerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanEventAnswerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanEventAnswerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanEventAnswerByID(ctx, req.(*GetTitanEventAnswerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_TitanEventSubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitanEventSubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).TitanEventSubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/TitanEventSubmitAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).TitanEventSubmitAnswer(ctx, req.(*TitanEventSubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetLanguageBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetLanguageBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetLanguageBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetLanguageBySlug(ctx, req.(*GetLanguageBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetLanguageByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetLanguageByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetLanguageByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetLanguageByName(ctx, req.(*GetLanguageByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllLanguages(ctx, req.(*GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTimezoneByDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimezoneByDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTimezoneByDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTimezoneByDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTimezoneByDescription(ctx, req.(*GetTimezoneByDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTimezoneByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimezoneByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTimezoneByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTimezoneByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTimezoneByName(ctx, req.(*GetTimezoneByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllTimezones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllTimezones(ctx, req.(*GetAllTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllNPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllNPC(ctx, req.(*GetAllNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankDeposit(ctx, req.(*BankDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankWithdraw(ctx, req.(*BankWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByID(ctx, req.(*GetPlanetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByName(ctx, req.(*GetPlanetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByCoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, req.(*GetPlanetByCoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByMapID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByMapIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByMapID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, req.(*GetPlanetByMapIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetExpansionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpansionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetExpansionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetExpansionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetExpansionInfo(ctx, req.(*GetExpansionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetSafePlanets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSafePlanetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetSafePlanets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetSafePlanets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetSafePlanets(ctx, req.(*GetSafePlanetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_AddPlanetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlanetBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).AddPlanetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/AddPlanetBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).AddPlanetBookmark(ctx, req.(*AddPlanetBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_RemovePlanetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlanetBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).RemovePlanetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/RemovePlanetBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).RemovePlanetBookmark(ctx, req.(*RemovePlanetBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckIfPlayerHavePlanetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfPlayerHavePlanetBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckIfPlayerHavePlanetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckIfPlayerHavePlanetBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckIfPlayerHavePlanetBookmark(ctx, req.(*CheckIfPlayerHavePlanetBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetMapByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetMapByID(ctx, req.(*GetPlanetMapByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByID(ctx, req.(*GetResourceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByName(ctx, req.(*GetResourceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShoppableItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShoppableItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShoppableItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShoppableItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShoppableItems(ctx, req.(*GetShoppableItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetItemsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetItemsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, req.(*GetItemsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetCraftableItemsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCraftableItemsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetCraftableItemsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetCraftableItemsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetCraftableItemsByCategoryID(ctx, req.(*GetCraftableItemsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UseItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UseItem(ctx, req.(*UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BuyItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BuyItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BuyItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BuyItem(ctx, req.(*BuyItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetItemByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetItemByID(ctx, req.(*GetItemByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItemCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItemCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItemCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItemCategories(ctx, req.(*GetAllItemCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipByID(ctx, req.(*GetShipByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShips(ctx, req.(*GetPlayerShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShipEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShipEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, req.(*GetPlayerShipEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EquipShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EquipShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EquipShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EquipShip(ctx, req.(*EquipShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllShipCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShipCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllShipCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllShipCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllShipCategories(ctx, req.(*GetAllShipCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipCategoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipCategoryByID(ctx, req.(*GetShipCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_LaboratoryStartCrafting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaboratoryStartCraftingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).LaboratoryStartCrafting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/LaboratoryStartCrafting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).LaboratoryStartCrafting(ctx, req.(*LaboratoryStartCraftingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_LaboratoryCheckHaveResourceForCrafting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaboratoryCheckHaveResourceForCraftingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).LaboratoryCheckHaveResourceForCrafting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/LaboratoryCheckHaveResourceForCrafting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).LaboratoryCheckHaveResourceForCrafting(ctx, req.(*LaboratoryCheckHaveResourceForCraftingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_LaboratoryCheckCrafting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaboratoryCheckCraftingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).LaboratoryCheckCrafting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/LaboratoryCheckCrafting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).LaboratoryCheckCrafting(ctx, req.(*LaboratoryCheckCraftingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_LaboratoryEndCrafting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaboratoryEndCraftingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).LaboratoryEndCrafting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/LaboratoryEndCrafting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).LaboratoryEndCrafting(ctx, req.(*LaboratoryEndCraftingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRestsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRestsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRestsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRestsInfo(ctx, req.(*GetRestsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartPlayerRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPlayerRestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartPlayerRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartPlayerRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartPlayerRest(ctx, req.(*StartPlayerRestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_RestCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).RestCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/RestCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).RestCheck(ctx, req.(*RestCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndPlayerRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPlayerRestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndPlayerRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndPlayerRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndPlayerRest(ctx, req.(*EndPlayerRestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ShipTravelRadarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipTravelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ShipTravelRadarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ShipTravelRadarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ShipTravelRadarInfo(ctx, req.(*ShipTravelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ShipTravelFavoriteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipTravelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ShipTravelFavoriteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ShipTravelFavoriteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ShipTravelFavoriteInfo(ctx, req.(*ShipTravelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ShipTravelManualInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipTravelManualInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ShipTravelManualInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ShipTravelManualInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ShipTravelManualInfo(ctx, req.(*ShipTravelManualInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartShipTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartShipTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartShipTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartShipTravel(ctx, req.(*StartShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckShipTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckShipTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckShipTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckShipTravel(ctx, req.(*CheckShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipTravel(ctx, req.(*EndShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipTravelDiamond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipTravelDiamond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipTravelDiamond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipTravelDiamond(ctx, req.(*EndShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_TravelRescue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TravelRescueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).TravelRescue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/TravelRescue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).TravelRescue(ctx, req.(*TravelRescueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerEconomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEconomyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerEconomy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, req.(*GetPlayerEconomyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropTresure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTresureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropTresure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropTresure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropTresure(ctx, req.(*DropTresureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMission(ctx, req.(*GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckMission(ctx, req.(*CheckMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMissionReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMissionReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMissionReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMissionReward(ctx, req.(*GetMissionRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTeletrasportSafePlanetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeletrasportSafePlanetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTeletrasportSafePlanetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTeletrasportSafePlanetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTeletrasportSafePlanetList(ctx, req.(*GetTeletrasportSafePlanetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndTeletrasportSafePlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTeletrasportSafePlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndTeletrasportSafePlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndTeletrasportSafePlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndTeletrasportSafePlanet(ctx, req.(*EndTeletrasportSafePlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRecapActiveResearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecapActiveResearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRecapActiveResearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRecapActiveResearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRecapActiveResearch(ctx, req.(*GetRecapActiveResearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ResearchDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResearchDonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ResearchDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ResearchDonation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ResearchDonation(ctx, req.(*ResearchDonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationStart(ctx, req.(*ExplorationStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationContinueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationContinue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationContinue(ctx, req.(*ExplorationContinueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationEnd(ctx, req.(*ExplorationEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationCheck(ctx, req.(*ExplorationCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationDropResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationDropResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationDropResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationDropResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationDropResources(ctx, req.(*ExplorationDropResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllExplorationCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllExplorationCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllExplorationCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllExplorationCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllExplorationCategories(ctx, req.(*GetAllExplorationCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetConquerorsByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConquerorsByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetConquerorsByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetConquerorsByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetConquerorsByPlanetID(ctx, req.(*GetConquerorsByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetCurrentConquerorByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentConquerorByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetCurrentConquerorByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetCurrentConquerorByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetCurrentConquerorByPlanetID(ctx, req.(*GetCurrentConquerorByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterStart(ctx, req.(*CrafterStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterEnd(ctx, req.(*CrafterEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterCheck(ctx, req.(*CrafterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterGetRepairWeaponInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterGetRepairWeaponInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterGetRepairWeaponInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterGetRepairWeaponInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterGetRepairWeaponInfo(ctx, req.(*CrafterGetRepairWeaponInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterRepairWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterRepairWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterRepairWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterRepairWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterRepairWeapon(ctx, req.(*CrafterRepairWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterDecompose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterDecomposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterDecompose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterDecompose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterDecompose(ctx, req.(*CrafterDecomposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAbilityForPlayerByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbilityForPlayerByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAbilityForPlayerByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAbilityForPlayerByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAbilityForPlayerByCategory(ctx, req.(*GetAbilityForPlayerByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_LearnAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearnAbilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).LearnAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/LearnAbility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).LearnAbility(ctx, req.(*LearnAbilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckIfPlayerHaveAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfPlayerHaveAbilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckIfPlayerHaveAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckIfPlayerHaveAbility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckIfPlayerHaveAbility(ctx, req.(*CheckIfPlayerHaveAbilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllAbilityCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAbilityCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllAbilityCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllAbilityCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllAbilityCategory(ctx, req.(*GetAllAbilityCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAbilityCategoryBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbilityCategoryBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAbilityCategoryBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAbilityCategoryBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAbilityCategoryBySlug(ctx, req.(*GetAbilityCategoryBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPartyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPartyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPartyDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPartyDetails(ctx, req.(*GetPartyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreateParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreateParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_AddPlayerToParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayerToPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).AddPlayerToParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/AddPlayerToParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).AddPlayerToParty(ctx, req.(*AddPlayerToPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_RemovePlayerToParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlayerToPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).RemovePlayerToParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/RemovePlayerToParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).RemovePlayerToParty(ctx, req.(*RemovePlayerToPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_RemovePlayerFromParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlayerFromPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).RemovePlayerFromParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/RemovePlayerFromParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).RemovePlayerFromParty(ctx, req.(*RemovePlayerFromPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckGuildName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGuildNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckGuildName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckGuildName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckGuildName(ctx, req.(*CheckGuildNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreateGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreateGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreateGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreateGuild(ctx, req.(*CreateGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_JoinGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).JoinGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/JoinGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).JoinGuild(ctx, req.(*JoinGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetJoinGuildsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinGuildsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetJoinGuildsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetJoinGuildsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetJoinGuildsList(ctx, req.(*GetJoinGuildsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerGuild(ctx, req.(*GetPlayerGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_LeaveGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).LeaveGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/LeaveGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).LeaveGuild(ctx, req.(*LeaveGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayersGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayersGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayersGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayersGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayersGuild(ctx, req.(*GetPlayersGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_AddPlayerToGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayerToGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).AddPlayerToGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/AddPlayerToGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).AddPlayerToGuild(ctx, req.(*AddPlayerToGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_RemovePlayerToGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlayerToGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).RemovePlayerToGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/RemovePlayerToGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).RemovePlayerToGuild(ctx, req.(*RemovePlayerToGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetGuildPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetGuildPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetGuildPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetGuildPoints(ctx, req.(*GetGuildPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerGuildPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerGuildPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerGuildPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerGuildPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerGuildPoints(ctx, req.(*GetPlayerGuildPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipRepairInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipRepairInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipRepairInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, req.(*GetShipRepairInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartShipRepair(ctx, req.(*StartShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipRepair(ctx, req.(*EndShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckShipRepair(ctx, req.(*CheckShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetCreateShipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreateShipInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetCreateShipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetCreateShipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetCreateShipInfo(ctx, req.(*GetCreateShipInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartCreateShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCreateShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartCreateShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartCreateShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartCreateShip(ctx, req.(*StartCreateShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckCreateShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCreateShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckCreateShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckCreateShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckCreateShip(ctx, req.(*CheckCreateShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndCreateShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndCreateShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndCreateShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndCreateShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndCreateShip(ctx, req.(*EndCreateShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndCreateShipDiamond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndCreateShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndCreateShipDiamond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndCreateShipDiamond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndCreateShipDiamond(ctx, req.(*EndCreateShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllAchievement(ctx, req.(*GetAllAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAchievementsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAchievementsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAchievementsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAchievementsByCategoryID(ctx, req.(*GetAchievementsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAchievementForPlayerByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementForPlayerByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAchievementForPlayerByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAchievementForPlayerByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAchievementForPlayerByCategory(ctx, req.(*GetAchievementForPlayerByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckIfPlayerHaveAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfPlayerHaveAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckIfPlayerHaveAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckIfPlayerHaveAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckIfPlayerHaveAchievement(ctx, req.(*CheckIfPlayerHaveAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllAchievementCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAchievementCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllAchievementCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllAchievementCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllAchievementCategory(ctx, req.(*GetAllAchievementCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAchievementCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAchievementCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAchievementCategoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAchievementCategoryByID(ctx, req.(*GetAchievementCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAchievementCategoryBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementCategoryBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAchievementCategoryBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAchievementCategoryBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAchievementCategoryBySlug(ctx, req.(*GetAchievementCategoryBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerAchievementToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerAchievementToNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerAchievementToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerAchievementToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerAchievementToNotify(ctx, req.(*GetPlayerAchievementToNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SetPlayerAchievementNotified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerAchievementNotifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SetPlayerAchievementNotified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SetPlayerAchievementNotified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SetPlayerAchievementNotified(ctx, req.(*SetPlayerAchievementNotifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ThreeCardGamePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreeCardGamePlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ThreeCardGamePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ThreeCardGamePlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ThreeCardGamePlay(ctx, req.(*ThreeCardGamePlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ThreeCardGameCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreeCardGameCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ThreeCardGameCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ThreeCardGameCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ThreeCardGameCheck(ctx, req.(*ThreeCardGameCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ThreeCardGameRecoverPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreeCardGameRecoverPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ThreeCardGameRecoverPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ThreeCardGameRecoverPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ThreeCardGameRecoverPlay(ctx, req.(*ThreeCardGameRecoverPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ThreeCardGameEndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreeCardGameEndGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ThreeCardGameEndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ThreeCardGameEndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ThreeCardGameEndGame(ctx, req.(*ThreeCardGameEndGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopPlayerEnemyKillAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopPlayerEnemyKillAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopPlayerEnemyKillAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopPlayerEnemyKillAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopPlayerEnemyKillAll(ctx, req.(*StatisticsTopPlayerEnemyKillAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopPlayerEnemyKillYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopPlayerEnemyKillYouRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopPlayerEnemyKillYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopPlayerEnemyKillYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopPlayerEnemyKillYou(ctx, req.(*StatisticsTopPlayerEnemyKillYouRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopPlanetExploredAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopPlanetExploredAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopPlanetExploredAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopPlanetExploredAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopPlanetExploredAll(ctx, req.(*StatisticsTopPlanetExploredAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopPlanetExploredYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopPlanetExploredYouRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopPlanetExploredYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopPlanetExploredYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopPlanetExploredYou(ctx, req.(*StatisticsTopPlanetExploredYouRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopTravelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopTravelAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopTravelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopTravelAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopTravelAll(ctx, req.(*StatisticsTopTravelAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopTravelYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopTravelYouRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopTravelYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopTravelYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopTravelYou(ctx, req.(*StatisticsTopTravelYouRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopMissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopMissionAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopMissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopMissionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopMissionAll(ctx, req.(*StatisticsTopMissionAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StatisticsTopMissionYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTopMissionYouRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StatisticsTopMissionYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StatisticsTopMissionYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StatisticsTopMissionYou(ctx, req.(*StatisticsTopMissionYouRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetDarkMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDarkMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetDarkMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetDarkMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetDarkMerchant(ctx, req.(*GetDarkMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DarkMerchantBuyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DarkMerchantBuyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DarkMerchantBuyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DarkMerchantBuyResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DarkMerchantBuyResource(ctx, req.(*DarkMerchantBuyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetLevelByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetLevelByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetLevelByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetLevelByID(ctx, req.(*GetLevelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreateTelegramStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelegramStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreateTelegramStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreateTelegramStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreateTelegramStatus(ctx, req.(*CreateTelegramStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTelegramStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelegramStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTelegramStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTelegramStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTelegramStatus(ctx, req.(*GetTelegramStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeleteTelegramStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTelegramStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeleteTelegramStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeleteTelegramStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeleteTelegramStatus(ctx, req.(*DeleteTelegramStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NoName",
	HandlerType: (*NoNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayerStartTutorial",
			Handler:    _NoName_PlayerStartTutorial_Handler,
		},
		{
			MethodName: "PlayerEndTutorial",
			Handler:    _NoName_PlayerEndTutorial_Handler,
		},
		{
			MethodName: "StartTravelTutorial",
			Handler:    _NoName_StartTravelTutorial_Handler,
		},
		{
			MethodName: "GetAllRarities",
			Handler:    _NoName_GetAllRarities_Handler,
		},
		{
			MethodName: "GetAllCraftableRarities",
			Handler:    _NoName_GetAllCraftableRarities_Handler,
		},
		{
			MethodName: "GetRarityByID",
			Handler:    _NoName_GetRarityByID_Handler,
		},
		{
			MethodName: "GetArmorByID",
			Handler:    _NoName_GetArmorByID_Handler,
		},
		{
			MethodName: "GetArmorByName",
			Handler:    _NoName_GetArmorByName_Handler,
		},
		{
			MethodName: "GetPlayerArmors",
			Handler:    _NoName_GetPlayerArmors_Handler,
		},
		{
			MethodName: "GetPlayerArmorsByCategoryID",
			Handler:    _NoName_GetPlayerArmorsByCategoryID_Handler,
		},
		{
			MethodName: "GetPlayerArmorsEquipped",
			Handler:    _NoName_GetPlayerArmorsEquipped_Handler,
		},
		{
			MethodName: "GetPlayerArmorEquippedByCategoryID",
			Handler:    _NoName_GetPlayerArmorEquippedByCategoryID_Handler,
		},
		{
			MethodName: "EquipArmor",
			Handler:    _NoName_EquipArmor_Handler,
		},
		{
			MethodName: "GetAllArmorCategory",
			Handler:    _NoName_GetAllArmorCategory_Handler,
		},
		{
			MethodName: "GetArmorCategoryBySlug",
			Handler:    _NoName_GetArmorCategoryBySlug_Handler,
		},
		{
			MethodName: "GetWeaponByID",
			Handler:    _NoName_GetWeaponByID_Handler,
		},
		{
			MethodName: "GetWeaponByName",
			Handler:    _NoName_GetWeaponByName_Handler,
		},
		{
			MethodName: "GetPlayerWeapons",
			Handler:    _NoName_GetPlayerWeapons_Handler,
		},
		{
			MethodName: "GetPlayerWeaponEquipped",
			Handler:    _NoName_GetPlayerWeaponEquipped_Handler,
		},
		{
			MethodName: "EquipWeapon",
			Handler:    _NoName_EquipWeapon_Handler,
		},
		{
			MethodName: "GetPlayerByID",
			Handler:    _NoName_GetPlayerByID_Handler,
		},
		{
			MethodName: "GetPlayerByUsername",
			Handler:    _NoName_GetPlayerByUsername_Handler,
		},
		{
			MethodName: "GetPlayerExperience",
			Handler:    _NoName_GetPlayerExperience_Handler,
		},
		{
			MethodName: "GetPlayerLifePoint",
			Handler:    _NoName_GetPlayerLifePoint_Handler,
		},
		{
			MethodName: "GetPlayerDailyReward",
			Handler:    _NoName_GetPlayerDailyReward_Handler,
		},
		{
			MethodName: "PlayerSetLanguage",
			Handler:    _NoName_PlayerSetLanguage_Handler,
		},
		{
			MethodName: "PlayerSetTimezone",
			Handler:    _NoName_PlayerSetTimezone_Handler,
		},
		{
			MethodName: "GetPlayerResources",
			Handler:    _NoName_GetPlayerResources_Handler,
		},
		{
			MethodName: "GetPlayerItems",
			Handler:    _NoName_GetPlayerItems_Handler,
		},
		{
			MethodName: "GetPlayerAmulets",
			Handler:    _NoName_GetPlayerAmulets_Handler,
		},
		{
			MethodName: "GetPlayerItemByID",
			Handler:    _NoName_GetPlayerItemByID_Handler,
		},
		{
			MethodName: "GetPlayerResourceByID",
			Handler:    _NoName_GetPlayerResourceByID_Handler,
		},
		{
			MethodName: "CreatePlayerPosition",
			Handler:    _NoName_CreatePlayerPosition_Handler,
		},
		{
			MethodName: "GetPlayerCurrentPlanet",
			Handler:    _NoName_GetPlayerCurrentPlanet_Handler,
		},
		{
			MethodName: "CountPlanetVisited",
			Handler:    _NoName_CountPlanetVisited_Handler,
		},
		{
			MethodName: "CountSystemVisited",
			Handler:    _NoName_CountSystemVisited_Handler,
		},
		{
			MethodName: "CountPlayerVisitedCurrentPlanet",
			Handler:    _NoName_CountPlayerVisitedCurrentPlanet_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _NoName_SignIn_Handler,
		},
		{
			MethodName: "GetPlayerStateByID",
			Handler:    _NoName_GetPlayerStateByID_Handler,
		},
		{
			MethodName: "GetActivePlayerActivities",
			Handler:    _NoName_GetActivePlayerActivities_Handler,
		},
		{
			MethodName: "CreatePlayerActivity",
			Handler:    _NoName_CreatePlayerActivity_Handler,
		},
		{
			MethodName: "UpdatePlayerActivity",
			Handler:    _NoName_UpdatePlayerActivity_Handler,
		},
		{
			MethodName: "DeletePlayerActivity",
			Handler:    _NoName_DeletePlayerActivity_Handler,
		},
		{
			MethodName: "DeletePlayerActivityByController",
			Handler:    _NoName_DeletePlayerActivityByController_Handler,
		},
		{
			MethodName: "GetPlayerActivityToNotify",
			Handler:    _NoName_GetPlayerActivityToNotify_Handler,
		},
		{
			MethodName: "SetPlayerActivityNotified",
			Handler:    _NoName_SetPlayerActivityNotified_Handler,
		},
		{
			MethodName: "GetTitanDropToNotify",
			Handler:    _NoName_GetTitanDropToNotify_Handler,
		},
		{
			MethodName: "SetTitanDropNotified",
			Handler:    _NoName_SetTitanDropNotified_Handler,
		},
		{
			MethodName: "GetEnemyByID",
			Handler:    _NoName_GetEnemyByID_Handler,
		},
		{
			MethodName: "HitEnemy",
			Handler:    _NoName_HitEnemy_Handler,
		},
		{
			MethodName: "GetTitanByID",
			Handler:    _NoName_GetTitanByID_Handler,
		},
		{
			MethodName: "GetTitanByName",
			Handler:    _NoName_GetTitanByName_Handler,
		},
		{
			MethodName: "GetTitanByPlanetID",
			Handler:    _NoName_GetTitanByPlanetID_Handler,
		},
		{
			MethodName: "GetTitanByPlanetSystemID",
			Handler:    _NoName_GetTitanByPlanetSystemID_Handler,
		},
		{
			MethodName: "HitTitan",
			Handler:    _NoName_HitTitan_Handler,
		},
		{
			MethodName: "TitanDiscovered",
			Handler:    _NoName_TitanDiscovered_Handler,
		},
		{
			MethodName: "GetTitanEventQuestions",
			Handler:    _NoName_GetTitanEventQuestions_Handler,
		},
		{
			MethodName: "GetTitanEventQuestionByID",
			Handler:    _NoName_GetTitanEventQuestionByID_Handler,
		},
		{
			MethodName: "GetTitanEventAnswerByID",
			Handler:    _NoName_GetTitanEventAnswerByID_Handler,
		},
		{
			MethodName: "TitanEventSubmitAnswer",
			Handler:    _NoName_TitanEventSubmitAnswer_Handler,
		},
		{
			MethodName: "GetLanguageBySlug",
			Handler:    _NoName_GetLanguageBySlug_Handler,
		},
		{
			MethodName: "GetLanguageByName",
			Handler:    _NoName_GetLanguageByName_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _NoName_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetTimezoneByDescription",
			Handler:    _NoName_GetTimezoneByDescription_Handler,
		},
		{
			MethodName: "GetTimezoneByName",
			Handler:    _NoName_GetTimezoneByName_Handler,
		},
		{
			MethodName: "GetAllTimezones",
			Handler:    _NoName_GetAllTimezones_Handler,
		},
		{
			MethodName: "GetAllNPC",
			Handler:    _NoName_GetAllNPC_Handler,
		},
		{
			MethodName: "BankDeposit",
			Handler:    _NoName_BankDeposit_Handler,
		},
		{
			MethodName: "BankWithdraw",
			Handler:    _NoName_BankWithdraw_Handler,
		},
		{
			MethodName: "GetPlanetByID",
			Handler:    _NoName_GetPlanetByID_Handler,
		},
		{
			MethodName: "GetPlanetByName",
			Handler:    _NoName_GetPlanetByName_Handler,
		},
		{
			MethodName: "GetPlanetByCoordinate",
			Handler:    _NoName_GetPlanetByCoordinate_Handler,
		},
		{
			MethodName: "GetPlanetByMapID",
			Handler:    _NoName_GetPlanetByMapID_Handler,
		},
		{
			MethodName: "GetExpansionInfo",
			Handler:    _NoName_GetExpansionInfo_Handler,
		},
		{
			MethodName: "GetSafePlanets",
			Handler:    _NoName_GetSafePlanets_Handler,
		},
		{
			MethodName: "AddPlanetBookmark",
			Handler:    _NoName_AddPlanetBookmark_Handler,
		},
		{
			MethodName: "RemovePlanetBookmark",
			Handler:    _NoName_RemovePlanetBookmark_Handler,
		},
		{
			MethodName: "CheckIfPlayerHavePlanetBookmark",
			Handler:    _NoName_CheckIfPlayerHavePlanetBookmark_Handler,
		},
		{
			MethodName: "GetPlanetMapByID",
			Handler:    _NoName_GetPlanetMapByID_Handler,
		},
		{
			MethodName: "GetResourceByID",
			Handler:    _NoName_GetResourceByID_Handler,
		},
		{
			MethodName: "GetResourceByName",
			Handler:    _NoName_GetResourceByName_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _NoName_GetAllItems_Handler,
		},
		{
			MethodName: "GetShoppableItems",
			Handler:    _NoName_GetShoppableItems_Handler,
		},
		{
			MethodName: "GetItemsByCategoryID",
			Handler:    _NoName_GetItemsByCategoryID_Handler,
		},
		{
			MethodName: "GetCraftableItemsByCategoryID",
			Handler:    _NoName_GetCraftableItemsByCategoryID_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _NoName_UseItem_Handler,
		},
		{
			MethodName: "BuyItem",
			Handler:    _NoName_BuyItem_Handler,
		},
		{
			MethodName: "GetItemByID",
			Handler:    _NoName_GetItemByID_Handler,
		},
		{
			MethodName: "GetAllItemCategories",
			Handler:    _NoName_GetAllItemCategories_Handler,
		},
		{
			MethodName: "GetShipByID",
			Handler:    _NoName_GetShipByID_Handler,
		},
		{
			MethodName: "GetPlayerShips",
			Handler:    _NoName_GetPlayerShips_Handler,
		},
		{
			MethodName: "GetPlayerShipEquipped",
			Handler:    _NoName_GetPlayerShipEquipped_Handler,
		},
		{
			MethodName: "EquipShip",
			Handler:    _NoName_EquipShip_Handler,
		},
		{
			MethodName: "GetAllShipCategories",
			Handler:    _NoName_GetAllShipCategories_Handler,
		},
		{
			MethodName: "GetShipCategoryByID",
			Handler:    _NoName_GetShipCategoryByID_Handler,
		},
		{
			MethodName: "LaboratoryStartCrafting",
			Handler:    _NoName_LaboratoryStartCrafting_Handler,
		},
		{
			MethodName: "LaboratoryCheckHaveResourceForCrafting",
			Handler:    _NoName_LaboratoryCheckHaveResourceForCrafting_Handler,
		},
		{
			MethodName: "LaboratoryCheckCrafting",
			Handler:    _NoName_LaboratoryCheckCrafting_Handler,
		},
		{
			MethodName: "LaboratoryEndCrafting",
			Handler:    _NoName_LaboratoryEndCrafting_Handler,
		},
		{
			MethodName: "GetRestsInfo",
			Handler:    _NoName_GetRestsInfo_Handler,
		},
		{
			MethodName: "StartPlayerRest",
			Handler:    _NoName_StartPlayerRest_Handler,
		},
		{
			MethodName: "RestCheck",
			Handler:    _NoName_RestCheck_Handler,
		},
		{
			MethodName: "EndPlayerRest",
			Handler:    _NoName_EndPlayerRest_Handler,
		},
		{
			MethodName: "ShipTravelRadarInfo",
			Handler:    _NoName_ShipTravelRadarInfo_Handler,
		},
		{
			MethodName: "ShipTravelFavoriteInfo",
			Handler:    _NoName_ShipTravelFavoriteInfo_Handler,
		},
		{
			MethodName: "ShipTravelManualInfo",
			Handler:    _NoName_ShipTravelManualInfo_Handler,
		},
		{
			MethodName: "StartShipTravel",
			Handler:    _NoName_StartShipTravel_Handler,
		},
		{
			MethodName: "CheckShipTravel",
			Handler:    _NoName_CheckShipTravel_Handler,
		},
		{
			MethodName: "EndShipTravel",
			Handler:    _NoName_EndShipTravel_Handler,
		},
		{
			MethodName: "EndShipTravelDiamond",
			Handler:    _NoName_EndShipTravelDiamond_Handler,
		},
		{
			MethodName: "TravelRescue",
			Handler:    _NoName_TravelRescue_Handler,
		},
		{
			MethodName: "GetPlayerEconomy",
			Handler:    _NoName_GetPlayerEconomy_Handler,
		},
		{
			MethodName: "DropTresure",
			Handler:    _NoName_DropTresure_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _NoName_GetMission_Handler,
		},
		{
			MethodName: "CheckMission",
			Handler:    _NoName_CheckMission_Handler,
		},
		{
			MethodName: "GetMissionReward",
			Handler:    _NoName_GetMissionReward_Handler,
		},
		{
			MethodName: "GetTeletrasportSafePlanetList",
			Handler:    _NoName_GetTeletrasportSafePlanetList_Handler,
		},
		{
			MethodName: "EndTeletrasportSafePlanet",
			Handler:    _NoName_EndTeletrasportSafePlanet_Handler,
		},
		{
			MethodName: "GetRecapActiveResearch",
			Handler:    _NoName_GetRecapActiveResearch_Handler,
		},
		{
			MethodName: "ResearchDonation",
			Handler:    _NoName_ResearchDonation_Handler,
		},
		{
			MethodName: "ExplorationStart",
			Handler:    _NoName_ExplorationStart_Handler,
		},
		{
			MethodName: "ExplorationContinue",
			Handler:    _NoName_ExplorationContinue_Handler,
		},
		{
			MethodName: "ExplorationEnd",
			Handler:    _NoName_ExplorationEnd_Handler,
		},
		{
			MethodName: "ExplorationCheck",
			Handler:    _NoName_ExplorationCheck_Handler,
		},
		{
			MethodName: "ExplorationDropResources",
			Handler:    _NoName_ExplorationDropResources_Handler,
		},
		{
			MethodName: "GetAllExplorationCategories",
			Handler:    _NoName_GetAllExplorationCategories_Handler,
		},
		{
			MethodName: "GetConquerorsByPlanetID",
			Handler:    _NoName_GetConquerorsByPlanetID_Handler,
		},
		{
			MethodName: "GetCurrentConquerorByPlanetID",
			Handler:    _NoName_GetCurrentConquerorByPlanetID_Handler,
		},
		{
			MethodName: "CrafterStart",
			Handler:    _NoName_CrafterStart_Handler,
		},
		{
			MethodName: "CrafterEnd",
			Handler:    _NoName_CrafterEnd_Handler,
		},
		{
			MethodName: "CrafterCheck",
			Handler:    _NoName_CrafterCheck_Handler,
		},
		{
			MethodName: "CrafterGetRepairWeaponInfo",
			Handler:    _NoName_CrafterGetRepairWeaponInfo_Handler,
		},
		{
			MethodName: "CrafterRepairWeapon",
			Handler:    _NoName_CrafterRepairWeapon_Handler,
		},
		{
			MethodName: "CrafterDecompose",
			Handler:    _NoName_CrafterDecompose_Handler,
		},
		{
			MethodName: "GetAbilityForPlayerByCategory",
			Handler:    _NoName_GetAbilityForPlayerByCategory_Handler,
		},
		{
			MethodName: "LearnAbility",
			Handler:    _NoName_LearnAbility_Handler,
		},
		{
			MethodName: "CheckIfPlayerHaveAbility",
			Handler:    _NoName_CheckIfPlayerHaveAbility_Handler,
		},
		{
			MethodName: "GetAllAbilityCategory",
			Handler:    _NoName_GetAllAbilityCategory_Handler,
		},
		{
			MethodName: "GetAbilityCategoryBySlug",
			Handler:    _NoName_GetAbilityCategoryBySlug_Handler,
		},
		{
			MethodName: "GetPartyDetails",
			Handler:    _NoName_GetPartyDetails_Handler,
		},
		{
			MethodName: "CreateParty",
			Handler:    _NoName_CreateParty_Handler,
		},
		{
			MethodName: "AddPlayerToParty",
			Handler:    _NoName_AddPlayerToParty_Handler,
		},
		{
			MethodName: "RemovePlayerToParty",
			Handler:    _NoName_RemovePlayerToParty_Handler,
		},
		{
			MethodName: "RemovePlayerFromParty",
			Handler:    _NoName_RemovePlayerFromParty_Handler,
		},
		{
			MethodName: "CheckGuildName",
			Handler:    _NoName_CheckGuildName_Handler,
		},
		{
			MethodName: "CreateGuild",
			Handler:    _NoName_CreateGuild_Handler,
		},
		{
			MethodName: "JoinGuild",
			Handler:    _NoName_JoinGuild_Handler,
		},
		{
			MethodName: "GetJoinGuildsList",
			Handler:    _NoName_GetJoinGuildsList_Handler,
		},
		{
			MethodName: "GetPlayerGuild",
			Handler:    _NoName_GetPlayerGuild_Handler,
		},
		{
			MethodName: "LeaveGuild",
			Handler:    _NoName_LeaveGuild_Handler,
		},
		{
			MethodName: "GetPlayersGuild",
			Handler:    _NoName_GetPlayersGuild_Handler,
		},
		{
			MethodName: "AddPlayerToGuild",
			Handler:    _NoName_AddPlayerToGuild_Handler,
		},
		{
			MethodName: "RemovePlayerToGuild",
			Handler:    _NoName_RemovePlayerToGuild_Handler,
		},
		{
			MethodName: "GetGuildPoints",
			Handler:    _NoName_GetGuildPoints_Handler,
		},
		{
			MethodName: "GetPlayerGuildPoints",
			Handler:    _NoName_GetPlayerGuildPoints_Handler,
		},
		{
			MethodName: "GetShipRepairInfo",
			Handler:    _NoName_GetShipRepairInfo_Handler,
		},
		{
			MethodName: "StartShipRepair",
			Handler:    _NoName_StartShipRepair_Handler,
		},
		{
			MethodName: "EndShipRepair",
			Handler:    _NoName_EndShipRepair_Handler,
		},
		{
			MethodName: "CheckShipRepair",
			Handler:    _NoName_CheckShipRepair_Handler,
		},
		{
			MethodName: "GetCreateShipInfo",
			Handler:    _NoName_GetCreateShipInfo_Handler,
		},
		{
			MethodName: "StartCreateShip",
			Handler:    _NoName_StartCreateShip_Handler,
		},
		{
			MethodName: "CheckCreateShip",
			Handler:    _NoName_CheckCreateShip_Handler,
		},
		{
			MethodName: "EndCreateShip",
			Handler:    _NoName_EndCreateShip_Handler,
		},
		{
			MethodName: "EndCreateShipDiamond",
			Handler:    _NoName_EndCreateShipDiamond_Handler,
		},
		{
			MethodName: "GetAllAchievement",
			Handler:    _NoName_GetAllAchievement_Handler,
		},
		{
			MethodName: "GetAchievementsByCategoryID",
			Handler:    _NoName_GetAchievementsByCategoryID_Handler,
		},
		{
			MethodName: "GetAchievementForPlayerByCategory",
			Handler:    _NoName_GetAchievementForPlayerByCategory_Handler,
		},
		{
			MethodName: "CheckIfPlayerHaveAchievement",
			Handler:    _NoName_CheckIfPlayerHaveAchievement_Handler,
		},
		{
			MethodName: "GetAllAchievementCategory",
			Handler:    _NoName_GetAllAchievementCategory_Handler,
		},
		{
			MethodName: "GetAchievementCategoryByID",
			Handler:    _NoName_GetAchievementCategoryByID_Handler,
		},
		{
			MethodName: "GetAchievementCategoryBySlug",
			Handler:    _NoName_GetAchievementCategoryBySlug_Handler,
		},
		{
			MethodName: "GetPlayerAchievementToNotify",
			Handler:    _NoName_GetPlayerAchievementToNotify_Handler,
		},
		{
			MethodName: "SetPlayerAchievementNotified",
			Handler:    _NoName_SetPlayerAchievementNotified_Handler,
		},
		{
			MethodName: "ThreeCardGamePlay",
			Handler:    _NoName_ThreeCardGamePlay_Handler,
		},
		{
			MethodName: "ThreeCardGameCheck",
			Handler:    _NoName_ThreeCardGameCheck_Handler,
		},
		{
			MethodName: "ThreeCardGameRecoverPlay",
			Handler:    _NoName_ThreeCardGameRecoverPlay_Handler,
		},
		{
			MethodName: "ThreeCardGameEndGame",
			Handler:    _NoName_ThreeCardGameEndGame_Handler,
		},
		{
			MethodName: "StatisticsTopPlayerEnemyKillAll",
			Handler:    _NoName_StatisticsTopPlayerEnemyKillAll_Handler,
		},
		{
			MethodName: "StatisticsTopPlayerEnemyKillYou",
			Handler:    _NoName_StatisticsTopPlayerEnemyKillYou_Handler,
		},
		{
			MethodName: "StatisticsTopPlanetExploredAll",
			Handler:    _NoName_StatisticsTopPlanetExploredAll_Handler,
		},
		{
			MethodName: "StatisticsTopPlanetExploredYou",
			Handler:    _NoName_StatisticsTopPlanetExploredYou_Handler,
		},
		{
			MethodName: "StatisticsTopTravelAll",
			Handler:    _NoName_StatisticsTopTravelAll_Handler,
		},
		{
			MethodName: "StatisticsTopTravelYou",
			Handler:    _NoName_StatisticsTopTravelYou_Handler,
		},
		{
			MethodName: "StatisticsTopMissionAll",
			Handler:    _NoName_StatisticsTopMissionAll_Handler,
		},
		{
			MethodName: "StatisticsTopMissionYou",
			Handler:    _NoName_StatisticsTopMissionYou_Handler,
		},
		{
			MethodName: "GetDarkMerchant",
			Handler:    _NoName_GetDarkMerchant_Handler,
		},
		{
			MethodName: "DarkMerchantBuyResource",
			Handler:    _NoName_DarkMerchantBuyResource_Handler,
		},
		{
			MethodName: "GetLevelByID",
			Handler:    _NoName_GetLevelByID_Handler,
		},
		{
			MethodName: "CreateTelegramStatus",
			Handler:    _NoName_CreateTelegramStatus_Handler,
		},
		{
			MethodName: "GetTelegramStatus",
			Handler:    _NoName_GetTelegramStatus_Handler,
		},
		{
			MethodName: "DeleteTelegramStatus",
			Handler:    _NoName_DeleteTelegramStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noname.proto",
}
