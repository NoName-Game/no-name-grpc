// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/assault.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ScanPlanet
type ScanPlanetRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *ScanPlanetRequest) Reset()         { *m = ScanPlanetRequest{} }
func (m *ScanPlanetRequest) String() string { return proto.CompactTextString(m) }
func (*ScanPlanetRequest) ProtoMessage()    {}
func (*ScanPlanetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{0}
}
func (m *ScanPlanetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanPlanetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanPlanetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanPlanetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanPlanetRequest.Merge(m, src)
}
func (m *ScanPlanetRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScanPlanetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanPlanetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanPlanetRequest proto.InternalMessageInfo

func (m *ScanPlanetRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type ScanPlanetResponse struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	InParty  bool   `protobuf:"varint,2,opt,name=InParty,proto3" json:"InParty,omitempty"`
}

func (m *ScanPlanetResponse) Reset()         { *m = ScanPlanetResponse{} }
func (m *ScanPlanetResponse) String() string { return proto.CompactTextString(m) }
func (*ScanPlanetResponse) ProtoMessage()    {}
func (*ScanPlanetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{1}
}
func (m *ScanPlanetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanPlanetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanPlanetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanPlanetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanPlanetResponse.Merge(m, src)
}
func (m *ScanPlanetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScanPlanetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanPlanetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanPlanetResponse proto.InternalMessageInfo

func (m *ScanPlanetResponse) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *ScanPlanetResponse) GetInParty() bool {
	if m != nil {
		return m.InParty
	}
	return false
}

// StartAssault
type StartAssaultRequest struct {
	AttackerID      uint32 `protobuf:"varint,1,opt,name=AttackerID,proto3" json:"AttackerID,omitempty"`
	AttackerPartyID uint32 `protobuf:"varint,2,opt,name=AttackerPartyID,proto3" json:"AttackerPartyID,omitempty"`
	DefenderID      uint32 `protobuf:"varint,3,opt,name=DefenderID,proto3" json:"DefenderID,omitempty"`
	DefenderPartyID uint32 `protobuf:"varint,4,opt,name=DefenderPartyID,proto3" json:"DefenderPartyID,omitempty"`
}

func (m *StartAssaultRequest) Reset()         { *m = StartAssaultRequest{} }
func (m *StartAssaultRequest) String() string { return proto.CompactTextString(m) }
func (*StartAssaultRequest) ProtoMessage()    {}
func (*StartAssaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{2}
}
func (m *StartAssaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartAssaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartAssaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartAssaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartAssaultRequest.Merge(m, src)
}
func (m *StartAssaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartAssaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartAssaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartAssaultRequest proto.InternalMessageInfo

func (m *StartAssaultRequest) GetAttackerID() uint32 {
	if m != nil {
		return m.AttackerID
	}
	return 0
}

func (m *StartAssaultRequest) GetAttackerPartyID() uint32 {
	if m != nil {
		return m.AttackerPartyID
	}
	return 0
}

func (m *StartAssaultRequest) GetDefenderID() uint32 {
	if m != nil {
		return m.DefenderID
	}
	return 0
}

func (m *StartAssaultRequest) GetDefenderPartyID() uint32 {
	if m != nil {
		return m.DefenderPartyID
	}
	return 0
}

type StartAssaultResponse struct {
	AttackerDefeated    bool    `protobuf:"varint,1,opt,name=AttackerDefeated,proto3" json:"AttackerDefeated,omitempty"`
	AttackerTotalDamage float64 `protobuf:"fixed64,2,opt,name=AttackerTotalDamage,proto3" json:"AttackerTotalDamage,omitempty"`
	DefenderDefeated    bool    `protobuf:"varint,3,opt,name=DefenderDefeated,proto3" json:"DefenderDefeated,omitempty"`
	DefenderTotalDamage float64 `protobuf:"fixed64,4,opt,name=DefenderTotalDamage,proto3" json:"DefenderTotalDamage,omitempty"`
	Turns               uint32  `protobuf:"varint,5,opt,name=Turns,proto3" json:"Turns,omitempty"`
}

func (m *StartAssaultResponse) Reset()         { *m = StartAssaultResponse{} }
func (m *StartAssaultResponse) String() string { return proto.CompactTextString(m) }
func (*StartAssaultResponse) ProtoMessage()    {}
func (*StartAssaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{3}
}
func (m *StartAssaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartAssaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartAssaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartAssaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartAssaultResponse.Merge(m, src)
}
func (m *StartAssaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartAssaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartAssaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartAssaultResponse proto.InternalMessageInfo

func (m *StartAssaultResponse) GetAttackerDefeated() bool {
	if m != nil {
		return m.AttackerDefeated
	}
	return false
}

func (m *StartAssaultResponse) GetAttackerTotalDamage() float64 {
	if m != nil {
		return m.AttackerTotalDamage
	}
	return 0
}

func (m *StartAssaultResponse) GetDefenderDefeated() bool {
	if m != nil {
		return m.DefenderDefeated
	}
	return false
}

func (m *StartAssaultResponse) GetDefenderTotalDamage() float64 {
	if m != nil {
		return m.DefenderTotalDamage
	}
	return 0
}

func (m *StartAssaultResponse) GetTurns() uint32 {
	if m != nil {
		return m.Turns
	}
	return 0
}

// EndAssault
type EndAssaultRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *EndAssaultRequest) Reset()         { *m = EndAssaultRequest{} }
func (m *EndAssaultRequest) String() string { return proto.CompactTextString(m) }
func (*EndAssaultRequest) ProtoMessage()    {}
func (*EndAssaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{4}
}
func (m *EndAssaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndAssaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndAssaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndAssaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndAssaultRequest.Merge(m, src)
}
func (m *EndAssaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndAssaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndAssaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndAssaultRequest proto.InternalMessageInfo

func (m *EndAssaultRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type EndAssaultResponse struct {
}

func (m *EndAssaultResponse) Reset()         { *m = EndAssaultResponse{} }
func (m *EndAssaultResponse) String() string { return proto.CompactTextString(m) }
func (*EndAssaultResponse) ProtoMessage()    {}
func (*EndAssaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{5}
}
func (m *EndAssaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndAssaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndAssaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndAssaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndAssaultResponse.Merge(m, src)
}
func (m *EndAssaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *EndAssaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndAssaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndAssaultResponse proto.InternalMessageInfo

// GetFormation
type GetFormationRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PartyID  uint32 `protobuf:"varint,2,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
}

func (m *GetFormationRequest) Reset()         { *m = GetFormationRequest{} }
func (m *GetFormationRequest) String() string { return proto.CompactTextString(m) }
func (*GetFormationRequest) ProtoMessage()    {}
func (*GetFormationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{6}
}
func (m *GetFormationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFormationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFormationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFormationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFormationRequest.Merge(m, src)
}
func (m *GetFormationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFormationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFormationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFormationRequest proto.InternalMessageInfo

func (m *GetFormationRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GetFormationRequest) GetPartyID() uint32 {
	if m != nil {
		return m.PartyID
	}
	return 0
}

type GetFormationResponse struct {
	Formation map[uint32]*Ship `protobuf:"bytes,1,rep,name=Formation,proto3" json:"Formation,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetFormationResponse) Reset()         { *m = GetFormationResponse{} }
func (m *GetFormationResponse) String() string { return proto.CompactTextString(m) }
func (*GetFormationResponse) ProtoMessage()    {}
func (*GetFormationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6aeb8097ff9b7d, []int{7}
}
func (m *GetFormationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFormationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFormationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFormationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFormationResponse.Merge(m, src)
}
func (m *GetFormationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFormationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFormationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFormationResponse proto.InternalMessageInfo

func (m *GetFormationResponse) GetFormation() map[uint32]*Ship {
	if m != nil {
		return m.Formation
	}
	return nil
}

func init() {
	proto.RegisterType((*ScanPlanetRequest)(nil), "assault.ScanPlanetRequest")
	proto.RegisterType((*ScanPlanetResponse)(nil), "assault.ScanPlanetResponse")
	proto.RegisterType((*StartAssaultRequest)(nil), "assault.StartAssaultRequest")
	proto.RegisterType((*StartAssaultResponse)(nil), "assault.StartAssaultResponse")
	proto.RegisterType((*EndAssaultRequest)(nil), "assault.EndAssaultRequest")
	proto.RegisterType((*EndAssaultResponse)(nil), "assault.EndAssaultResponse")
	proto.RegisterType((*GetFormationRequest)(nil), "assault.GetFormationRequest")
	proto.RegisterType((*GetFormationResponse)(nil), "assault.GetFormationResponse")
	proto.RegisterMapType((map[uint32]*Ship)(nil), "assault.GetFormationResponse.FormationEntry")
}

func init() { proto.RegisterFile("proto/assault.proto", fileDescriptor_6f6aeb8097ff9b7d) }

var fileDescriptor_6f6aeb8097ff9b7d = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xb5, 0x65, 0xe5, 0x4d, 0x83, 0xe2, 0xe4, 0x10, 0xf5, 0x60, 0x45, 0x39, 0x45,
	0x08, 0x65, 0x68, 0x5c, 0x10, 0x9c, 0x86, 0x32, 0xa0, 0xe3, 0x52, 0xb9, 0x3b, 0x71, 0xf3, 0x56,
	0xc3, 0xaa, 0x65, 0x4e, 0x48, 0x1c, 0xa4, 0x7c, 0x0b, 0xbe, 0x06, 0x12, 0x1f, 0x84, 0xe3, 0x8e,
	0x1c, 0x51, 0x7b, 0xe1, 0x63, 0x20, 0xdb, 0x71, 0x96, 0x84, 0x6a, 0xe2, 0x96, 0xff, 0xff, 0xe9,
	0xfd, 0xf2, 0xb7, 0xdf, 0x33, 0x38, 0x59, 0x9e, 0xca, 0xf4, 0x88, 0x15, 0x05, 0x2b, 0x13, 0x19,
	0x69, 0x85, 0xf7, 0x6b, 0x39, 0x9b, 0x9a, 0x6a, 0x71, 0xb5, 0xce, 0x4c, 0x29, 0x38, 0x82, 0x27,
	0xcb, 0x4b, 0x26, 0x16, 0x09, 0x13, 0x5c, 0x52, 0xfe, 0xa5, 0xe4, 0x85, 0xc4, 0x33, 0x98, 0x2c,
	0x12, 0x56, 0xf1, 0x7c, 0x1e, 0x7b, 0xc8, 0x47, 0xe1, 0x21, 0x6d, 0x74, 0x70, 0x06, 0xb8, 0xdd,
	0x50, 0x64, 0xa9, 0x28, 0xf8, 0x7d, 0x1d, 0xd8, 0x83, 0xfd, 0xb9, 0x58, 0xb0, 0x5c, 0x56, 0xde,
	0x9e, 0x8f, 0xc2, 0x09, 0xb5, 0x32, 0xf8, 0x8e, 0xc0, 0x59, 0x4a, 0x96, 0xcb, 0x13, 0x93, 0xcf,
	0xfe, 0x9f, 0x00, 0x9c, 0x48, 0xc9, 0x2e, 0xaf, 0x5b, 0xbc, 0x96, 0x83, 0x43, 0x78, 0x6c, 0x95,
	0x06, 0xcd, 0x63, 0x4d, 0x3e, 0xa4, 0x7d, 0x5b, 0x91, 0x62, 0xfe, 0x89, 0x8b, 0x95, 0x26, 0x0d,
	0x0d, 0xe9, 0xce, 0x51, 0x24, 0xab, 0x2c, 0x69, 0x64, 0x48, 0x3d, 0x3b, 0xf8, 0x83, 0xc0, 0xed,
	0x66, 0xad, 0x8f, 0xfe, 0x14, 0xa6, 0xf6, 0xaf, 0xaa, 0x87, 0x49, 0xbe, 0xd2, 0x91, 0x27, 0xf4,
	0x1f, 0x1f, 0x3f, 0x07, 0xc7, 0x7a, 0xe7, 0xa9, 0x64, 0x49, 0xcc, 0x6e, 0xd8, 0x67, 0xae, 0xc3,
	0x23, 0xba, 0xab, 0xa4, 0xe8, 0x36, 0x49, 0x43, 0x1f, 0x1a, 0x7a, 0xdf, 0x57, 0x74, 0xeb, 0xb5,
	0xe9, 0x23, 0x43, 0xdf, 0x51, 0xc2, 0x2e, 0x8c, 0xcf, 0xcb, 0x5c, 0x14, 0xde, 0x58, 0x1f, 0xda,
	0x08, 0xb5, 0x13, 0xa7, 0x62, 0xd5, 0x9b, 0xc9, 0x7d, 0x3b, 0xe1, 0x02, 0x6e, 0x37, 0x98, 0x8b,
	0x09, 0x3e, 0x80, 0xf3, 0x8e, 0xcb, 0xb7, 0x69, 0x7e, 0xc3, 0xe4, 0x3a, 0x15, 0xff, 0x01, 0x52,
	0xab, 0xd2, 0x1d, 0xa8, 0x95, 0xc1, 0x0f, 0x04, 0x6e, 0x97, 0x56, 0x5f, 0xff, 0x19, 0x3c, 0x6c,
	0x4c, 0x0f, 0xf9, 0xc3, 0xf0, 0xe0, 0xf8, 0x59, 0x64, 0xd7, 0x7f, 0x57, 0x47, 0xd4, 0x38, 0xa7,
	0x42, 0xe6, 0x15, 0xbd, 0x6b, 0x9f, 0xbd, 0x87, 0x47, 0xdd, 0x22, 0x9e, 0xc2, 0xf0, 0x9a, 0x57,
	0x75, 0x4e, 0xf5, 0x89, 0x7d, 0x18, 0x7f, 0x65, 0x49, 0x69, 0x86, 0x76, 0x70, 0x0c, 0x91, 0x7e,
	0x4c, 0xcb, 0xab, 0x75, 0x46, 0x4d, 0xe1, 0xd5, 0xde, 0x4b, 0xf4, 0x86, 0xfc, 0xdc, 0x10, 0x74,
	0xbb, 0x21, 0xe8, 0xf7, 0x86, 0xa0, 0x6f, 0x5b, 0x32, 0xb8, 0xdd, 0x92, 0xc1, 0xaf, 0x2d, 0x19,
	0x7c, 0x1c, 0x45, 0xaf, 0xb3, 0x8b, 0x8b, 0x07, 0xfa, 0xf5, 0xbd, 0xf8, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xc0, 0xdb, 0xfa, 0x82, 0xaf, 0x03, 0x00, 0x00,
}

func (m *ScanPlanetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanPlanetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanPlanetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScanPlanetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanPlanetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanPlanetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InParty {
		i--
		if m.InParty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartAssaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartAssaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartAssaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefenderPartyID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.DefenderPartyID))
		i--
		dAtA[i] = 0x20
	}
	if m.DefenderID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.DefenderID))
		i--
		dAtA[i] = 0x18
	}
	if m.AttackerPartyID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.AttackerPartyID))
		i--
		dAtA[i] = 0x10
	}
	if m.AttackerID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.AttackerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartAssaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartAssaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartAssaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Turns != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.Turns))
		i--
		dAtA[i] = 0x28
	}
	if m.DefenderTotalDamage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DefenderTotalDamage))))
		i--
		dAtA[i] = 0x21
	}
	if m.DefenderDefeated {
		i--
		if m.DefenderDefeated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AttackerTotalDamage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AttackerTotalDamage))))
		i--
		dAtA[i] = 0x11
	}
	if m.AttackerDefeated {
		i--
		if m.AttackerDefeated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndAssaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndAssaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndAssaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndAssaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndAssaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndAssaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetFormationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFormationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFormationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartyID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.PartyID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAssault(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetFormationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFormationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFormationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Formation) > 0 {
		for k := range m.Formation {
			v := m.Formation[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAssault(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintAssault(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAssault(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAssault(dAtA []byte, offset int, v uint64) int {
	offset -= sovAssault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScanPlanetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAssault(uint64(m.PlayerID))
	}
	return n
}

func (m *ScanPlanetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAssault(uint64(m.PlayerID))
	}
	if m.InParty {
		n += 2
	}
	return n
}

func (m *StartAssaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttackerID != 0 {
		n += 1 + sovAssault(uint64(m.AttackerID))
	}
	if m.AttackerPartyID != 0 {
		n += 1 + sovAssault(uint64(m.AttackerPartyID))
	}
	if m.DefenderID != 0 {
		n += 1 + sovAssault(uint64(m.DefenderID))
	}
	if m.DefenderPartyID != 0 {
		n += 1 + sovAssault(uint64(m.DefenderPartyID))
	}
	return n
}

func (m *StartAssaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttackerDefeated {
		n += 2
	}
	if m.AttackerTotalDamage != 0 {
		n += 9
	}
	if m.DefenderDefeated {
		n += 2
	}
	if m.DefenderTotalDamage != 0 {
		n += 9
	}
	if m.Turns != 0 {
		n += 1 + sovAssault(uint64(m.Turns))
	}
	return n
}

func (m *EndAssaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAssault(uint64(m.PlayerID))
	}
	return n
}

func (m *EndAssaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFormationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAssault(uint64(m.PlayerID))
	}
	if m.PartyID != 0 {
		n += 1 + sovAssault(uint64(m.PartyID))
	}
	return n
}

func (m *GetFormationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Formation) > 0 {
		for k, v := range m.Formation {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAssault(uint64(l))
			}
			mapEntrySize := 1 + sovAssault(uint64(k)) + l
			n += mapEntrySize + 1 + sovAssault(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAssault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAssault(x uint64) (n int) {
	return sovAssault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScanPlanetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanPlanetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanPlanetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanPlanetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanPlanetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanPlanetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InParty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InParty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartAssaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartAssaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartAssaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerID", wireType)
			}
			m.AttackerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerPartyID", wireType)
			}
			m.AttackerPartyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerPartyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderID", wireType)
			}
			m.DefenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderPartyID", wireType)
			}
			m.DefenderPartyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderPartyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartAssaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartAssaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartAssaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerDefeated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttackerDefeated = bool(v != 0)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerTotalDamage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AttackerTotalDamage = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderDefeated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefenderDefeated = bool(v != 0)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderTotalDamage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DefenderTotalDamage = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turns", wireType)
			}
			m.Turns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Turns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndAssaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndAssaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndAssaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndAssaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndAssaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndAssaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFormationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFormationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFormationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyID", wireType)
			}
			m.PartyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFormationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFormationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFormationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Formation == nil {
				m.Formation = make(map[uint32]*Ship)
			}
			var mapkey uint32
			var mapvalue *Ship
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAssault
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAssault
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Ship{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAssault(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAssault
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Formation[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAssault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAssault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAssault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAssault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAssault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAssault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAssault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAssault = fmt.Errorf("proto: unexpected end of group")
)
