// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/guild.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Guild struct {
	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	GuildType bool   `protobuf:"varint,9,opt,name=GuildType,proto3" json:"GuildType,omitempty"`
	OwnerID   uint32 `protobuf:"varint,13,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
}

func (m *Guild) Reset()         { *m = Guild{} }
func (m *Guild) String() string { return proto.CompactTextString(m) }
func (*Guild) ProtoMessage()    {}
func (*Guild) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{0}
}
func (m *Guild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Guild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Guild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guild.Merge(m, src)
}
func (m *Guild) XXX_Size() int {
	return m.Size()
}
func (m *Guild) XXX_DiscardUnknown() {
	xxx_messageInfo_Guild.DiscardUnknown(m)
}

var xxx_messageInfo_Guild proto.InternalMessageInfo

func (m *Guild) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Guild) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Guild) GetGuildType() bool {
	if m != nil {
		return m.GuildType
	}
	return false
}

func (m *Guild) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

// CheckGuildName
type CheckGuildNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *CheckGuildNameRequest) Reset()         { *m = CheckGuildNameRequest{} }
func (m *CheckGuildNameRequest) String() string { return proto.CompactTextString(m) }
func (*CheckGuildNameRequest) ProtoMessage()    {}
func (*CheckGuildNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{1}
}
func (m *CheckGuildNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckGuildNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckGuildNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckGuildNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckGuildNameRequest.Merge(m, src)
}
func (m *CheckGuildNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckGuildNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckGuildNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckGuildNameRequest proto.InternalMessageInfo

func (m *CheckGuildNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CheckGuildNameResponse struct {
	GuildNameFree bool `protobuf:"varint,1,opt,name=GuildNameFree,proto3" json:"GuildNameFree,omitempty"`
}

func (m *CheckGuildNameResponse) Reset()         { *m = CheckGuildNameResponse{} }
func (m *CheckGuildNameResponse) String() string { return proto.CompactTextString(m) }
func (*CheckGuildNameResponse) ProtoMessage()    {}
func (*CheckGuildNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{2}
}
func (m *CheckGuildNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckGuildNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckGuildNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckGuildNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckGuildNameResponse.Merge(m, src)
}
func (m *CheckGuildNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckGuildNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckGuildNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckGuildNameResponse proto.InternalMessageInfo

func (m *CheckGuildNameResponse) GetGuildNameFree() bool {
	if m != nil {
		return m.GuildNameFree
	}
	return false
}

// CreateGuild
type CreateGuildRequest struct {
	GuildName string `protobuf:"bytes,1,opt,name=GuildName,proto3" json:"GuildName,omitempty"`
	OwnerID   uint32 `protobuf:"varint,2,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
	GuildType bool   `protobuf:"varint,3,opt,name=GuildType,proto3" json:"GuildType,omitempty"`
}

func (m *CreateGuildRequest) Reset()         { *m = CreateGuildRequest{} }
func (m *CreateGuildRequest) String() string { return proto.CompactTextString(m) }
func (*CreateGuildRequest) ProtoMessage()    {}
func (*CreateGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{3}
}
func (m *CreateGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGuildRequest.Merge(m, src)
}
func (m *CreateGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGuildRequest proto.InternalMessageInfo

func (m *CreateGuildRequest) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *CreateGuildRequest) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *CreateGuildRequest) GetGuildType() bool {
	if m != nil {
		return m.GuildType
	}
	return false
}

type CreateGuildResponse struct {
}

func (m *CreateGuildResponse) Reset()         { *m = CreateGuildResponse{} }
func (m *CreateGuildResponse) String() string { return proto.CompactTextString(m) }
func (*CreateGuildResponse) ProtoMessage()    {}
func (*CreateGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{4}
}
func (m *CreateGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGuildResponse.Merge(m, src)
}
func (m *CreateGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGuildResponse proto.InternalMessageInfo

// JoinGuild
type JoinGuildRequest struct {
	PlayerID  uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	GuildName string `protobuf:"bytes,2,opt,name=GuildName,proto3" json:"GuildName,omitempty"`
}

func (m *JoinGuildRequest) Reset()         { *m = JoinGuildRequest{} }
func (m *JoinGuildRequest) String() string { return proto.CompactTextString(m) }
func (*JoinGuildRequest) ProtoMessage()    {}
func (*JoinGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{5}
}
func (m *JoinGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinGuildRequest.Merge(m, src)
}
func (m *JoinGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinGuildRequest proto.InternalMessageInfo

func (m *JoinGuildRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *JoinGuildRequest) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

type JoinGuildResponse struct {
}

func (m *JoinGuildResponse) Reset()         { *m = JoinGuildResponse{} }
func (m *JoinGuildResponse) String() string { return proto.CompactTextString(m) }
func (*JoinGuildResponse) ProtoMessage()    {}
func (*JoinGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{6}
}
func (m *JoinGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinGuildResponse.Merge(m, src)
}
func (m *JoinGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinGuildResponse proto.InternalMessageInfo

// GetJoinGuildsList
type GetJoinGuildsListRequest struct {
}

func (m *GetJoinGuildsListRequest) Reset()         { *m = GetJoinGuildsListRequest{} }
func (m *GetJoinGuildsListRequest) String() string { return proto.CompactTextString(m) }
func (*GetJoinGuildsListRequest) ProtoMessage()    {}
func (*GetJoinGuildsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{7}
}
func (m *GetJoinGuildsListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJoinGuildsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJoinGuildsListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJoinGuildsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJoinGuildsListRequest.Merge(m, src)
}
func (m *GetJoinGuildsListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJoinGuildsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJoinGuildsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJoinGuildsListRequest proto.InternalMessageInfo

type GetJoinGuildsListResponse struct {
	GuildsList []*Guild `protobuf:"bytes,1,rep,name=GuildsList,proto3" json:"GuildsList,omitempty"`
}

func (m *GetJoinGuildsListResponse) Reset()         { *m = GetJoinGuildsListResponse{} }
func (m *GetJoinGuildsListResponse) String() string { return proto.CompactTextString(m) }
func (*GetJoinGuildsListResponse) ProtoMessage()    {}
func (*GetJoinGuildsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{8}
}
func (m *GetJoinGuildsListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJoinGuildsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJoinGuildsListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJoinGuildsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJoinGuildsListResponse.Merge(m, src)
}
func (m *GetJoinGuildsListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetJoinGuildsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJoinGuildsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJoinGuildsListResponse proto.InternalMessageInfo

func (m *GetJoinGuildsListResponse) GetGuildsList() []*Guild {
	if m != nil {
		return m.GuildsList
	}
	return nil
}

// GetPlayerGuild
type GetPlayerGuildRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerGuildRequest) Reset()         { *m = GetPlayerGuildRequest{} }
func (m *GetPlayerGuildRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerGuildRequest) ProtoMessage()    {}
func (*GetPlayerGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{9}
}
func (m *GetPlayerGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerGuildRequest.Merge(m, src)
}
func (m *GetPlayerGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerGuildRequest proto.InternalMessageInfo

func (m *GetPlayerGuildRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerGuildResponse struct {
	InGuild bool   `protobuf:"varint,1,opt,name=InGuild,proto3" json:"InGuild,omitempty"`
	Guild   *Guild `protobuf:"bytes,2,opt,name=Guild,proto3" json:"Guild,omitempty"`
}

func (m *GetPlayerGuildResponse) Reset()         { *m = GetPlayerGuildResponse{} }
func (m *GetPlayerGuildResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerGuildResponse) ProtoMessage()    {}
func (*GetPlayerGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{10}
}
func (m *GetPlayerGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerGuildResponse.Merge(m, src)
}
func (m *GetPlayerGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerGuildResponse proto.InternalMessageInfo

func (m *GetPlayerGuildResponse) GetInGuild() bool {
	if m != nil {
		return m.InGuild
	}
	return false
}

func (m *GetPlayerGuildResponse) GetGuild() *Guild {
	if m != nil {
		return m.Guild
	}
	return nil
}

// LeaveGuild
type LeaveGuildRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *LeaveGuildRequest) Reset()         { *m = LeaveGuildRequest{} }
func (m *LeaveGuildRequest) String() string { return proto.CompactTextString(m) }
func (*LeaveGuildRequest) ProtoMessage()    {}
func (*LeaveGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{11}
}
func (m *LeaveGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveGuildRequest.Merge(m, src)
}
func (m *LeaveGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeaveGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveGuildRequest proto.InternalMessageInfo

func (m *LeaveGuildRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type LeaveGuildResponse struct {
}

func (m *LeaveGuildResponse) Reset()         { *m = LeaveGuildResponse{} }
func (m *LeaveGuildResponse) String() string { return proto.CompactTextString(m) }
func (*LeaveGuildResponse) ProtoMessage()    {}
func (*LeaveGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{12}
}
func (m *LeaveGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveGuildResponse.Merge(m, src)
}
func (m *LeaveGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeaveGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveGuildResponse proto.InternalMessageInfo

// GetPlayersGuild
type GetPlayersGuildRequest struct {
	GuildID uint32 `protobuf:"varint,1,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
}

func (m *GetPlayersGuildRequest) Reset()         { *m = GetPlayersGuildRequest{} }
func (m *GetPlayersGuildRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayersGuildRequest) ProtoMessage()    {}
func (*GetPlayersGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{13}
}
func (m *GetPlayersGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayersGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayersGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayersGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayersGuildRequest.Merge(m, src)
}
func (m *GetPlayersGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayersGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayersGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayersGuildRequest proto.InternalMessageInfo

func (m *GetPlayersGuildRequest) GetGuildID() uint32 {
	if m != nil {
		return m.GuildID
	}
	return 0
}

type GetPlayersGuildResponse struct {
	Players []*Player `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`
}

func (m *GetPlayersGuildResponse) Reset()         { *m = GetPlayersGuildResponse{} }
func (m *GetPlayersGuildResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayersGuildResponse) ProtoMessage()    {}
func (*GetPlayersGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{14}
}
func (m *GetPlayersGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayersGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayersGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayersGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayersGuildResponse.Merge(m, src)
}
func (m *GetPlayersGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayersGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayersGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayersGuildResponse proto.InternalMessageInfo

func (m *GetPlayersGuildResponse) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

// AddPlayerToGuild
type AddPlayerToGuildRequest struct {
	PlayerUsername string `protobuf:"bytes,1,opt,name=PlayerUsername,proto3" json:"PlayerUsername,omitempty"`
	GuildID        uint32 `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
}

func (m *AddPlayerToGuildRequest) Reset()         { *m = AddPlayerToGuildRequest{} }
func (m *AddPlayerToGuildRequest) String() string { return proto.CompactTextString(m) }
func (*AddPlayerToGuildRequest) ProtoMessage()    {}
func (*AddPlayerToGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{15}
}
func (m *AddPlayerToGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerToGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerToGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerToGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerToGuildRequest.Merge(m, src)
}
func (m *AddPlayerToGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerToGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerToGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerToGuildRequest proto.InternalMessageInfo

func (m *AddPlayerToGuildRequest) GetPlayerUsername() string {
	if m != nil {
		return m.PlayerUsername
	}
	return ""
}

func (m *AddPlayerToGuildRequest) GetGuildID() uint32 {
	if m != nil {
		return m.GuildID
	}
	return 0
}

type AddPlayerToGuildResponse struct {
}

func (m *AddPlayerToGuildResponse) Reset()         { *m = AddPlayerToGuildResponse{} }
func (m *AddPlayerToGuildResponse) String() string { return proto.CompactTextString(m) }
func (*AddPlayerToGuildResponse) ProtoMessage()    {}
func (*AddPlayerToGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{16}
}
func (m *AddPlayerToGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerToGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerToGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerToGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerToGuildResponse.Merge(m, src)
}
func (m *AddPlayerToGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerToGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerToGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerToGuildResponse proto.InternalMessageInfo

// RemovePlayerToGuild
type RemovePlayerToGuildRequest struct {
	PlayerUsername string `protobuf:"bytes,1,opt,name=PlayerUsername,proto3" json:"PlayerUsername,omitempty"`
	GuildID        uint32 `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
}

func (m *RemovePlayerToGuildRequest) Reset()         { *m = RemovePlayerToGuildRequest{} }
func (m *RemovePlayerToGuildRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerToGuildRequest) ProtoMessage()    {}
func (*RemovePlayerToGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{17}
}
func (m *RemovePlayerToGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerToGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerToGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerToGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerToGuildRequest.Merge(m, src)
}
func (m *RemovePlayerToGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerToGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerToGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerToGuildRequest proto.InternalMessageInfo

func (m *RemovePlayerToGuildRequest) GetPlayerUsername() string {
	if m != nil {
		return m.PlayerUsername
	}
	return ""
}

func (m *RemovePlayerToGuildRequest) GetGuildID() uint32 {
	if m != nil {
		return m.GuildID
	}
	return 0
}

type RemovePlayerToGuildResponse struct {
}

func (m *RemovePlayerToGuildResponse) Reset()         { *m = RemovePlayerToGuildResponse{} }
func (m *RemovePlayerToGuildResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerToGuildResponse) ProtoMessage()    {}
func (*RemovePlayerToGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{18}
}
func (m *RemovePlayerToGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePlayerToGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePlayerToGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePlayerToGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlayerToGuildResponse.Merge(m, src)
}
func (m *RemovePlayerToGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemovePlayerToGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlayerToGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlayerToGuildResponse proto.InternalMessageInfo

// ChangeVisibility
type ChangeVisibilityGuildRequest struct {
	Visibility bool   `protobuf:"varint,1,opt,name=Visibility,proto3" json:"Visibility,omitempty"`
	GuildID    uint32 `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
}

func (m *ChangeVisibilityGuildRequest) Reset()         { *m = ChangeVisibilityGuildRequest{} }
func (m *ChangeVisibilityGuildRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeVisibilityGuildRequest) ProtoMessage()    {}
func (*ChangeVisibilityGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{19}
}
func (m *ChangeVisibilityGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeVisibilityGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeVisibilityGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeVisibilityGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeVisibilityGuildRequest.Merge(m, src)
}
func (m *ChangeVisibilityGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChangeVisibilityGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeVisibilityGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeVisibilityGuildRequest proto.InternalMessageInfo

func (m *ChangeVisibilityGuildRequest) GetVisibility() bool {
	if m != nil {
		return m.Visibility
	}
	return false
}

func (m *ChangeVisibilityGuildRequest) GetGuildID() uint32 {
	if m != nil {
		return m.GuildID
	}
	return 0
}

type ChangeVisibilityGuildResponse struct {
}

func (m *ChangeVisibilityGuildResponse) Reset()         { *m = ChangeVisibilityGuildResponse{} }
func (m *ChangeVisibilityGuildResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeVisibilityGuildResponse) ProtoMessage()    {}
func (*ChangeVisibilityGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4cffb18d57fed, []int{20}
}
func (m *ChangeVisibilityGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeVisibilityGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeVisibilityGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeVisibilityGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeVisibilityGuildResponse.Merge(m, src)
}
func (m *ChangeVisibilityGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChangeVisibilityGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeVisibilityGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeVisibilityGuildResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Guild)(nil), "guild.Guild")
	proto.RegisterType((*CheckGuildNameRequest)(nil), "guild.CheckGuildNameRequest")
	proto.RegisterType((*CheckGuildNameResponse)(nil), "guild.CheckGuildNameResponse")
	proto.RegisterType((*CreateGuildRequest)(nil), "guild.CreateGuildRequest")
	proto.RegisterType((*CreateGuildResponse)(nil), "guild.CreateGuildResponse")
	proto.RegisterType((*JoinGuildRequest)(nil), "guild.JoinGuildRequest")
	proto.RegisterType((*JoinGuildResponse)(nil), "guild.JoinGuildResponse")
	proto.RegisterType((*GetJoinGuildsListRequest)(nil), "guild.GetJoinGuildsListRequest")
	proto.RegisterType((*GetJoinGuildsListResponse)(nil), "guild.GetJoinGuildsListResponse")
	proto.RegisterType((*GetPlayerGuildRequest)(nil), "guild.GetPlayerGuildRequest")
	proto.RegisterType((*GetPlayerGuildResponse)(nil), "guild.GetPlayerGuildResponse")
	proto.RegisterType((*LeaveGuildRequest)(nil), "guild.LeaveGuildRequest")
	proto.RegisterType((*LeaveGuildResponse)(nil), "guild.LeaveGuildResponse")
	proto.RegisterType((*GetPlayersGuildRequest)(nil), "guild.GetPlayersGuildRequest")
	proto.RegisterType((*GetPlayersGuildResponse)(nil), "guild.GetPlayersGuildResponse")
	proto.RegisterType((*AddPlayerToGuildRequest)(nil), "guild.AddPlayerToGuildRequest")
	proto.RegisterType((*AddPlayerToGuildResponse)(nil), "guild.AddPlayerToGuildResponse")
	proto.RegisterType((*RemovePlayerToGuildRequest)(nil), "guild.RemovePlayerToGuildRequest")
	proto.RegisterType((*RemovePlayerToGuildResponse)(nil), "guild.RemovePlayerToGuildResponse")
	proto.RegisterType((*ChangeVisibilityGuildRequest)(nil), "guild.ChangeVisibilityGuildRequest")
	proto.RegisterType((*ChangeVisibilityGuildResponse)(nil), "guild.ChangeVisibilityGuildResponse")
}

func init() { proto.RegisterFile("proto/guild.proto", fileDescriptor_2fe4cffb18d57fed) }

var fileDescriptor_2fe4cffb18d57fed = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0xcd, 0x6c, 0x5b, 0x93, 0x5c, 0x4d, 0x30, 0x53, 0xd3, 0x8e, 0x6b, 0xbb, 0x86, 0x41, 0x64,
	0x41, 0x49, 0xa1, 0x7d, 0x14, 0x04, 0x4d, 0x30, 0xac, 0x04, 0x95, 0xa5, 0x16, 0x51, 0x10, 0x36,
	0xcd, 0xa5, 0x5d, 0x4d, 0x77, 0xd7, 0xdd, 0x6d, 0x25, 0xff, 0xc2, 0x9f, 0xe5, 0x63, 0x1f, 0x7d,
	0x94, 0xe4, 0x8f, 0x48, 0x67, 0x66, 0x3f, 0x66, 0x5b, 0x25, 0x2f, 0xbe, 0xcd, 0x3d, 0x67, 0xe6,
	0x9c, 0x73, 0x6f, 0x6e, 0x16, 0x3a, 0x51, 0x1c, 0xa6, 0xe1, 0xde, 0xc9, 0xb9, 0x3f, 0x9b, 0xf6,
	0xc5, 0x99, 0x6e, 0x88, 0xc2, 0xa4, 0x92, 0x89, 0x66, 0xde, 0x1c, 0x63, 0x49, 0xf1, 0x63, 0xd8,
	0x18, 0x5d, 0x91, 0xb4, 0x0d, 0x86, 0x33, 0x64, 0xa4, 0x47, 0xec, 0x96, 0x6b, 0x38, 0x43, 0x4a,
	0x61, 0xfd, 0x8d, 0x77, 0x86, 0xcc, 0xe8, 0x11, 0xbb, 0xe9, 0x8a, 0x33, 0xdd, 0x81, 0xa6, 0xb8,
	0x7c, 0x38, 0x8f, 0x90, 0x35, 0x7b, 0xc4, 0x6e, 0xb8, 0x05, 0x40, 0x19, 0xd4, 0xdf, 0x7e, 0x0f,
	0x30, 0x76, 0x86, 0xac, 0x25, 0x64, 0xb2, 0x92, 0x3f, 0x81, 0xee, 0xe0, 0x14, 0x8f, 0xbf, 0x8a,
	0xbb, 0x57, 0x4a, 0x2e, 0x7e, 0x3b, 0xc7, 0x24, 0xcd, 0x4d, 0x48, 0x61, 0xc2, 0x9f, 0xc3, 0x56,
	0xf5, 0x72, 0x12, 0x85, 0x41, 0x82, 0xf4, 0x11, 0xb4, 0x72, 0xf0, 0x55, 0x8c, 0xf2, 0x59, 0xc3,
	0xd5, 0x41, 0xfe, 0x05, 0xe8, 0x20, 0x46, 0x2f, 0x45, 0x01, 0x67, 0x4e, 0x59, 0xf4, 0x92, 0x5d,
	0x01, 0x94, 0xa3, 0x1b, 0x5a, 0x74, 0xbd, 0xe5, 0xb5, 0x4a, 0xcb, 0xbc, 0x0b, 0x9b, 0x9a, 0x97,
	0x0c, 0xca, 0xc7, 0x70, 0xf7, 0x75, 0xe8, 0x07, 0x5a, 0x00, 0x13, 0x1a, 0xef, 0xc4, 0xe0, 0xf3,
	0x29, 0xe7, 0xb5, 0x1e, 0xce, 0xa8, 0x84, 0xe3, 0x9b, 0xd0, 0x29, 0xa9, 0x29, 0x0b, 0x13, 0xd8,
	0x08, 0xd3, 0x1c, 0x4f, 0xc6, 0x7e, 0x92, 0x2a, 0x2b, 0xee, 0xc0, 0xfd, 0x1b, 0x38, 0x35, 0xc4,
	0xa7, 0x00, 0x05, 0xca, 0x48, 0x6f, 0xcd, 0xbe, 0xbd, 0x7f, 0xa7, 0x2f, 0xb7, 0x45, 0x5a, 0x94,
	0x78, 0x7e, 0x00, 0xdd, 0x11, 0xa6, 0x32, 0xe8, 0xaa, 0xed, 0xf0, 0x23, 0xd8, 0xaa, 0x3e, 0x52,
	0xe6, 0x0c, 0xea, 0x8e, 0x0c, 0xa5, 0x7e, 0xbb, 0xac, 0xa4, 0x5c, 0xed, 0xa1, 0x68, 0xbf, 0x9a,
	0x48, 0x52, 0x7c, 0x0f, 0x3a, 0x63, 0xf4, 0x2e, 0x70, 0xe5, 0x20, 0xf7, 0x80, 0x96, 0x1f, 0xa8,
	0xd1, 0xed, 0x97, 0xe2, 0x25, 0x9a, 0x16, 0x83, 0xba, 0xa8, 0x73, 0xa9, 0xac, 0xe4, 0x03, 0xd8,
	0xbe, 0xf6, 0x46, 0xf5, 0x64, 0x43, 0x5d, 0xe1, 0x6a, 0x9a, 0xed, 0xbe, 0xfa, 0x87, 0x49, 0xd8,
	0xcd, 0x68, 0xfe, 0x09, 0xb6, 0x5f, 0x4c, 0xa7, 0xb2, 0x3a, 0x0c, 0x35, 0xe7, 0xc7, 0xd0, 0x96,
	0xf8, 0xfb, 0x04, 0xe3, 0xa0, 0xd8, 0xd1, 0x0a, 0x5a, 0x4e, 0x68, 0xe8, 0x09, 0x4d, 0x60, 0xd7,
	0xc5, 0x55, 0xc7, 0x9f, 0xc1, 0x74, 0xf1, 0x2c, 0xbc, 0xc0, 0xff, 0xe4, 0xbd, 0x0b, 0x0f, 0x6e,
	0xd4, 0x57, 0xf6, 0x1f, 0x60, 0x67, 0x70, 0xea, 0x05, 0x27, 0x78, 0xe4, 0x27, 0xfe, 0xc4, 0x9f,
	0xf9, 0xe9, 0x5c, 0x0b, 0x60, 0x01, 0x14, 0x8c, 0x5a, 0x8c, 0x12, 0xf2, 0x0f, 0xe3, 0x87, 0xb0,
	0xfb, 0x17, 0x65, 0x69, 0xfd, 0xd2, 0xfa, 0xb9, 0xb0, 0xc8, 0xe5, 0xc2, 0x22, 0xbf, 0x17, 0x16,
	0xf9, 0xb1, 0xb4, 0x6a, 0x97, 0x4b, 0xab, 0xf6, 0x6b, 0x69, 0xd5, 0x3e, 0xae, 0xf7, 0x9f, 0x45,
	0x93, 0xc9, 0x2d, 0xf1, 0x15, 0x3c, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x12, 0x9d, 0x90, 0x7b,
	0x35, 0x05, 0x00, 0x00,
}

func (m *Guild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x68
	}
	if m.GuildType {
		i--
		if m.GuildType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckGuildNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckGuildNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckGuildNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckGuildNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckGuildNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckGuildNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GuildNameFree {
		i--
		if m.GuildNameFree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GuildType {
		i--
		if m.GuildType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OwnerID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *JoinGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JoinGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetJoinGuildsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJoinGuildsListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJoinGuildsListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetJoinGuildsListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJoinGuildsListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJoinGuildsListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildsList) > 0 {
		for iNdEx := len(m.GuildsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GuildsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuild(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Guild != nil {
		{
			size, err := m.Guild.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuild(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InGuild {
		i--
		if m.InGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeaveGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeaveGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPlayersGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayersGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayersGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GuildID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayersGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayersGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayersGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuild(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddPlayerToGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerToGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerToGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GuildID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerUsername) > 0 {
		i -= len(m.PlayerUsername)
		copy(dAtA[i:], m.PlayerUsername)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.PlayerUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPlayerToGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerToGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerToGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemovePlayerToGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerToGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerToGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GuildID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerUsername) > 0 {
		i -= len(m.PlayerUsername)
		copy(dAtA[i:], m.PlayerUsername)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.PlayerUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemovePlayerToGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePlayerToGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePlayerToGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeVisibilityGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeVisibilityGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeVisibilityGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GuildID != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildID))
		i--
		dAtA[i] = 0x10
	}
	if m.Visibility {
		i--
		if m.Visibility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangeVisibilityGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeVisibilityGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeVisibilityGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuild(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Guild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGuild(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.GuildType {
		n += 2
	}
	if m.OwnerID != 0 {
		n += 1 + sovGuild(uint64(m.OwnerID))
	}
	return n
}

func (m *CheckGuildNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *CheckGuildNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GuildNameFree {
		n += 2
	}
	return n
}

func (m *CreateGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.OwnerID != 0 {
		n += 1 + sovGuild(uint64(m.OwnerID))
	}
	if m.GuildType {
		n += 2
	}
	return n
}

func (m *CreateGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *JoinGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovGuild(uint64(m.PlayerID))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *JoinGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetJoinGuildsListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetJoinGuildsListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuildsList) > 0 {
		for _, e := range m.GuildsList {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GetPlayerGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovGuild(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InGuild {
		n += 2
	}
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *LeaveGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovGuild(uint64(m.PlayerID))
	}
	return n
}

func (m *LeaveGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPlayersGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GuildID != 0 {
		n += 1 + sovGuild(uint64(m.GuildID))
	}
	return n
}

func (m *GetPlayersGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *AddPlayerToGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerUsername)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.GuildID != 0 {
		n += 1 + sovGuild(uint64(m.GuildID))
	}
	return n
}

func (m *AddPlayerToGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemovePlayerToGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerUsername)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.GuildID != 0 {
		n += 1 + sovGuild(uint64(m.GuildID))
	}
	return n
}

func (m *RemovePlayerToGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeVisibilityGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Visibility {
		n += 2
	}
	if m.GuildID != 0 {
		n += 1 + sovGuild(uint64(m.GuildID))
	}
	return n
}

func (m *ChangeVisibilityGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGuild(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Guild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuildType = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckGuildNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckGuildNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckGuildNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckGuildNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckGuildNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckGuildNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildNameFree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuildNameFree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuildType = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJoinGuildsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJoinGuildsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJoinGuildsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJoinGuildsListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJoinGuildsListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJoinGuildsListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildsList = append(m.GuildsList, &Guild{})
			if err := m.GuildsList[len(m.GuildsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InGuild = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guild == nil {
				m.Guild = &Guild{}
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayersGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayersGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayersGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildID", wireType)
			}
			m.GuildID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayersGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayersGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayersGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &Player{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerToGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerToGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerToGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildID", wireType)
			}
			m.GuildID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerToGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerToGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerToGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerToGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerToGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerToGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildID", wireType)
			}
			m.GuildID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePlayerToGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePlayerToGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePlayerToGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeVisibilityGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeVisibilityGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeVisibilityGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Visibility = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildID", wireType)
			}
			m.GuildID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeVisibilityGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeVisibilityGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeVisibilityGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuild
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuild
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuild        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuild = fmt.Errorf("proto: unexpected end of group")
)
