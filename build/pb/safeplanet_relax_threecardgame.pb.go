// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/safeplanet_relax_threecardgame.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ThreeCardGamePlay
type ThreeCardGamePlayRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *ThreeCardGamePlayRequest) Reset()         { *m = ThreeCardGamePlayRequest{} }
func (m *ThreeCardGamePlayRequest) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGamePlayRequest) ProtoMessage()    {}
func (*ThreeCardGamePlayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{0}
}
func (m *ThreeCardGamePlayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGamePlayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGamePlayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGamePlayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGamePlayRequest.Merge(m, src)
}
func (m *ThreeCardGamePlayRequest) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGamePlayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGamePlayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGamePlayRequest proto.InternalMessageInfo

func (m *ThreeCardGamePlayRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type ThreeCardGamePlayResponse struct {
}

func (m *ThreeCardGamePlayResponse) Reset()         { *m = ThreeCardGamePlayResponse{} }
func (m *ThreeCardGamePlayResponse) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGamePlayResponse) ProtoMessage()    {}
func (*ThreeCardGamePlayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{1}
}
func (m *ThreeCardGamePlayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGamePlayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGamePlayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGamePlayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGamePlayResponse.Merge(m, src)
}
func (m *ThreeCardGamePlayResponse) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGamePlayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGamePlayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGamePlayResponse proto.InternalMessageInfo

// ThreeCardGameCheck
type ThreeCardGameCheckRequest struct {
	PlayerID     uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlayerChoice int32  `protobuf:"varint,2,opt,name=PlayerChoice,proto3" json:"PlayerChoice,omitempty"`
}

func (m *ThreeCardGameCheckRequest) Reset()         { *m = ThreeCardGameCheckRequest{} }
func (m *ThreeCardGameCheckRequest) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGameCheckRequest) ProtoMessage()    {}
func (*ThreeCardGameCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{2}
}
func (m *ThreeCardGameCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGameCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGameCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGameCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGameCheckRequest.Merge(m, src)
}
func (m *ThreeCardGameCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGameCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGameCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGameCheckRequest proto.InternalMessageInfo

func (m *ThreeCardGameCheckRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *ThreeCardGameCheckRequest) GetPlayerChoice() int32 {
	if m != nil {
		return m.PlayerChoice
	}
	return 0
}

type ThreeCardGameCheckResponse struct {
	InGame    bool        `protobuf:"varint,1,opt,name=InGame,proto3" json:"InGame,omitempty"`
	Win       bool        `protobuf:"varint,2,opt,name=Win,proto3" json:"Win,omitempty"`
	Resource  *Resource   `protobuf:"bytes,3,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Resources []*Resource `protobuf:"bytes,4,rep,name=Resources,proto3" json:"Resources,omitempty"`
}

func (m *ThreeCardGameCheckResponse) Reset()         { *m = ThreeCardGameCheckResponse{} }
func (m *ThreeCardGameCheckResponse) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGameCheckResponse) ProtoMessage()    {}
func (*ThreeCardGameCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{3}
}
func (m *ThreeCardGameCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGameCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGameCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGameCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGameCheckResponse.Merge(m, src)
}
func (m *ThreeCardGameCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGameCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGameCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGameCheckResponse proto.InternalMessageInfo

func (m *ThreeCardGameCheckResponse) GetInGame() bool {
	if m != nil {
		return m.InGame
	}
	return false
}

func (m *ThreeCardGameCheckResponse) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *ThreeCardGameCheckResponse) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ThreeCardGameCheckResponse) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// ThreeCardGameRecoverPlay
type ThreeCardGameRecoverPlayRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *ThreeCardGameRecoverPlayRequest) Reset()         { *m = ThreeCardGameRecoverPlayRequest{} }
func (m *ThreeCardGameRecoverPlayRequest) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGameRecoverPlayRequest) ProtoMessage()    {}
func (*ThreeCardGameRecoverPlayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{4}
}
func (m *ThreeCardGameRecoverPlayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGameRecoverPlayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGameRecoverPlayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGameRecoverPlayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGameRecoverPlayRequest.Merge(m, src)
}
func (m *ThreeCardGameRecoverPlayRequest) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGameRecoverPlayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGameRecoverPlayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGameRecoverPlayRequest proto.InternalMessageInfo

func (m *ThreeCardGameRecoverPlayRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type ThreeCardGameRecoverPlayResponse struct {
	InGame    bool        `protobuf:"varint,1,opt,name=InGame,proto3" json:"InGame,omitempty"`
	Win       bool        `protobuf:"varint,2,opt,name=Win,proto3" json:"Win,omitempty"`
	Resource  *Resource   `protobuf:"bytes,3,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Resources []*Resource `protobuf:"bytes,4,rep,name=Resources,proto3" json:"Resources,omitempty"`
}

func (m *ThreeCardGameRecoverPlayResponse) Reset()         { *m = ThreeCardGameRecoverPlayResponse{} }
func (m *ThreeCardGameRecoverPlayResponse) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGameRecoverPlayResponse) ProtoMessage()    {}
func (*ThreeCardGameRecoverPlayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{5}
}
func (m *ThreeCardGameRecoverPlayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGameRecoverPlayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGameRecoverPlayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGameRecoverPlayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGameRecoverPlayResponse.Merge(m, src)
}
func (m *ThreeCardGameRecoverPlayResponse) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGameRecoverPlayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGameRecoverPlayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGameRecoverPlayResponse proto.InternalMessageInfo

func (m *ThreeCardGameRecoverPlayResponse) GetInGame() bool {
	if m != nil {
		return m.InGame
	}
	return false
}

func (m *ThreeCardGameRecoverPlayResponse) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *ThreeCardGameRecoverPlayResponse) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ThreeCardGameRecoverPlayResponse) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// ThreeCardGameEndGame
type ThreeCardGameEndGameRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *ThreeCardGameEndGameRequest) Reset()         { *m = ThreeCardGameEndGameRequest{} }
func (m *ThreeCardGameEndGameRequest) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGameEndGameRequest) ProtoMessage()    {}
func (*ThreeCardGameEndGameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{6}
}
func (m *ThreeCardGameEndGameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGameEndGameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGameEndGameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGameEndGameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGameEndGameRequest.Merge(m, src)
}
func (m *ThreeCardGameEndGameRequest) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGameEndGameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGameEndGameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGameEndGameRequest proto.InternalMessageInfo

func (m *ThreeCardGameEndGameRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type ThreeCardGameEndGameResponse struct {
}

func (m *ThreeCardGameEndGameResponse) Reset()         { *m = ThreeCardGameEndGameResponse{} }
func (m *ThreeCardGameEndGameResponse) String() string { return proto.CompactTextString(m) }
func (*ThreeCardGameEndGameResponse) ProtoMessage()    {}
func (*ThreeCardGameEndGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95d1226c6ccff680, []int{7}
}
func (m *ThreeCardGameEndGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeCardGameEndGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeCardGameEndGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeCardGameEndGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeCardGameEndGameResponse.Merge(m, src)
}
func (m *ThreeCardGameEndGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *ThreeCardGameEndGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeCardGameEndGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeCardGameEndGameResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ThreeCardGamePlayRequest)(nil), "safeplanet_relax_threecardgame.ThreeCardGamePlayRequest")
	proto.RegisterType((*ThreeCardGamePlayResponse)(nil), "safeplanet_relax_threecardgame.ThreeCardGamePlayResponse")
	proto.RegisterType((*ThreeCardGameCheckRequest)(nil), "safeplanet_relax_threecardgame.ThreeCardGameCheckRequest")
	proto.RegisterType((*ThreeCardGameCheckResponse)(nil), "safeplanet_relax_threecardgame.ThreeCardGameCheckResponse")
	proto.RegisterType((*ThreeCardGameRecoverPlayRequest)(nil), "safeplanet_relax_threecardgame.ThreeCardGameRecoverPlayRequest")
	proto.RegisterType((*ThreeCardGameRecoverPlayResponse)(nil), "safeplanet_relax_threecardgame.ThreeCardGameRecoverPlayResponse")
	proto.RegisterType((*ThreeCardGameEndGameRequest)(nil), "safeplanet_relax_threecardgame.ThreeCardGameEndGameRequest")
	proto.RegisterType((*ThreeCardGameEndGameResponse)(nil), "safeplanet_relax_threecardgame.ThreeCardGameEndGameResponse")
}

func init() {
	proto.RegisterFile("proto/safeplanet_relax_threecardgame.proto", fileDescriptor_95d1226c6ccff680)
}

var fileDescriptor_95d1226c6ccff680 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x4c, 0x4b, 0x2d, 0xc8, 0x49, 0xcc, 0x4b, 0x2d, 0x89, 0x2f, 0x4a, 0xcd,
	0x49, 0xac, 0x88, 0x2f, 0xc9, 0x28, 0x4a, 0x4d, 0x4d, 0x4e, 0x2c, 0x4a, 0x49, 0x4f, 0xcc, 0x4d,
	0xd5, 0x03, 0x2b, 0x12, 0x92, 0xc3, 0xaf, 0x4a, 0x4a, 0x04, 0x62, 0x56, 0x51, 0x6a, 0x71, 0x7e,
	0x69, 0x51, 0x32, 0x54, 0x97, 0x92, 0x19, 0x97, 0x44, 0x08, 0x48, 0x99, 0x73, 0x62, 0x51, 0x8a,
	0x7b, 0x62, 0x6e, 0x6a, 0x40, 0x4e, 0x62, 0x65, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90,
	0x14, 0x17, 0x07, 0x88, 0x9b, 0x5a, 0xe4, 0xe9, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1b, 0x04,
	0xe7, 0x2b, 0x49, 0x73, 0x49, 0x62, 0xd1, 0x57, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0xaa, 0x14, 0x8d,
	0x26, 0xe9, 0x9c, 0x91, 0x9a, 0x9c, 0x4d, 0x84, 0xa9, 0x42, 0x4a, 0x5c, 0x3c, 0x10, 0xb6, 0x73,
	0x46, 0x7e, 0x66, 0x72, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x8a, 0x98, 0xd2, 0x0a,
	0x46, 0x2e, 0x29, 0x6c, 0xa6, 0x43, 0xec, 0x16, 0x12, 0xe3, 0x62, 0xf3, 0xcc, 0x03, 0x09, 0x83,
	0x0d, 0xe7, 0x08, 0x82, 0xf2, 0x84, 0x04, 0xb8, 0x98, 0xc3, 0x33, 0xf3, 0xc0, 0x26, 0x72, 0x04,
	0x81, 0x98, 0x42, 0x7a, 0x5c, 0x1c, 0x41, 0xd0, 0xc0, 0x90, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x36,
	0x12, 0xd2, 0x83, 0x87, 0x0e, 0x4c, 0x26, 0x08, 0xae, 0x46, 0xc8, 0x80, 0x8b, 0x13, 0xc6, 0x2e,
	0x96, 0x60, 0x51, 0x60, 0xc6, 0xa1, 0x01, 0xa1, 0x48, 0xc9, 0x96, 0x4b, 0x1e, 0xc5, 0xa5, 0x41,
	0xa9, 0xc9, 0xf9, 0x65, 0xa9, 0x45, 0xc4, 0x86, 0xf1, 0x3a, 0x46, 0x2e, 0x05, 0xdc, 0xfa, 0x07,
	0xa1, 0x7f, 0x2d, 0xb9, 0xa4, 0x51, 0xdc, 0xeb, 0x9a, 0x07, 0x75, 0x36, 0x61, 0xbf, 0xca, 0x71,
	0xc9, 0x60, 0xd7, 0x0a, 0xf1, 0xa6, 0x93, 0xdc, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x44, 0xb1, 0xe8, 0x59, 0x17, 0x24, 0x25, 0xb1, 0x81, 0x93, 0xb3, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0x85, 0x6b, 0x88, 0x32, 0x03, 0x00, 0x00,
}

func (m *ThreeCardGamePlayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGamePlayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGamePlayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeCardGamePlayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGamePlayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGamePlayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ThreeCardGameCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGameCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGameCheckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerChoice != 0 {
		i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(m.PlayerChoice))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeCardGameCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGameCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGameCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Win {
		i--
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.InGame {
		i--
		if m.InGame {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeCardGameRecoverPlayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGameRecoverPlayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGameRecoverPlayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeCardGameRecoverPlayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGameRecoverPlayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGameRecoverPlayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Win {
		i--
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.InGame {
		i--
		if m.InGame {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeCardGameEndGameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGameEndGameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGameEndGameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintSafeplanetRelaxThreecardgame(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeCardGameEndGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeCardGameEndGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeCardGameEndGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSafeplanetRelaxThreecardgame(dAtA []byte, offset int, v uint64) int {
	offset -= sovSafeplanetRelaxThreecardgame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ThreeCardGamePlayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovSafeplanetRelaxThreecardgame(uint64(m.PlayerID))
	}
	return n
}

func (m *ThreeCardGamePlayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ThreeCardGameCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovSafeplanetRelaxThreecardgame(uint64(m.PlayerID))
	}
	if m.PlayerChoice != 0 {
		n += 1 + sovSafeplanetRelaxThreecardgame(uint64(m.PlayerChoice))
	}
	return n
}

func (m *ThreeCardGameCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InGame {
		n += 2
	}
	if m.Win {
		n += 2
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovSafeplanetRelaxThreecardgame(uint64(l))
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovSafeplanetRelaxThreecardgame(uint64(l))
		}
	}
	return n
}

func (m *ThreeCardGameRecoverPlayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovSafeplanetRelaxThreecardgame(uint64(m.PlayerID))
	}
	return n
}

func (m *ThreeCardGameRecoverPlayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InGame {
		n += 2
	}
	if m.Win {
		n += 2
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovSafeplanetRelaxThreecardgame(uint64(l))
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovSafeplanetRelaxThreecardgame(uint64(l))
		}
	}
	return n
}

func (m *ThreeCardGameEndGameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovSafeplanetRelaxThreecardgame(uint64(m.PlayerID))
	}
	return n
}

func (m *ThreeCardGameEndGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSafeplanetRelaxThreecardgame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSafeplanetRelaxThreecardgame(x uint64) (n int) {
	return sovSafeplanetRelaxThreecardgame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ThreeCardGamePlayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGamePlayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGamePlayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeCardGamePlayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGamePlayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGamePlayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeCardGameCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGameCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGameCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerChoice", wireType)
			}
			m.PlayerChoice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerChoice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeCardGameCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGameCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGameCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InGame", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InGame = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeCardGameRecoverPlayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGameRecoverPlayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGameRecoverPlayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeCardGameRecoverPlayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGameRecoverPlayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGameRecoverPlayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InGame", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InGame = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeCardGameEndGameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGameEndGameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGameEndGameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeCardGameEndGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeCardGameEndGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeCardGameEndGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSafeplanetRelaxThreecardgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSafeplanetRelaxThreecardgame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSafeplanetRelaxThreecardgame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSafeplanetRelaxThreecardgame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSafeplanetRelaxThreecardgame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSafeplanetRelaxThreecardgame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSafeplanetRelaxThreecardgame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSafeplanetRelaxThreecardgame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSafeplanetRelaxThreecardgame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSafeplanetRelaxThreecardgame = fmt.Errorf("proto: unexpected end of group")
)
