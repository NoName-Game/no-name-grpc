// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/player_titan_drop.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlayerTitanDrop struct {
	ID              uint32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TitanID         uint32  `protobuf:"varint,2,opt,name=TitanID,proto3" json:"TitanID,omitempty"`
	Titan           *Titan  `protobuf:"bytes,3,opt,name=Titan,proto3" json:"Titan,omitempty"`
	PlayerID        uint32  `protobuf:"varint,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Player          *Player `protobuf:"bytes,5,opt,name=Player,proto3" json:"Player,omitempty"`
	DamageInflicted int64   `protobuf:"varint,6,opt,name=DamageInflicted,proto3" json:"DamageInflicted,omitempty"`
	Money           int32   `protobuf:"varint,7,opt,name=Money,proto3" json:"Money,omitempty"`
	Diamond         int32   `protobuf:"varint,8,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	Experience      int32   `protobuf:"varint,9,opt,name=Experience,proto3" json:"Experience,omitempty"`
	WeaponID        uint32  `protobuf:"varint,10,opt,name=WeaponID,proto3" json:"WeaponID,omitempty"`
	Weapon          *Weapon `protobuf:"bytes,11,opt,name=Weapon,proto3" json:"Weapon,omitempty"`
	ArmorID         uint32  `protobuf:"varint,12,opt,name=ArmorID,proto3" json:"ArmorID,omitempty"`
	Armor           *Armor  `protobuf:"bytes,13,opt,name=Armor,proto3" json:"Armor,omitempty"`
	ToNotify        bool    `protobuf:"varint,14,opt,name=ToNotify,proto3" json:"ToNotify,omitempty"`
}

func (m *PlayerTitanDrop) Reset()         { *m = PlayerTitanDrop{} }
func (m *PlayerTitanDrop) String() string { return proto.CompactTextString(m) }
func (*PlayerTitanDrop) ProtoMessage()    {}
func (*PlayerTitanDrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_61f12be1b3a4f3e6, []int{0}
}
func (m *PlayerTitanDrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerTitanDrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerTitanDrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerTitanDrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTitanDrop.Merge(m, src)
}
func (m *PlayerTitanDrop) XXX_Size() int {
	return m.Size()
}
func (m *PlayerTitanDrop) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTitanDrop.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTitanDrop proto.InternalMessageInfo

func (m *PlayerTitanDrop) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PlayerTitanDrop) GetTitanID() uint32 {
	if m != nil {
		return m.TitanID
	}
	return 0
}

func (m *PlayerTitanDrop) GetTitan() *Titan {
	if m != nil {
		return m.Titan
	}
	return nil
}

func (m *PlayerTitanDrop) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *PlayerTitanDrop) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *PlayerTitanDrop) GetDamageInflicted() int64 {
	if m != nil {
		return m.DamageInflicted
	}
	return 0
}

func (m *PlayerTitanDrop) GetMoney() int32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *PlayerTitanDrop) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *PlayerTitanDrop) GetExperience() int32 {
	if m != nil {
		return m.Experience
	}
	return 0
}

func (m *PlayerTitanDrop) GetWeaponID() uint32 {
	if m != nil {
		return m.WeaponID
	}
	return 0
}

func (m *PlayerTitanDrop) GetWeapon() *Weapon {
	if m != nil {
		return m.Weapon
	}
	return nil
}

func (m *PlayerTitanDrop) GetArmorID() uint32 {
	if m != nil {
		return m.ArmorID
	}
	return 0
}

func (m *PlayerTitanDrop) GetArmor() *Armor {
	if m != nil {
		return m.Armor
	}
	return nil
}

func (m *PlayerTitanDrop) GetToNotify() bool {
	if m != nil {
		return m.ToNotify
	}
	return false
}

// GetTitanDropToNotify
type GetTitanDropToNotifyRequest struct {
}

func (m *GetTitanDropToNotifyRequest) Reset()         { *m = GetTitanDropToNotifyRequest{} }
func (m *GetTitanDropToNotifyRequest) String() string { return proto.CompactTextString(m) }
func (*GetTitanDropToNotifyRequest) ProtoMessage()    {}
func (*GetTitanDropToNotifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61f12be1b3a4f3e6, []int{1}
}
func (m *GetTitanDropToNotifyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanDropToNotifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanDropToNotifyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanDropToNotifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanDropToNotifyRequest.Merge(m, src)
}
func (m *GetTitanDropToNotifyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanDropToNotifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanDropToNotifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanDropToNotifyRequest proto.InternalMessageInfo

type GetTitanDropToNotifyResponse struct {
	TitanDrops []*PlayerTitanDrop `protobuf:"bytes,1,rep,name=TitanDrops,proto3" json:"TitanDrops,omitempty"`
}

func (m *GetTitanDropToNotifyResponse) Reset()         { *m = GetTitanDropToNotifyResponse{} }
func (m *GetTitanDropToNotifyResponse) String() string { return proto.CompactTextString(m) }
func (*GetTitanDropToNotifyResponse) ProtoMessage()    {}
func (*GetTitanDropToNotifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61f12be1b3a4f3e6, []int{2}
}
func (m *GetTitanDropToNotifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTitanDropToNotifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTitanDropToNotifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTitanDropToNotifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTitanDropToNotifyResponse.Merge(m, src)
}
func (m *GetTitanDropToNotifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTitanDropToNotifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTitanDropToNotifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTitanDropToNotifyResponse proto.InternalMessageInfo

func (m *GetTitanDropToNotifyResponse) GetTitanDrops() []*PlayerTitanDrop {
	if m != nil {
		return m.TitanDrops
	}
	return nil
}

// SetTitanDropNotified
type SetTitanDropNotifiedRequest struct {
	TitanDropID uint32 `protobuf:"varint,1,opt,name=TitanDropID,proto3" json:"TitanDropID,omitempty"`
}

func (m *SetTitanDropNotifiedRequest) Reset()         { *m = SetTitanDropNotifiedRequest{} }
func (m *SetTitanDropNotifiedRequest) String() string { return proto.CompactTextString(m) }
func (*SetTitanDropNotifiedRequest) ProtoMessage()    {}
func (*SetTitanDropNotifiedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61f12be1b3a4f3e6, []int{3}
}
func (m *SetTitanDropNotifiedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetTitanDropNotifiedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetTitanDropNotifiedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetTitanDropNotifiedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTitanDropNotifiedRequest.Merge(m, src)
}
func (m *SetTitanDropNotifiedRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetTitanDropNotifiedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTitanDropNotifiedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetTitanDropNotifiedRequest proto.InternalMessageInfo

func (m *SetTitanDropNotifiedRequest) GetTitanDropID() uint32 {
	if m != nil {
		return m.TitanDropID
	}
	return 0
}

type SetTitanDropNotifiedResponse struct {
}

func (m *SetTitanDropNotifiedResponse) Reset()         { *m = SetTitanDropNotifiedResponse{} }
func (m *SetTitanDropNotifiedResponse) String() string { return proto.CompactTextString(m) }
func (*SetTitanDropNotifiedResponse) ProtoMessage()    {}
func (*SetTitanDropNotifiedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61f12be1b3a4f3e6, []int{4}
}
func (m *SetTitanDropNotifiedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetTitanDropNotifiedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetTitanDropNotifiedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetTitanDropNotifiedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTitanDropNotifiedResponse.Merge(m, src)
}
func (m *SetTitanDropNotifiedResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetTitanDropNotifiedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTitanDropNotifiedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetTitanDropNotifiedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PlayerTitanDrop)(nil), "player_titan_drop.PlayerTitanDrop")
	proto.RegisterType((*GetTitanDropToNotifyRequest)(nil), "player_titan_drop.GetTitanDropToNotifyRequest")
	proto.RegisterType((*GetTitanDropToNotifyResponse)(nil), "player_titan_drop.GetTitanDropToNotifyResponse")
	proto.RegisterType((*SetTitanDropNotifiedRequest)(nil), "player_titan_drop.SetTitanDropNotifiedRequest")
	proto.RegisterType((*SetTitanDropNotifiedResponse)(nil), "player_titan_drop.SetTitanDropNotifiedResponse")
}

func init() { proto.RegisterFile("proto/player_titan_drop.proto", fileDescriptor_61f12be1b3a4f3e6) }

var fileDescriptor_61f12be1b3a4f3e6 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x26, 0x4d, 0x1a, 0x26, 0x6d, 0xaa, 0xae, 0x38, 0x8c, 0xd2, 0x76, 0x65, 0xf9, 0x80,
	0x7c, 0x32, 0x52, 0x39, 0x72, 0x40, 0x54, 0x8b, 0x90, 0x0f, 0x20, 0xb4, 0x54, 0x42, 0xe2, 0x52,
	0x39, 0xcd, 0x16, 0x59, 0x6a, 0xbc, 0x8b, 0x6d, 0x04, 0x79, 0x0b, 0xde, 0x87, 0x17, 0xe0, 0xd8,
	0x23, 0x47, 0x94, 0xbc, 0x08, 0xda, 0xd9, 0xb5, 0x65, 0xda, 0xde, 0xe6, 0xfb, 0xbe, 0xf9, 0xf9,
	0x76, 0x76, 0xe0, 0xcc, 0x56, 0xa6, 0x31, 0xcf, 0xed, 0x6d, 0xbe, 0xd1, 0xd5, 0x55, 0x53, 0x34,
	0x79, 0x79, 0xb5, 0xaa, 0x8c, 0x4d, 0x89, 0xe7, 0xc7, 0x0f, 0x84, 0x05, 0xef, 0x57, 0xf8, 0xb4,
	0xc5, 0xb1, 0xe7, 0x28, 0x2b, 0x50, 0x21, 0xed, 0xbb, 0xce, 0xad, 0x29, 0xff, 0x4f, 0xcb, 0xab,
	0xb5, 0x09, 0x95, 0xf1, 0xaf, 0x11, 0x1c, 0x7d, 0xa0, 0x56, 0x97, 0xae, 0x58, 0x56, 0xc6, 0xf2,
	0x39, 0x0c, 0x33, 0x89, 0x2c, 0x62, 0xc9, 0xa1, 0x1a, 0x66, 0x92, 0x23, 0xec, 0x93, 0x98, 0x49,
	0x1c, 0x12, 0xd9, 0x42, 0x1e, 0xc3, 0x98, 0x42, 0x1c, 0x45, 0x2c, 0x99, 0x9d, 0x1f, 0xa4, 0xde,
	0x01, 0x71, 0xca, 0x4b, 0x7c, 0x01, 0x53, 0x3f, 0x20, 0x93, 0xb8, 0x47, 0xe5, 0x1d, 0xe6, 0xcf,
	0x60, 0xe2, 0x63, 0x1c, 0x53, 0x83, 0x79, 0x1a, 0x9e, 0xe5, 0x59, 0x15, 0x54, 0x9e, 0xc0, 0x91,
	0xcc, 0xd7, 0xf9, 0x17, 0x9d, 0x95, 0x37, 0xb7, 0xc5, 0x75, 0xa3, 0x57, 0x38, 0x89, 0x58, 0x32,
	0x52, 0xf7, 0x69, 0xfe, 0x14, 0xc6, 0xef, 0x4c, 0xa9, 0x37, 0xb8, 0x1f, 0xb1, 0x64, 0xac, 0x3c,
	0x70, 0x2f, 0x90, 0x45, 0xbe, 0x36, 0xe5, 0x0a, 0xa7, 0xc4, 0xb7, 0x90, 0x0b, 0x80, 0x37, 0x3f,
	0xac, 0xae, 0x0a, 0x5d, 0x5e, 0x6b, 0x7c, 0x42, 0x62, 0x8f, 0x71, 0xee, 0x3f, 0xd1, 0x0a, 0x33,
	0x89, 0xe0, 0xdd, 0xb7, 0xd8, 0xb9, 0xf7, 0x31, 0xce, 0x82, 0xfb, 0xb0, 0x6d, 0xcf, 0xaa, 0xa0,
	0xba, 0xe9, 0xaf, 0xdd, 0xca, 0x33, 0x89, 0x07, 0x7e, 0x7f, 0x01, 0xba, 0xfd, 0x51, 0x88, 0x87,
	0x61, 0x7f, 0xfe, 0x6b, 0x88, 0x53, 0x5e, 0x72, 0x0e, 0x2e, 0xcd, 0x7b, 0xd3, 0x14, 0x37, 0x1b,
	0x9c, 0x47, 0x2c, 0x99, 0xaa, 0x0e, 0xc7, 0x67, 0x70, 0xf2, 0x56, 0x37, 0xdd, 0xcf, 0xb5, 0xbc,
	0xd2, 0x5f, 0xbf, 0xe9, 0xba, 0x89, 0x97, 0x70, 0xfa, 0xb8, 0x5c, 0x5b, 0x53, 0xd6, 0x9a, 0x5f,
	0x00, 0x74, 0x62, 0x8d, 0x2c, 0x1a, 0x25, 0xb3, 0xf3, 0x38, 0x7d, 0x78, 0x8b, 0xf7, 0x0e, 0x44,
	0xf5, 0xaa, 0xe2, 0x57, 0x70, 0xf2, 0xb1, 0x37, 0x83, 0x26, 0x14, 0x7a, 0x15, 0x2c, 0xf0, 0x08,
	0x66, 0x9d, 0xd6, 0x1d, 0x55, 0x9f, 0x8a, 0x05, 0x9c, 0x3e, 0xde, 0xc0, 0x9b, 0xbc, 0x10, 0xbf,
	0xb7, 0x82, 0xdd, 0x6d, 0x05, 0xfb, 0xbb, 0x15, 0xec, 0xe7, 0x4e, 0x0c, 0xee, 0x76, 0x62, 0xf0,
	0x67, 0x27, 0x06, 0x9f, 0xf7, 0xd2, 0x97, 0x76, 0xb9, 0x9c, 0xd0, 0x21, 0xbf, 0xf8, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x2b, 0x48, 0x32, 0xe3, 0x4a, 0x03, 0x00, 0x00,
}

func (m *PlayerTitanDrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerTitanDrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerTitanDrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ToNotify {
		i--
		if m.ToNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Armor != nil {
		{
			size, err := m.Armor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ArmorID != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.ArmorID))
		i--
		dAtA[i] = 0x60
	}
	if m.Weapon != nil {
		{
			size, err := m.Weapon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.WeaponID != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.WeaponID))
		i--
		dAtA[i] = 0x50
	}
	if m.Experience != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.Experience))
		i--
		dAtA[i] = 0x48
	}
	if m.Diamond != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.Diamond))
		i--
		dAtA[i] = 0x40
	}
	if m.Money != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x38
	}
	if m.DamageInflicted != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.DamageInflicted))
		i--
		dAtA[i] = 0x30
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x20
	}
	if m.Titan != nil {
		{
			size, err := m.Titan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TitanID != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.TitanID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTitanDropToNotifyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanDropToNotifyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanDropToNotifyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTitanDropToNotifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTitanDropToNotifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTitanDropToNotifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TitanDrops) > 0 {
		for iNdEx := len(m.TitanDrops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TitanDrops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetTitanDropNotifiedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTitanDropNotifiedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetTitanDropNotifiedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TitanDropID != 0 {
		i = encodeVarintPlayerTitanDrop(dAtA, i, uint64(m.TitanDropID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetTitanDropNotifiedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTitanDropNotifiedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetTitanDropNotifiedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPlayerTitanDrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerTitanDrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerTitanDrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.ID))
	}
	if m.TitanID != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.TitanID))
	}
	if m.Titan != nil {
		l = m.Titan.Size()
		n += 1 + l + sovPlayerTitanDrop(uint64(l))
	}
	if m.PlayerID != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.PlayerID))
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovPlayerTitanDrop(uint64(l))
	}
	if m.DamageInflicted != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.DamageInflicted))
	}
	if m.Money != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.Money))
	}
	if m.Diamond != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.Diamond))
	}
	if m.Experience != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.Experience))
	}
	if m.WeaponID != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.WeaponID))
	}
	if m.Weapon != nil {
		l = m.Weapon.Size()
		n += 1 + l + sovPlayerTitanDrop(uint64(l))
	}
	if m.ArmorID != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.ArmorID))
	}
	if m.Armor != nil {
		l = m.Armor.Size()
		n += 1 + l + sovPlayerTitanDrop(uint64(l))
	}
	if m.ToNotify {
		n += 2
	}
	return n
}

func (m *GetTitanDropToNotifyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTitanDropToNotifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TitanDrops) > 0 {
		for _, e := range m.TitanDrops {
			l = e.Size()
			n += 1 + l + sovPlayerTitanDrop(uint64(l))
		}
	}
	return n
}

func (m *SetTitanDropNotifiedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TitanDropID != 0 {
		n += 1 + sovPlayerTitanDrop(uint64(m.TitanDropID))
	}
	return n
}

func (m *SetTitanDropNotifiedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPlayerTitanDrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerTitanDrop(x uint64) (n int) {
	return sovPlayerTitanDrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerTitanDrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerTitanDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerTitanDrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerTitanDrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanID", wireType)
			}
			m.TitanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Titan == nil {
				m.Titan = &Titan{}
			}
			if err := m.Titan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageInflicted", wireType)
			}
			m.DamageInflicted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageInflicted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			m.Experience = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Experience |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponID", wireType)
			}
			m.WeaponID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeaponID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weapon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weapon == nil {
				m.Weapon = &Weapon{}
			}
			if err := m.Weapon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmorID", wireType)
			}
			m.ArmorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Armor == nil {
				m.Armor = &Armor{}
			}
			if err := m.Armor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToNotify = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerTitanDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanDropToNotifyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerTitanDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanDropToNotifyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanDropToNotifyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerTitanDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTitanDropToNotifyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerTitanDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitanDropToNotifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitanDropToNotifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanDrops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitanDrops = append(m.TitanDrops, &PlayerTitanDrop{})
			if err := m.TitanDrops[len(m.TitanDrops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerTitanDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTitanDropNotifiedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerTitanDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetTitanDropNotifiedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetTitanDropNotifiedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitanDropID", wireType)
			}
			m.TitanDropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitanDropID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerTitanDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTitanDropNotifiedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerTitanDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetTitanDropNotifiedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetTitanDropNotifiedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerTitanDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerTitanDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerTitanDrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerTitanDrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerTitanDrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerTitanDrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerTitanDrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerTitanDrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerTitanDrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerTitanDrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerTitanDrop = fmt.Errorf("proto: unexpected end of group")
)
