// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/ability.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ability struct {
	ID                   uint32           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug                 string           `protobuf:"bytes,3,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Level                uint32           `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	AbilityCategoryID    uint32           `protobuf:"varint,5,opt,name=AbilityCategoryID,proto3" json:"AbilityCategoryID,omitempty"`
	AbilityCategory      *AbilityCategory `protobuf:"bytes,6,opt,name=AbilityCategory,proto3" json:"AbilityCategory,omitempty"`
	AbilityType          int32            `protobuf:"varint,7,opt,name=AbilityType,proto3" json:"AbilityType,omitempty"`
	Amulets              uint32           `protobuf:"varint,8,opt,name=Amulets,proto3" json:"Amulets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Ability) Reset()         { *m = Ability{} }
func (m *Ability) String() string { return proto.CompactTextString(m) }
func (*Ability) ProtoMessage()    {}
func (*Ability) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88b1bf5de9426a, []int{0}
}
func (m *Ability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ability.Merge(m, src)
}
func (m *Ability) XXX_Size() int {
	return m.Size()
}
func (m *Ability) XXX_DiscardUnknown() {
	xxx_messageInfo_Ability.DiscardUnknown(m)
}

var xxx_messageInfo_Ability proto.InternalMessageInfo

func (m *Ability) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Ability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ability) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Ability) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Ability) GetAbilityCategoryID() uint32 {
	if m != nil {
		return m.AbilityCategoryID
	}
	return 0
}

func (m *Ability) GetAbilityCategory() *AbilityCategory {
	if m != nil {
		return m.AbilityCategory
	}
	return nil
}

func (m *Ability) GetAbilityType() int32 {
	if m != nil {
		return m.AbilityType
	}
	return 0
}

func (m *Ability) GetAmulets() uint32 {
	if m != nil {
		return m.Amulets
	}
	return 0
}

// GetAbilityForPlayerByCategory
type GetAbilityForPlayerByCategoryRequest struct {
	PlayerID             uint32   `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	AbilityCategoryID    uint32   `protobuf:"varint,2,opt,name=AbilityCategoryID,proto3" json:"AbilityCategoryID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAbilityForPlayerByCategoryRequest) Reset()         { *m = GetAbilityForPlayerByCategoryRequest{} }
func (m *GetAbilityForPlayerByCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetAbilityForPlayerByCategoryRequest) ProtoMessage()    {}
func (*GetAbilityForPlayerByCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88b1bf5de9426a, []int{1}
}
func (m *GetAbilityForPlayerByCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbilityForPlayerByCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbilityForPlayerByCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbilityForPlayerByCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbilityForPlayerByCategoryRequest.Merge(m, src)
}
func (m *GetAbilityForPlayerByCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAbilityForPlayerByCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbilityForPlayerByCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbilityForPlayerByCategoryRequest proto.InternalMessageInfo

func (m *GetAbilityForPlayerByCategoryRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GetAbilityForPlayerByCategoryRequest) GetAbilityCategoryID() uint32 {
	if m != nil {
		return m.AbilityCategoryID
	}
	return 0
}

type GetAbilityForPlayerByCategoryResponse struct {
	Ability              *Ability `protobuf:"bytes,1,opt,name=Ability,proto3" json:"Ability,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAbilityForPlayerByCategoryResponse) Reset()         { *m = GetAbilityForPlayerByCategoryResponse{} }
func (m *GetAbilityForPlayerByCategoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetAbilityForPlayerByCategoryResponse) ProtoMessage()    {}
func (*GetAbilityForPlayerByCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88b1bf5de9426a, []int{2}
}
func (m *GetAbilityForPlayerByCategoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbilityForPlayerByCategoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbilityForPlayerByCategoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbilityForPlayerByCategoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbilityForPlayerByCategoryResponse.Merge(m, src)
}
func (m *GetAbilityForPlayerByCategoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAbilityForPlayerByCategoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbilityForPlayerByCategoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbilityForPlayerByCategoryResponse proto.InternalMessageInfo

func (m *GetAbilityForPlayerByCategoryResponse) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

// CheckIfPlayerHaveAbility
type CheckIfPlayerHaveAbilityRequest struct {
	PlayerID             uint32   `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	AbilityID            uint32   `protobuf:"varint,2,opt,name=AbilityID,proto3" json:"AbilityID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIfPlayerHaveAbilityRequest) Reset()         { *m = CheckIfPlayerHaveAbilityRequest{} }
func (m *CheckIfPlayerHaveAbilityRequest) String() string { return proto.CompactTextString(m) }
func (*CheckIfPlayerHaveAbilityRequest) ProtoMessage()    {}
func (*CheckIfPlayerHaveAbilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88b1bf5de9426a, []int{3}
}
func (m *CheckIfPlayerHaveAbilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIfPlayerHaveAbilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIfPlayerHaveAbilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIfPlayerHaveAbilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIfPlayerHaveAbilityRequest.Merge(m, src)
}
func (m *CheckIfPlayerHaveAbilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckIfPlayerHaveAbilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIfPlayerHaveAbilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIfPlayerHaveAbilityRequest proto.InternalMessageInfo

func (m *CheckIfPlayerHaveAbilityRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *CheckIfPlayerHaveAbilityRequest) GetAbilityID() uint32 {
	if m != nil {
		return m.AbilityID
	}
	return 0
}

type CheckIfPlayerHaveAbilityResponse struct {
	HaveAbility          bool     `protobuf:"varint,1,opt,name=haveAbility,proto3" json:"haveAbility,omitempty"`
	Ability              *Ability `protobuf:"bytes,2,opt,name=Ability,proto3" json:"Ability,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIfPlayerHaveAbilityResponse) Reset()         { *m = CheckIfPlayerHaveAbilityResponse{} }
func (m *CheckIfPlayerHaveAbilityResponse) String() string { return proto.CompactTextString(m) }
func (*CheckIfPlayerHaveAbilityResponse) ProtoMessage()    {}
func (*CheckIfPlayerHaveAbilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88b1bf5de9426a, []int{4}
}
func (m *CheckIfPlayerHaveAbilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIfPlayerHaveAbilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIfPlayerHaveAbilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIfPlayerHaveAbilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIfPlayerHaveAbilityResponse.Merge(m, src)
}
func (m *CheckIfPlayerHaveAbilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckIfPlayerHaveAbilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIfPlayerHaveAbilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIfPlayerHaveAbilityResponse proto.InternalMessageInfo

func (m *CheckIfPlayerHaveAbilityResponse) GetHaveAbility() bool {
	if m != nil {
		return m.HaveAbility
	}
	return false
}

func (m *CheckIfPlayerHaveAbilityResponse) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

// LearnAbility
type LearnAbilityRequest struct {
	PlayerID             uint32   `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	AbilityCategoryID    uint32   `protobuf:"varint,2,opt,name=AbilityCategoryID,proto3" json:"AbilityCategoryID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LearnAbilityRequest) Reset()         { *m = LearnAbilityRequest{} }
func (m *LearnAbilityRequest) String() string { return proto.CompactTextString(m) }
func (*LearnAbilityRequest) ProtoMessage()    {}
func (*LearnAbilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88b1bf5de9426a, []int{5}
}
func (m *LearnAbilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LearnAbilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LearnAbilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LearnAbilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LearnAbilityRequest.Merge(m, src)
}
func (m *LearnAbilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *LearnAbilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LearnAbilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LearnAbilityRequest proto.InternalMessageInfo

func (m *LearnAbilityRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *LearnAbilityRequest) GetAbilityCategoryID() uint32 {
	if m != nil {
		return m.AbilityCategoryID
	}
	return 0
}

type LearnAbilityResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LearnAbilityResponse) Reset()         { *m = LearnAbilityResponse{} }
func (m *LearnAbilityResponse) String() string { return proto.CompactTextString(m) }
func (*LearnAbilityResponse) ProtoMessage()    {}
func (*LearnAbilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88b1bf5de9426a, []int{6}
}
func (m *LearnAbilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LearnAbilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LearnAbilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LearnAbilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LearnAbilityResponse.Merge(m, src)
}
func (m *LearnAbilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *LearnAbilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LearnAbilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LearnAbilityResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Ability)(nil), "ability.Ability")
	proto.RegisterType((*GetAbilityForPlayerByCategoryRequest)(nil), "ability.GetAbilityForPlayerByCategoryRequest")
	proto.RegisterType((*GetAbilityForPlayerByCategoryResponse)(nil), "ability.GetAbilityForPlayerByCategoryResponse")
	proto.RegisterType((*CheckIfPlayerHaveAbilityRequest)(nil), "ability.CheckIfPlayerHaveAbilityRequest")
	proto.RegisterType((*CheckIfPlayerHaveAbilityResponse)(nil), "ability.CheckIfPlayerHaveAbilityResponse")
	proto.RegisterType((*LearnAbilityRequest)(nil), "ability.LearnAbilityRequest")
	proto.RegisterType((*LearnAbilityResponse)(nil), "ability.LearnAbilityResponse")
}

func init() { proto.RegisterFile("proto/ability.proto", fileDescriptor_7c88b1bf5de9426a) }

var fileDescriptor_7c88b1bf5de9426a = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xcd, 0xf4, 0x03, 0x0a, 0xb7, 0xf9, 0xfc, 0x19, 0x88, 0x99, 0x10, 0x82, 0xb5, 0xd1, 0xa4,
	0x31, 0x06, 0x13, 0x5c, 0xba, 0xe2, 0x27, 0x6a, 0x23, 0x31, 0xa6, 0xb8, 0xd2, 0x05, 0x29, 0xe4,
	0x0a, 0xc4, 0x42, 0x6b, 0x5b, 0x48, 0x78, 0x09, 0x9f, 0xcb, 0xa5, 0x8f, 0x60, 0x78, 0x12, 0xc3,
	0x74, 0x5a, 0xfe, 0x24, 0xc8, 0x6e, 0xce, 0xb9, 0x67, 0xee, 0xb9, 0xe7, 0x4e, 0x06, 0xb2, 0xae,
	0xe7, 0x04, 0xce, 0xa5, 0xd5, 0xee, 0xdb, 0xfd, 0x60, 0x52, 0xe2, 0x88, 0xca, 0x02, 0xe6, 0x0b,
	0x4b, 0xd5, 0x56, 0xc7, 0x0a, 0xb0, 0xeb, 0x78, 0x42, 0xa6, 0x7d, 0x48, 0x20, 0x57, 0xc2, 0x12,
	0xdd, 0x03, 0xc9, 0xa8, 0x33, 0xa2, 0x12, 0xfd, 0xbf, 0x29, 0x19, 0x75, 0x4a, 0x21, 0xf1, 0x60,
	0x0d, 0x90, 0x49, 0x2a, 0xd1, 0x33, 0x26, 0x3f, 0xcf, 0xb8, 0xa6, 0x3d, 0xea, 0xb2, 0x7f, 0x21,
	0x37, 0x3b, 0xd3, 0x1c, 0x24, 0x1b, 0x38, 0x46, 0x9b, 0x25, 0xf8, 0xd5, 0x10, 0xd0, 0x0b, 0x38,
	0x14, 0x8d, 0x6b, 0xc2, 0xd2, 0xa8, 0xb3, 0x24, 0x57, 0xac, 0x17, 0xe8, 0x3d, 0xec, 0xaf, 0x90,
	0x2c, 0xa5, 0x12, 0x5d, 0x29, 0x9f, 0x94, 0xd6, 0x26, 0x5f, 0x11, 0x9a, 0xab, 0x37, 0xa9, 0x0a,
	0x8a, 0xa0, 0x9e, 0x26, 0x2e, 0x32, 0x59, 0x25, 0x7a, 0xd2, 0x5c, 0xa4, 0x28, 0x03, 0xb9, 0x32,
	0x18, 0xd9, 0x18, 0xf8, 0x2c, 0xcd, 0x47, 0x8a, 0xa0, 0xe6, 0xc2, 0xe9, 0x2d, 0x06, 0x42, 0x7b,
	0xe3, 0x78, 0x8f, 0xb6, 0x35, 0x41, 0xaf, 0x3a, 0x77, 0xc3, 0xf7, 0x11, 0xfa, 0x01, 0xcd, 0x43,
	0x3a, 0x2c, 0xc5, 0x2b, 0x8b, 0xf1, 0xef, 0xd1, 0xa5, 0x0d, 0xd1, 0xb5, 0x26, 0x9c, 0x6d, 0x71,
	0xf4, 0x5d, 0x67, 0xe8, 0x23, 0x3d, 0x8f, 0x9f, 0x8a, 0x3b, 0x2a, 0xe5, 0x83, 0x68, 0x37, 0xd1,
	0x4a, 0xcc, 0x48, 0xa0, 0xbd, 0xc0, 0x71, 0xad, 0x87, 0x9d, 0x37, 0xe3, 0x35, 0x6c, 0x77, 0x67,
	0x8d, 0x31, 0x12, 0xfd, 0x21, 0x41, 0x01, 0x32, 0x42, 0x1d, 0x4f, 0x3e, 0x27, 0x34, 0x17, 0xd4,
	0xcd, 0xcd, 0xc5, 0xb0, 0x2a, 0x28, 0xbd, 0x39, 0xcd, 0x0d, 0xd2, 0xe6, 0x22, 0xb5, 0x18, 0x47,
	0xda, 0x16, 0xa7, 0x05, 0xd9, 0x06, 0x5a, 0xde, 0x70, 0x87, 0x08, 0xbb, 0x3d, 0xc2, 0x11, 0xe4,
	0x96, 0x0d, 0xc2, 0x18, 0x55, 0xfa, 0x39, 0x2d, 0x92, 0xaf, 0x69, 0x91, 0x7c, 0x4f, 0x8b, 0xe4,
	0x39, 0x51, 0xba, 0x76, 0xdb, 0xed, 0x14, 0xff, 0x3a, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x05, 0xd5, 0x97, 0xea, 0x78, 0x03, 0x00, 0x00,
}

func (m *Ability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amulets != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Amulets))
		i--
		dAtA[i] = 0x40
	}
	if m.AbilityType != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.AbilityType))
		i--
		dAtA[i] = 0x38
	}
	if m.AbilityCategory != nil {
		{
			size, err := m.AbilityCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AbilityCategoryID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.AbilityCategoryID))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintAbility(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAbility(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAbilityForPlayerByCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbilityForPlayerByCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbilityForPlayerByCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AbilityCategoryID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.AbilityCategoryID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAbilityForPlayerByCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbilityForPlayerByCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbilityForPlayerByCategoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ability != nil {
		{
			size, err := m.Ability.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckIfPlayerHaveAbilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIfPlayerHaveAbilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIfPlayerHaveAbilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AbilityID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.AbilityID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckIfPlayerHaveAbilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIfPlayerHaveAbilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIfPlayerHaveAbilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ability != nil {
		{
			size, err := m.Ability.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HaveAbility {
		i--
		if m.HaveAbility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LearnAbilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LearnAbilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LearnAbilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AbilityCategoryID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.AbilityCategoryID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LearnAbilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LearnAbilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LearnAbilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintAbility(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbility(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAbility(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAbility(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovAbility(uint64(m.Level))
	}
	if m.AbilityCategoryID != 0 {
		n += 1 + sovAbility(uint64(m.AbilityCategoryID))
	}
	if m.AbilityCategory != nil {
		l = m.AbilityCategory.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.AbilityType != 0 {
		n += 1 + sovAbility(uint64(m.AbilityType))
	}
	if m.Amulets != 0 {
		n += 1 + sovAbility(uint64(m.Amulets))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAbilityForPlayerByCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAbility(uint64(m.PlayerID))
	}
	if m.AbilityCategoryID != 0 {
		n += 1 + sovAbility(uint64(m.AbilityCategoryID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAbilityForPlayerByCategoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ability != nil {
		l = m.Ability.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckIfPlayerHaveAbilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAbility(uint64(m.PlayerID))
	}
	if m.AbilityID != 0 {
		n += 1 + sovAbility(uint64(m.AbilityID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckIfPlayerHaveAbilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HaveAbility {
		n += 2
	}
	if m.Ability != nil {
		l = m.Ability.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LearnAbilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAbility(uint64(m.PlayerID))
	}
	if m.AbilityCategoryID != 0 {
		n += 1 + sovAbility(uint64(m.AbilityCategoryID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LearnAbilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAbility(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbility(x uint64) (n int) {
	return sovAbility(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityCategoryID", wireType)
			}
			m.AbilityCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbilityCategory == nil {
				m.AbilityCategory = &AbilityCategory{}
			}
			if err := m.AbilityCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityType", wireType)
			}
			m.AbilityType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amulets", wireType)
			}
			m.Amulets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amulets |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbilityForPlayerByCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbilityForPlayerByCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbilityForPlayerByCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityCategoryID", wireType)
			}
			m.AbilityCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbilityForPlayerByCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbilityForPlayerByCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbilityForPlayerByCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ability == nil {
				m.Ability = &Ability{}
			}
			if err := m.Ability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIfPlayerHaveAbilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAbilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAbilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			m.AbilityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIfPlayerHaveAbilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAbilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAbilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveAbility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveAbility = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ability == nil {
				m.Ability = &Ability{}
			}
			if err := m.Ability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LearnAbilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LearnAbilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LearnAbilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityCategoryID", wireType)
			}
			m.AbilityCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LearnAbilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LearnAbilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LearnAbilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbility(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbility
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbility
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbility
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbility        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbility          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbility = fmt.Errorf("proto: unexpected end of group")
)
