// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/action.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlaceBidRequest_BidTypeEnum int32

const (
	PlaceBidRequest_BUY  PlaceBidRequest_BidTypeEnum = 0
	PlaceBidRequest_SELL PlaceBidRequest_BidTypeEnum = 1
)

var PlaceBidRequest_BidTypeEnum_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}

var PlaceBidRequest_BidTypeEnum_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x PlaceBidRequest_BidTypeEnum) String() string {
	return proto.EnumName(PlaceBidRequest_BidTypeEnum_name, int32(x))
}

func (PlaceBidRequest_BidTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{3, 0}
}

type Action struct {
	ID            uint32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ResourceID    uint32    `protobuf:"varint,2,opt,name=ResourceID,proto3" json:"ResourceID,omitempty"`
	Resource      *Resource `protobuf:"bytes,3,opt,name=Resource,proto3" json:"Resource,omitempty"`
	StartingPrice int32     `protobuf:"varint,4,opt,name=StartingPrice,proto3" json:"StartingPrice,omitempty"`
	MinimumPrice  int32     `protobuf:"varint,5,opt,name=MinimumPrice,proto3" json:"MinimumPrice,omitempty"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{0}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Action) GetResourceID() uint32 {
	if m != nil {
		return m.ResourceID
	}
	return 0
}

func (m *Action) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Action) GetStartingPrice() int32 {
	if m != nil {
		return m.StartingPrice
	}
	return 0
}

func (m *Action) GetMinimumPrice() int32 {
	if m != nil {
		return m.MinimumPrice
	}
	return 0
}

type GetActionByIDRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetActionByIDRequest) Reset()         { *m = GetActionByIDRequest{} }
func (m *GetActionByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetActionByIDRequest) ProtoMessage()    {}
func (*GetActionByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{1}
}
func (m *GetActionByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActionByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActionByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActionByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActionByIDRequest.Merge(m, src)
}
func (m *GetActionByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActionByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActionByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActionByIDRequest proto.InternalMessageInfo

func (m *GetActionByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetActionByIDResponse struct {
	Action       *Action `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	CurrentValue int32   `protobuf:"varint,2,opt,name=CurrentValue,proto3" json:"CurrentValue,omitempty"`
	Quantity     int32   `protobuf:"varint,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (m *GetActionByIDResponse) Reset()         { *m = GetActionByIDResponse{} }
func (m *GetActionByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetActionByIDResponse) ProtoMessage()    {}
func (*GetActionByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{2}
}
func (m *GetActionByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActionByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActionByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActionByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActionByIDResponse.Merge(m, src)
}
func (m *GetActionByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActionByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActionByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActionByIDResponse proto.InternalMessageInfo

func (m *GetActionByIDResponse) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *GetActionByIDResponse) GetCurrentValue() int32 {
	if m != nil {
		return m.CurrentValue
	}
	return 0
}

func (m *GetActionByIDResponse) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type PlaceBidRequest struct {
	ActionID uint32                      `protobuf:"varint,1,opt,name=ActionID,proto3" json:"ActionID,omitempty"`
	PlayerID uint32                      `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Quantity uint32                      `protobuf:"varint,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Type     PlaceBidRequest_BidTypeEnum `protobuf:"varint,4,opt,name=Type,proto3,enum=action.PlaceBidRequest_BidTypeEnum" json:"Type,omitempty"`
}

func (m *PlaceBidRequest) Reset()         { *m = PlaceBidRequest{} }
func (m *PlaceBidRequest) String() string { return proto.CompactTextString(m) }
func (*PlaceBidRequest) ProtoMessage()    {}
func (*PlaceBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{3}
}
func (m *PlaceBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceBidRequest.Merge(m, src)
}
func (m *PlaceBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlaceBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceBidRequest proto.InternalMessageInfo

func (m *PlaceBidRequest) GetActionID() uint32 {
	if m != nil {
		return m.ActionID
	}
	return 0
}

func (m *PlaceBidRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *PlaceBidRequest) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *PlaceBidRequest) GetType() PlaceBidRequest_BidTypeEnum {
	if m != nil {
		return m.Type
	}
	return PlaceBidRequest_BUY
}

type PlaceBidResponse struct {
	Resource *Resource `protobuf:"bytes,1,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Value    int32     `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *PlaceBidResponse) Reset()         { *m = PlaceBidResponse{} }
func (m *PlaceBidResponse) String() string { return proto.CompactTextString(m) }
func (*PlaceBidResponse) ProtoMessage()    {}
func (*PlaceBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{4}
}
func (m *PlaceBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceBidResponse.Merge(m, src)
}
func (m *PlaceBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlaceBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceBidResponse proto.InternalMessageInfo

func (m *PlaceBidResponse) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *PlaceBidResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GetActionsBySystemIDRequest struct {
	SystemID uint32 `protobuf:"varint,1,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
}

func (m *GetActionsBySystemIDRequest) Reset()         { *m = GetActionsBySystemIDRequest{} }
func (m *GetActionsBySystemIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetActionsBySystemIDRequest) ProtoMessage()    {}
func (*GetActionsBySystemIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{5}
}
func (m *GetActionsBySystemIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActionsBySystemIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActionsBySystemIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActionsBySystemIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActionsBySystemIDRequest.Merge(m, src)
}
func (m *GetActionsBySystemIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActionsBySystemIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActionsBySystemIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActionsBySystemIDRequest proto.InternalMessageInfo

func (m *GetActionsBySystemIDRequest) GetSystemID() uint32 {
	if m != nil {
		return m.SystemID
	}
	return 0
}

type GetActionsBySystemIDResponse struct {
	Actions []*Action `protobuf:"bytes,1,rep,name=Actions,proto3" json:"Actions,omitempty"`
}

func (m *GetActionsBySystemIDResponse) Reset()         { *m = GetActionsBySystemIDResponse{} }
func (m *GetActionsBySystemIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetActionsBySystemIDResponse) ProtoMessage()    {}
func (*GetActionsBySystemIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{6}
}
func (m *GetActionsBySystemIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActionsBySystemIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActionsBySystemIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActionsBySystemIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActionsBySystemIDResponse.Merge(m, src)
}
func (m *GetActionsBySystemIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActionsBySystemIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActionsBySystemIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActionsBySystemIDResponse proto.InternalMessageInfo

func (m *GetActionsBySystemIDResponse) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type GetBidInfoRequest struct {
	ActionID uint32 `protobuf:"varint,1,opt,name=ActionID,proto3" json:"ActionID,omitempty"`
	Quantity int32  `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (m *GetBidInfoRequest) Reset()         { *m = GetBidInfoRequest{} }
func (m *GetBidInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetBidInfoRequest) ProtoMessage()    {}
func (*GetBidInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{7}
}
func (m *GetBidInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBidInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBidInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBidInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBidInfoRequest.Merge(m, src)
}
func (m *GetBidInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBidInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBidInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBidInfoRequest proto.InternalMessageInfo

func (m *GetBidInfoRequest) GetActionID() uint32 {
	if m != nil {
		return m.ActionID
	}
	return 0
}

func (m *GetBidInfoRequest) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type GetBidInfoResponse struct {
	Value int32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *GetBidInfoResponse) Reset()         { *m = GetBidInfoResponse{} }
func (m *GetBidInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetBidInfoResponse) ProtoMessage()    {}
func (*GetBidInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c011a1f72755af8, []int{8}
}
func (m *GetBidInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBidInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBidInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBidInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBidInfoResponse.Merge(m, src)
}
func (m *GetBidInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBidInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBidInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBidInfoResponse proto.InternalMessageInfo

func (m *GetBidInfoResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("action.PlaceBidRequest_BidTypeEnum", PlaceBidRequest_BidTypeEnum_name, PlaceBidRequest_BidTypeEnum_value)
	proto.RegisterType((*Action)(nil), "action.Action")
	proto.RegisterType((*GetActionByIDRequest)(nil), "action.GetActionByIDRequest")
	proto.RegisterType((*GetActionByIDResponse)(nil), "action.GetActionByIDResponse")
	proto.RegisterType((*PlaceBidRequest)(nil), "action.PlaceBidRequest")
	proto.RegisterType((*PlaceBidResponse)(nil), "action.PlaceBidResponse")
	proto.RegisterType((*GetActionsBySystemIDRequest)(nil), "action.GetActionsBySystemIDRequest")
	proto.RegisterType((*GetActionsBySystemIDResponse)(nil), "action.GetActionsBySystemIDResponse")
	proto.RegisterType((*GetBidInfoRequest)(nil), "action.GetBidInfoRequest")
	proto.RegisterType((*GetBidInfoResponse)(nil), "action.GetBidInfoResponse")
}

func init() { proto.RegisterFile("proto/action.proto", fileDescriptor_9c011a1f72755af8) }

var fileDescriptor_9c011a1f72755af8 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x8a, 0xd3, 0x40,
	0x18, 0xef, 0xb4, 0x4d, 0x37, 0x7c, 0xdd, 0xd6, 0x3a, 0x54, 0x08, 0x55, 0x42, 0x18, 0x65, 0x29,
	0x1e, 0x22, 0xd4, 0x83, 0x88, 0x27, 0x63, 0x97, 0x35, 0xb8, 0x42, 0x9d, 0xaa, 0xa8, 0xb7, 0x6c,
	0x3b, 0xca, 0x40, 0x9b, 0xd4, 0x64, 0x72, 0xc8, 0xc9, 0x57, 0xf0, 0x59, 0x7c, 0x02, 0x8f, 0x1e,
	0xf7, 0xe8, 0x51, 0xda, 0x17, 0x91, 0x9d, 0xc9, 0x4c, 0xd3, 0xec, 0x1e, 0xf6, 0xf8, 0xfb, 0x93,
	0x6f, 0xbe, 0xef, 0xf7, 0x23, 0x80, 0x37, 0x69, 0x22, 0x92, 0x27, 0xd1, 0x42, 0xf0, 0x24, 0xf6,
	0x25, 0xc0, 0x1d, 0x85, 0x46, 0x43, 0xa5, 0xa5, 0x2c, 0x4b, 0xf2, 0x74, 0xc1, 0x94, 0x4a, 0x7e,
	0x21, 0xe8, 0xbc, 0x94, 0x06, 0xdc, 0x87, 0x66, 0x38, 0x75, 0x90, 0x87, 0xc6, 0x3d, 0xda, 0x0c,
	0xa7, 0xd8, 0x05, 0xa0, 0xa5, 0x39, 0x9c, 0x3a, 0x4d, 0xc9, 0x57, 0x18, 0xec, 0x83, 0xad, 0x91,
	0xd3, 0xf2, 0xd0, 0xb8, 0x3b, 0xc1, 0xbe, 0x99, 0xae, 0x15, 0x6a, 0x3c, 0xf8, 0x11, 0xf4, 0xe6,
	0x22, 0x4a, 0x05, 0x8f, 0xbf, 0xcd, 0x52, 0xbe, 0x60, 0x4e, 0xdb, 0x43, 0x63, 0x8b, 0x1e, 0x92,
	0x98, 0xc0, 0xf1, 0x5b, 0x1e, 0xf3, 0x75, 0xbe, 0x56, 0x26, 0x4b, 0x9a, 0x0e, 0x38, 0x72, 0x02,
	0xc3, 0x33, 0x26, 0xd4, 0xda, 0x41, 0x11, 0x4e, 0x29, 0xfb, 0x9e, 0xb3, 0x4c, 0xd4, 0x2f, 0x20,
	0x3f, 0xe0, 0x5e, 0xcd, 0x97, 0x6d, 0x92, 0x38, 0x63, 0xf8, 0x44, 0x1f, 0x2d, 0xcd, 0xdd, 0x49,
	0xdf, 0x2f, 0x23, 0x53, 0x2c, 0xd5, 0x91, 0x10, 0x38, 0x7e, 0x95, 0xa7, 0x29, 0x8b, 0xc5, 0xc7,
	0x68, 0x95, 0x33, 0x19, 0x82, 0x45, 0x0f, 0x38, 0x3c, 0x02, 0xfb, 0x5d, 0x1e, 0xc5, 0x82, 0x8b,
	0x42, 0xc6, 0x60, 0x51, 0x83, 0xc9, 0x6f, 0x04, 0x77, 0x66, 0xab, 0x68, 0xc1, 0x02, 0xbe, 0xd4,
	0x4b, 0x8e, 0xc0, 0x56, 0xd3, 0xcd, 0xaa, 0x06, 0x5f, 0x69, 0xb3, 0x55, 0x54, 0xb0, 0xd4, 0x04,
	0x6e, 0xf0, 0xb5, 0x77, 0x7a, 0xfb, 0x77, 0xf0, 0x33, 0x68, 0xbf, 0x2f, 0x36, 0x2a, 0xd1, 0xfe,
	0xe4, 0xa1, 0xbe, 0xa6, 0xf6, 0xb4, 0x1f, 0xf0, 0xe5, 0x95, 0xed, 0x34, 0xce, 0xd7, 0x54, 0x7e,
	0x40, 0x3c, 0xe8, 0x56, 0x48, 0x7c, 0x04, 0xad, 0xe0, 0xc3, 0xe7, 0x41, 0x03, 0xdb, 0xd0, 0x9e,
	0x9f, 0x9e, 0x9f, 0x0f, 0x10, 0xf9, 0x04, 0x83, 0xfd, 0x98, 0x32, 0xbe, 0x6a, 0xf3, 0xe8, 0x16,
	0xcd, 0x0f, 0xc1, 0xaa, 0xe6, 0xa7, 0x00, 0x79, 0x0e, 0xf7, 0x4d, 0x3b, 0x59, 0x50, 0xcc, 0x8b,
	0x4c, 0xb0, 0xf5, 0xbe, 0xcc, 0x11, 0xd8, 0x9a, 0xd2, 0x39, 0x69, 0x4c, 0x5e, 0xc3, 0x83, 0x9b,
	0x3f, 0x2d, 0x17, 0x1c, 0xc3, 0x51, 0x29, 0x3a, 0xc8, 0x6b, 0xdd, 0x50, 0xb0, 0x96, 0xc9, 0x1b,
	0xb8, 0x7b, 0xc6, 0x44, 0xc0, 0x97, 0x61, 0xfc, 0x35, 0xb9, 0x65, 0x45, 0xa6, 0x86, 0x66, 0xad,
	0xee, 0xc7, 0x80, 0xab, 0xc3, 0xca, 0x65, 0xcc, 0xf5, 0xa8, 0x72, 0x7d, 0xe0, 0xfe, 0xd9, 0xba,
	0xe8, 0x72, 0xeb, 0xa2, 0x7f, 0x5b, 0x17, 0xfd, 0xdc, 0xb9, 0x8d, 0xcb, 0x9d, 0xdb, 0xf8, 0xbb,
	0x73, 0x1b, 0x5f, 0xda, 0xfe, 0x8b, 0xcd, 0xc5, 0x45, 0x47, 0xfe, 0x9f, 0x4f, 0xff, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x8a, 0x10, 0xfc, 0xe3, 0xd3, 0x03, 0x00, 0x00,
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinimumPrice != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.MinimumPrice))
		i--
		dAtA[i] = 0x28
	}
	if m.StartingPrice != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.StartingPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ResourceID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ResourceID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActionByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActionByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActionByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActionByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActionByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActionByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentValue != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.CurrentValue))
		i--
		dAtA[i] = 0x10
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlaceBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Quantity != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ActionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaceBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActionsBySystemIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActionsBySystemIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActionsBySystemIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.SystemID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActionsBySystemIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActionsBySystemIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActionsBySystemIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBidInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBidInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBidInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ActionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBidInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBidInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBidInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAction(uint64(m.ID))
	}
	if m.ResourceID != 0 {
		n += 1 + sovAction(uint64(m.ResourceID))
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.StartingPrice != 0 {
		n += 1 + sovAction(uint64(m.StartingPrice))
	}
	if m.MinimumPrice != 0 {
		n += 1 + sovAction(uint64(m.MinimumPrice))
	}
	return n
}

func (m *GetActionByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAction(uint64(m.ID))
	}
	return n
}

func (m *GetActionByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.CurrentValue != 0 {
		n += 1 + sovAction(uint64(m.CurrentValue))
	}
	if m.Quantity != 0 {
		n += 1 + sovAction(uint64(m.Quantity))
	}
	return n
}

func (m *PlaceBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionID != 0 {
		n += 1 + sovAction(uint64(m.ActionID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovAction(uint64(m.PlayerID))
	}
	if m.Quantity != 0 {
		n += 1 + sovAction(uint64(m.Quantity))
	}
	if m.Type != 0 {
		n += 1 + sovAction(uint64(m.Type))
	}
	return n
}

func (m *PlaceBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovAction(uint64(m.Value))
	}
	return n
}

func (m *GetActionsBySystemIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemID != 0 {
		n += 1 + sovAction(uint64(m.SystemID))
	}
	return n
}

func (m *GetActionsBySystemIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	return n
}

func (m *GetBidInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionID != 0 {
		n += 1 + sovAction(uint64(m.ActionID))
	}
	if m.Quantity != 0 {
		n += 1 + sovAction(uint64(m.Quantity))
	}
	return n
}

func (m *GetBidInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovAction(uint64(m.Value))
	}
	return n
}

func sovAction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAction(x uint64) (n int) {
	return sovAction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			m.ResourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingPrice", wireType)
			}
			m.StartingPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumPrice", wireType)
			}
			m.MinimumPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActionByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActionByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActionByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActionByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActionByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActionByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			m.CurrentValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionID", wireType)
			}
			m.ActionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PlaceBidRequest_BidTypeEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActionsBySystemIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActionsBySystemIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActionsBySystemIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemID", wireType)
			}
			m.SystemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActionsBySystemIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActionsBySystemIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActionsBySystemIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBidInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBidInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBidInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionID", wireType)
			}
			m.ActionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBidInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBidInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBidInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAction = fmt.Errorf("proto: unexpected end of group")
)
