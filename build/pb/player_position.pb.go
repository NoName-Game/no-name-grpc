// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/player_position.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlayerPosition struct {
	ID       uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PlayerID uint32 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlanetID uint32 `protobuf:"varint,3,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *PlayerPosition) Reset()         { *m = PlayerPosition{} }
func (m *PlayerPosition) String() string { return proto.CompactTextString(m) }
func (*PlayerPosition) ProtoMessage()    {}
func (*PlayerPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{0}
}
func (m *PlayerPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerPosition.Merge(m, src)
}
func (m *PlayerPosition) XXX_Size() int {
	return m.Size()
}
func (m *PlayerPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerPosition.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerPosition proto.InternalMessageInfo

func (m *PlayerPosition) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PlayerPosition) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *PlayerPosition) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

// CreatePlayerPosition
type CreatePlayerPositionRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlanetID uint32 `protobuf:"varint,2,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *CreatePlayerPositionRequest) Reset()         { *m = CreatePlayerPositionRequest{} }
func (m *CreatePlayerPositionRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePlayerPositionRequest) ProtoMessage()    {}
func (*CreatePlayerPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{1}
}
func (m *CreatePlayerPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayerPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayerPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayerPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayerPositionRequest.Merge(m, src)
}
func (m *CreatePlayerPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayerPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayerPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayerPositionRequest proto.InternalMessageInfo

func (m *CreatePlayerPositionRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *CreatePlayerPositionRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type CreatePlayerPositionResponse struct {
}

func (m *CreatePlayerPositionResponse) Reset()         { *m = CreatePlayerPositionResponse{} }
func (m *CreatePlayerPositionResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePlayerPositionResponse) ProtoMessage()    {}
func (*CreatePlayerPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{2}
}
func (m *CreatePlayerPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayerPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayerPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayerPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayerPositionResponse.Merge(m, src)
}
func (m *CreatePlayerPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayerPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayerPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayerPositionResponse proto.InternalMessageInfo

// GetPlayerCurrentPlanet
type GetPlayerCurrentPlanetRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *GetPlayerCurrentPlanetRequest) Reset()         { *m = GetPlayerCurrentPlanetRequest{} }
func (m *GetPlayerCurrentPlanetRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerCurrentPlanetRequest) ProtoMessage()    {}
func (*GetPlayerCurrentPlanetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{3}
}
func (m *GetPlayerCurrentPlanetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerCurrentPlanetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerCurrentPlanetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerCurrentPlanetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerCurrentPlanetRequest.Merge(m, src)
}
func (m *GetPlayerCurrentPlanetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerCurrentPlanetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerCurrentPlanetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerCurrentPlanetRequest proto.InternalMessageInfo

func (m *GetPlayerCurrentPlanetRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type GetPlayerCurrentPlanetResponse struct {
	Planet *Planet `protobuf:"bytes,1,opt,name=Planet,proto3" json:"Planet,omitempty"`
}

func (m *GetPlayerCurrentPlanetResponse) Reset()         { *m = GetPlayerCurrentPlanetResponse{} }
func (m *GetPlayerCurrentPlanetResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerCurrentPlanetResponse) ProtoMessage()    {}
func (*GetPlayerCurrentPlanetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{4}
}
func (m *GetPlayerCurrentPlanetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerCurrentPlanetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerCurrentPlanetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerCurrentPlanetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerCurrentPlanetResponse.Merge(m, src)
}
func (m *GetPlayerCurrentPlanetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerCurrentPlanetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerCurrentPlanetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerCurrentPlanetResponse proto.InternalMessageInfo

func (m *GetPlayerCurrentPlanetResponse) GetPlanet() *Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

// CountPlanetVisited
type CountPlanetVisitedRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *CountPlanetVisitedRequest) Reset()         { *m = CountPlanetVisitedRequest{} }
func (m *CountPlanetVisitedRequest) String() string { return proto.CompactTextString(m) }
func (*CountPlanetVisitedRequest) ProtoMessage()    {}
func (*CountPlanetVisitedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{5}
}
func (m *CountPlanetVisitedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPlanetVisitedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPlanetVisitedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPlanetVisitedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPlanetVisitedRequest.Merge(m, src)
}
func (m *CountPlanetVisitedRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountPlanetVisitedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPlanetVisitedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountPlanetVisitedRequest proto.InternalMessageInfo

func (m *CountPlanetVisitedRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type CountPlanetVisitedResponse struct {
	Value uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *CountPlanetVisitedResponse) Reset()         { *m = CountPlanetVisitedResponse{} }
func (m *CountPlanetVisitedResponse) String() string { return proto.CompactTextString(m) }
func (*CountPlanetVisitedResponse) ProtoMessage()    {}
func (*CountPlanetVisitedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{6}
}
func (m *CountPlanetVisitedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPlanetVisitedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPlanetVisitedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPlanetVisitedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPlanetVisitedResponse.Merge(m, src)
}
func (m *CountPlanetVisitedResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountPlanetVisitedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPlanetVisitedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountPlanetVisitedResponse proto.InternalMessageInfo

func (m *CountPlanetVisitedResponse) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// CountSystemVisited
type CountSystemVisitedRequest struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (m *CountSystemVisitedRequest) Reset()         { *m = CountSystemVisitedRequest{} }
func (m *CountSystemVisitedRequest) String() string { return proto.CompactTextString(m) }
func (*CountSystemVisitedRequest) ProtoMessage()    {}
func (*CountSystemVisitedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{7}
}
func (m *CountSystemVisitedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountSystemVisitedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountSystemVisitedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountSystemVisitedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountSystemVisitedRequest.Merge(m, src)
}
func (m *CountSystemVisitedRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountSystemVisitedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountSystemVisitedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountSystemVisitedRequest proto.InternalMessageInfo

func (m *CountSystemVisitedRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

type CountSystemVisitedResponse struct {
	Value uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *CountSystemVisitedResponse) Reset()         { *m = CountSystemVisitedResponse{} }
func (m *CountSystemVisitedResponse) String() string { return proto.CompactTextString(m) }
func (*CountSystemVisitedResponse) ProtoMessage()    {}
func (*CountSystemVisitedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{8}
}
func (m *CountSystemVisitedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountSystemVisitedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountSystemVisitedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountSystemVisitedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountSystemVisitedResponse.Merge(m, src)
}
func (m *CountSystemVisitedResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountSystemVisitedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountSystemVisitedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountSystemVisitedResponse proto.InternalMessageInfo

func (m *CountSystemVisitedResponse) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// CountPlayerVisitedCurrentPlanet
type CountPlayerVisitedCurrentPlanetRequest struct {
	PlanetID uint32 `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *CountPlayerVisitedCurrentPlanetRequest) Reset() {
	*m = CountPlayerVisitedCurrentPlanetRequest{}
}
func (m *CountPlayerVisitedCurrentPlanetRequest) String() string { return proto.CompactTextString(m) }
func (*CountPlayerVisitedCurrentPlanetRequest) ProtoMessage()    {}
func (*CountPlayerVisitedCurrentPlanetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{9}
}
func (m *CountPlayerVisitedCurrentPlanetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPlayerVisitedCurrentPlanetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPlayerVisitedCurrentPlanetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPlayerVisitedCurrentPlanetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPlayerVisitedCurrentPlanetRequest.Merge(m, src)
}
func (m *CountPlayerVisitedCurrentPlanetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountPlayerVisitedCurrentPlanetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPlayerVisitedCurrentPlanetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountPlayerVisitedCurrentPlanetRequest proto.InternalMessageInfo

func (m *CountPlayerVisitedCurrentPlanetRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type CountPlayerVisitedCurrentPlanetResponse struct {
	Value uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *CountPlayerVisitedCurrentPlanetResponse) Reset() {
	*m = CountPlayerVisitedCurrentPlanetResponse{}
}
func (m *CountPlayerVisitedCurrentPlanetResponse) String() string { return proto.CompactTextString(m) }
func (*CountPlayerVisitedCurrentPlanetResponse) ProtoMessage()    {}
func (*CountPlayerVisitedCurrentPlanetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{10}
}
func (m *CountPlayerVisitedCurrentPlanetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPlayerVisitedCurrentPlanetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPlayerVisitedCurrentPlanetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPlayerVisitedCurrentPlanetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPlayerVisitedCurrentPlanetResponse.Merge(m, src)
}
func (m *CountPlayerVisitedCurrentPlanetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountPlayerVisitedCurrentPlanetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPlayerVisitedCurrentPlanetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountPlayerVisitedCurrentPlanetResponse proto.InternalMessageInfo

func (m *CountPlayerVisitedCurrentPlanetResponse) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// CountPlayerCurrentPlanet
type CountPlayerCurrentPlanetRequest struct {
	PlanetID uint32 `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID,omitempty"`
}

func (m *CountPlayerCurrentPlanetRequest) Reset()         { *m = CountPlayerCurrentPlanetRequest{} }
func (m *CountPlayerCurrentPlanetRequest) String() string { return proto.CompactTextString(m) }
func (*CountPlayerCurrentPlanetRequest) ProtoMessage()    {}
func (*CountPlayerCurrentPlanetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{11}
}
func (m *CountPlayerCurrentPlanetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPlayerCurrentPlanetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPlayerCurrentPlanetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPlayerCurrentPlanetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPlayerCurrentPlanetRequest.Merge(m, src)
}
func (m *CountPlayerCurrentPlanetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountPlayerCurrentPlanetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPlayerCurrentPlanetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountPlayerCurrentPlanetRequest proto.InternalMessageInfo

func (m *CountPlayerCurrentPlanetRequest) GetPlanetID() uint32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

type CountPlayerCurrentPlanetResponse struct {
	Value uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *CountPlayerCurrentPlanetResponse) Reset()         { *m = CountPlayerCurrentPlanetResponse{} }
func (m *CountPlayerCurrentPlanetResponse) String() string { return proto.CompactTextString(m) }
func (*CountPlayerCurrentPlanetResponse) ProtoMessage()    {}
func (*CountPlayerCurrentPlanetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46147b2767fdd91, []int{12}
}
func (m *CountPlayerCurrentPlanetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPlayerCurrentPlanetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPlayerCurrentPlanetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPlayerCurrentPlanetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPlayerCurrentPlanetResponse.Merge(m, src)
}
func (m *CountPlayerCurrentPlanetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountPlayerCurrentPlanetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPlayerCurrentPlanetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountPlayerCurrentPlanetResponse proto.InternalMessageInfo

func (m *CountPlayerCurrentPlanetResponse) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayerPosition)(nil), "player_position.PlayerPosition")
	proto.RegisterType((*CreatePlayerPositionRequest)(nil), "player_position.CreatePlayerPositionRequest")
	proto.RegisterType((*CreatePlayerPositionResponse)(nil), "player_position.CreatePlayerPositionResponse")
	proto.RegisterType((*GetPlayerCurrentPlanetRequest)(nil), "player_position.GetPlayerCurrentPlanetRequest")
	proto.RegisterType((*GetPlayerCurrentPlanetResponse)(nil), "player_position.GetPlayerCurrentPlanetResponse")
	proto.RegisterType((*CountPlanetVisitedRequest)(nil), "player_position.CountPlanetVisitedRequest")
	proto.RegisterType((*CountPlanetVisitedResponse)(nil), "player_position.CountPlanetVisitedResponse")
	proto.RegisterType((*CountSystemVisitedRequest)(nil), "player_position.CountSystemVisitedRequest")
	proto.RegisterType((*CountSystemVisitedResponse)(nil), "player_position.CountSystemVisitedResponse")
	proto.RegisterType((*CountPlayerVisitedCurrentPlanetRequest)(nil), "player_position.CountPlayerVisitedCurrentPlanetRequest")
	proto.RegisterType((*CountPlayerVisitedCurrentPlanetResponse)(nil), "player_position.CountPlayerVisitedCurrentPlanetResponse")
	proto.RegisterType((*CountPlayerCurrentPlanetRequest)(nil), "player_position.CountPlayerCurrentPlanetRequest")
	proto.RegisterType((*CountPlayerCurrentPlanetResponse)(nil), "player_position.CountPlayerCurrentPlanetResponse")
}

func init() { proto.RegisterFile("proto/player_position.proto", fileDescriptor_b46147b2767fdd91) }

var fileDescriptor_b46147b2767fdd91 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x51, 0x8b, 0x8c, 0x58, 0x21, 0x78, 0xa8, 0xad, 0xae, 0x25, 0x87, 0xea, 0xa9,
	0x42, 0x3d, 0x28, 0x14, 0x11, 0x4c, 0x40, 0x73, 0x2b, 0x15, 0x8b, 0x78, 0x91, 0x14, 0xe7, 0x10,
	0xa8, 0xd9, 0xb8, 0xbb, 0x39, 0xe4, 0x2d, 0x7c, 0x2c, 0x8f, 0x3d, 0x7a, 0x94, 0xe4, 0x45, 0x84,
	0xdd, 0x6d, 0xb0, 0xa1, 0x8d, 0xd5, 0xe3, 0xcc, 0xfc, 0xdf, 0xff, 0x0f, 0x3b, 0x2c, 0xb4, 0x63,
	0xce, 0x24, 0x3b, 0x8b, 0xa7, 0x41, 0x8a, 0xfc, 0x39, 0x66, 0x22, 0x94, 0x21, 0x8b, 0x7a, 0xaa,
	0x6b, 0xef, 0x95, 0xda, 0x2d, 0xbb, 0x50, 0x47, 0x28, 0xb5, 0xc8, 0x79, 0x84, 0xc6, 0x50, 0xc9,
	0x86, 0x46, 0x65, 0x37, 0xc0, 0xf2, 0xbd, 0x26, 0xe9, 0x90, 0xd3, 0xdd, 0x91, 0xe5, 0x7b, 0x76,
	0x0b, 0xb6, 0xb5, 0xc2, 0xf7, 0x9a, 0x96, 0xea, 0x16, 0xb5, 0x99, 0x45, 0x28, 0x7d, 0xaf, 0xb9,
	0x51, 0xcc, 0x54, 0xed, 0x3c, 0x40, 0xdb, 0xe5, 0x18, 0x48, 0x5c, 0xf4, 0x1f, 0xe1, 0x5b, 0x82,
	0x42, 0x2e, 0xd8, 0x92, 0x0a, 0x5b, 0xab, 0x64, 0x4b, 0xe1, 0x70, 0xb9, 0xad, 0x88, 0x59, 0x24,
	0xd0, 0x19, 0xc0, 0xd1, 0x2d, 0x4a, 0x3d, 0x74, 0x13, 0xce, 0x31, 0x92, 0x9a, 0x5d, 0x23, 0xd8,
	0xb9, 0x03, 0xba, 0x0a, 0xd6, 0xf6, 0x76, 0x17, 0xea, 0xba, 0xa3, 0xd8, 0x9d, 0x7e, 0xa3, 0x67,
	0x9e, 0xd3, 0xe8, 0xcc, 0xd4, 0xb9, 0x80, 0x03, 0x97, 0x25, 0x73, 0x7c, 0x1c, 0x8a, 0x50, 0xe2,
	0xcb, 0x3a, 0x2b, 0xf4, 0xa1, 0xb5, 0x0c, 0x34, 0xf1, 0xfb, 0xb0, 0x35, 0x0e, 0xa6, 0x09, 0x1a,
	0x4c, 0x17, 0x45, 0xd8, 0x7d, 0x2a, 0x24, 0xbe, 0xfe, 0x23, 0xac, 0x04, 0x56, 0x86, 0x79, 0xd0,
	0x9d, 0x2f, 0x98, 0x22, 0x37, 0x4c, 0xc5, 0x4b, 0xeb, 0x33, 0x92, 0xd2, 0x19, 0xaf, 0xe1, 0xe4,
	0x57, 0x97, 0xca, 0x35, 0xae, 0xe0, 0xf8, 0x87, 0xc1, 0x9f, 0xf3, 0x2f, 0xa1, 0xb3, 0x1a, 0xaf,
	0x0a, 0xbe, 0xa1, 0x1f, 0x19, 0x25, 0xb3, 0x8c, 0x92, 0xaf, 0x8c, 0x92, 0xf7, 0x9c, 0xd6, 0x66,
	0x39, 0xad, 0x7d, 0xe6, 0xb4, 0xf6, 0xb4, 0xd9, 0x1b, 0xc4, 0x93, 0x49, 0x5d, 0x7d, 0xac, 0xf3,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0xde, 0xc1, 0x66, 0x9c, 0x03, 0x00, 0x00,
}

func (m *PlayerPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePlayerPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayerPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePlayerPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePlayerPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayerPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePlayerPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPlayerCurrentPlanetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerCurrentPlanetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerCurrentPlanetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerCurrentPlanetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerCurrentPlanetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerCurrentPlanetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Planet != nil {
		{
			size, err := m.Planet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayerPosition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountPlanetVisitedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPlanetVisitedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPlanetVisitedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountPlanetVisitedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPlanetVisitedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPlanetVisitedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountSystemVisitedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountSystemVisitedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountSystemVisitedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountSystemVisitedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountSystemVisitedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountSystemVisitedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountPlayerVisitedCurrentPlanetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPlayerVisitedCurrentPlanetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPlayerVisitedCurrentPlanetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountPlayerVisitedCurrentPlanetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPlayerVisitedCurrentPlanetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPlayerVisitedCurrentPlanetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountPlayerCurrentPlanetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPlayerCurrentPlanetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPlayerCurrentPlanetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetID != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountPlayerCurrentPlanetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPlayerCurrentPlanetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPlayerCurrentPlanetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintPlayerPosition(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayerPosition(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerPosition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.ID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlayerID))
	}
	if m.PlanetID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlanetID))
	}
	return n
}

func (m *CreatePlayerPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlayerID))
	}
	if m.PlanetID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlanetID))
	}
	return n
}

func (m *CreatePlayerPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPlayerCurrentPlanetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlayerID))
	}
	return n
}

func (m *GetPlayerCurrentPlanetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != nil {
		l = m.Planet.Size()
		n += 1 + l + sovPlayerPosition(uint64(l))
	}
	return n
}

func (m *CountPlanetVisitedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlayerID))
	}
	return n
}

func (m *CountPlanetVisitedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovPlayerPosition(uint64(m.Value))
	}
	return n
}

func (m *CountSystemVisitedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlayerID))
	}
	return n
}

func (m *CountSystemVisitedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovPlayerPosition(uint64(m.Value))
	}
	return n
}

func (m *CountPlayerVisitedCurrentPlanetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlanetID))
	}
	return n
}

func (m *CountPlayerVisitedCurrentPlanetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovPlayerPosition(uint64(m.Value))
	}
	return n
}

func (m *CountPlayerCurrentPlanetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovPlayerPosition(uint64(m.PlanetID))
	}
	return n
}

func (m *CountPlayerCurrentPlanetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovPlayerPosition(uint64(m.Value))
	}
	return n
}

func sovPlayerPosition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerPosition(x uint64) (n int) {
	return sovPlayerPosition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayerPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayerPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayerPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayerPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayerPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayerPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerCurrentPlanetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerCurrentPlanetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerCurrentPlanetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerCurrentPlanetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerCurrentPlanetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerCurrentPlanetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Planet == nil {
				m.Planet = &Planet{}
			}
			if err := m.Planet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPlanetVisitedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPlanetVisitedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPlanetVisitedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPlanetVisitedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPlanetVisitedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPlanetVisitedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountSystemVisitedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountSystemVisitedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountSystemVisitedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountSystemVisitedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountSystemVisitedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountSystemVisitedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPlayerVisitedCurrentPlanetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPlayerVisitedCurrentPlanetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPlayerVisitedCurrentPlanetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPlayerVisitedCurrentPlanetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPlayerVisitedCurrentPlanetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPlayerVisitedCurrentPlanetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPlayerCurrentPlanetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPlayerCurrentPlanetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPlayerCurrentPlanetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPlayerCurrentPlanetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPlayerCurrentPlanetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPlayerCurrentPlanetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerPosition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerPosition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerPosition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerPosition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerPosition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerPosition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerPosition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerPosition = fmt.Errorf("proto: unexpected end of group")
)
