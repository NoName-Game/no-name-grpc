// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/ability_category.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AbilityCategory struct {
	ID   uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug string `protobuf:"bytes,3,opt,name=Slug,proto3" json:"Slug,omitempty"`
}

func (m *AbilityCategory) Reset()         { *m = AbilityCategory{} }
func (m *AbilityCategory) String() string { return proto.CompactTextString(m) }
func (*AbilityCategory) ProtoMessage()    {}
func (*AbilityCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45ff9038c466eee, []int{0}
}
func (m *AbilityCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbilityCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbilityCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbilityCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbilityCategory.Merge(m, src)
}
func (m *AbilityCategory) XXX_Size() int {
	return m.Size()
}
func (m *AbilityCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_AbilityCategory.DiscardUnknown(m)
}

var xxx_messageInfo_AbilityCategory proto.InternalMessageInfo

func (m *AbilityCategory) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AbilityCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AbilityCategory) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// GetAllAbilityCategory
type GetAllAbilityCategoryRequest struct {
}

func (m *GetAllAbilityCategoryRequest) Reset()         { *m = GetAllAbilityCategoryRequest{} }
func (m *GetAllAbilityCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllAbilityCategoryRequest) ProtoMessage()    {}
func (*GetAllAbilityCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45ff9038c466eee, []int{1}
}
func (m *GetAllAbilityCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAbilityCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAbilityCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAbilityCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAbilityCategoryRequest.Merge(m, src)
}
func (m *GetAllAbilityCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAbilityCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAbilityCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAbilityCategoryRequest proto.InternalMessageInfo

type GetAllAbilityCategoryResponse struct {
	AbilityCategories []*AbilityCategory `protobuf:"bytes,1,rep,name=AbilityCategories,proto3" json:"AbilityCategories,omitempty"`
}

func (m *GetAllAbilityCategoryResponse) Reset()         { *m = GetAllAbilityCategoryResponse{} }
func (m *GetAllAbilityCategoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllAbilityCategoryResponse) ProtoMessage()    {}
func (*GetAllAbilityCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45ff9038c466eee, []int{2}
}
func (m *GetAllAbilityCategoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAbilityCategoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAbilityCategoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAbilityCategoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAbilityCategoryResponse.Merge(m, src)
}
func (m *GetAllAbilityCategoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAbilityCategoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAbilityCategoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAbilityCategoryResponse proto.InternalMessageInfo

func (m *GetAllAbilityCategoryResponse) GetAbilityCategories() []*AbilityCategory {
	if m != nil {
		return m.AbilityCategories
	}
	return nil
}

// GetAbilityCategoryBySlug
type GetAbilityCategoryBySlugRequest struct {
	Slug string `protobuf:"bytes,1,opt,name=Slug,proto3" json:"Slug,omitempty"`
}

func (m *GetAbilityCategoryBySlugRequest) Reset()         { *m = GetAbilityCategoryBySlugRequest{} }
func (m *GetAbilityCategoryBySlugRequest) String() string { return proto.CompactTextString(m) }
func (*GetAbilityCategoryBySlugRequest) ProtoMessage()    {}
func (*GetAbilityCategoryBySlugRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45ff9038c466eee, []int{3}
}
func (m *GetAbilityCategoryBySlugRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbilityCategoryBySlugRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbilityCategoryBySlugRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbilityCategoryBySlugRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbilityCategoryBySlugRequest.Merge(m, src)
}
func (m *GetAbilityCategoryBySlugRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAbilityCategoryBySlugRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbilityCategoryBySlugRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbilityCategoryBySlugRequest proto.InternalMessageInfo

func (m *GetAbilityCategoryBySlugRequest) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

type GetAbilityCategoryBySlugResponse struct {
	AbilityCategory *AbilityCategory `protobuf:"bytes,1,opt,name=AbilityCategory,proto3" json:"AbilityCategory,omitempty"`
}

func (m *GetAbilityCategoryBySlugResponse) Reset()         { *m = GetAbilityCategoryBySlugResponse{} }
func (m *GetAbilityCategoryBySlugResponse) String() string { return proto.CompactTextString(m) }
func (*GetAbilityCategoryBySlugResponse) ProtoMessage()    {}
func (*GetAbilityCategoryBySlugResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45ff9038c466eee, []int{4}
}
func (m *GetAbilityCategoryBySlugResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbilityCategoryBySlugResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbilityCategoryBySlugResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbilityCategoryBySlugResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbilityCategoryBySlugResponse.Merge(m, src)
}
func (m *GetAbilityCategoryBySlugResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAbilityCategoryBySlugResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbilityCategoryBySlugResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbilityCategoryBySlugResponse proto.InternalMessageInfo

func (m *GetAbilityCategoryBySlugResponse) GetAbilityCategory() *AbilityCategory {
	if m != nil {
		return m.AbilityCategory
	}
	return nil
}

func init() {
	proto.RegisterType((*AbilityCategory)(nil), "ability_category.AbilityCategory")
	proto.RegisterType((*GetAllAbilityCategoryRequest)(nil), "ability_category.GetAllAbilityCategoryRequest")
	proto.RegisterType((*GetAllAbilityCategoryResponse)(nil), "ability_category.GetAllAbilityCategoryResponse")
	proto.RegisterType((*GetAbilityCategoryBySlugRequest)(nil), "ability_category.GetAbilityCategoryBySlugRequest")
	proto.RegisterType((*GetAbilityCategoryBySlugResponse)(nil), "ability_category.GetAbilityCategoryBySlugResponse")
}

func init() { proto.RegisterFile("proto/ability_category.proto", fileDescriptor_f45ff9038c466eee) }

var fileDescriptor_f45ff9038c466eee = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4c, 0xca, 0xcc, 0xc9, 0x2c, 0xa9, 0x8c, 0x4f, 0x4e, 0x2c, 0x49, 0x4d, 0xcf,
	0x2f, 0xaa, 0xd4, 0x03, 0x0b, 0x0b, 0x09, 0xa0, 0x8b, 0x2b, 0x79, 0x72, 0xf1, 0x3b, 0x42, 0xc4,
	0x9c, 0xa1, 0x42, 0x42, 0x7c, 0x5c, 0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41,
	0x4c, 0x9e, 0x2e, 0x42, 0x42, 0x5c, 0x2c, 0x7e, 0x89, 0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x60, 0x36, 0x48, 0x2c, 0x38, 0xa7, 0x34, 0x5d, 0x82, 0x19, 0x22, 0x06, 0x62, 0x2b,
	0xc9, 0x71, 0xc9, 0xb8, 0xa7, 0x96, 0x38, 0xe6, 0xe4, 0xa0, 0x19, 0x18, 0x94, 0x5a, 0x58, 0x9a,
	0x5a, 0x5c, 0xa2, 0x54, 0xc0, 0x25, 0x8b, 0x43, 0xbe, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0xc8,
	0x9f, 0x4b, 0x10, 0x55, 0x2a, 0x33, 0xb5, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x51,
	0x0f, 0xc3, 0x47, 0xe8, 0xa6, 0x60, 0xea, 0x55, 0x32, 0xe5, 0x92, 0x07, 0xd9, 0x88, 0xaa, 0xd0,
	0xa9, 0x12, 0xe4, 0x5a, 0xa8, 0xa3, 0xe0, 0x1e, 0x61, 0x44, 0xf2, 0x48, 0x3e, 0x97, 0x02, 0x6e,
	0x6d, 0x50, 0xb7, 0x7a, 0x63, 0x84, 0x1b, 0xd8, 0x08, 0xa2, 0x5c, 0x8a, 0xae, 0xd3, 0x49, 0xee,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x58, 0xf4, 0xac, 0x0b, 0x92, 0x92,
	0xd8, 0xc0, 0xb1, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x21, 0xf3, 0x15, 0xf7, 0xdd, 0x01,
	0x00, 0x00,
}

func (m *AbilityCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbilityCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbilityCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintAbilityCategory(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAbilityCategory(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintAbilityCategory(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllAbilityCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAbilityCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAbilityCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllAbilityCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAbilityCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAbilityCategoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AbilityCategories) > 0 {
		for iNdEx := len(m.AbilityCategories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AbilityCategories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbilityCategory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAbilityCategoryBySlugRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbilityCategoryBySlugRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbilityCategoryBySlugRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintAbilityCategory(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAbilityCategoryBySlugResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbilityCategoryBySlugResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbilityCategoryBySlugResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AbilityCategory != nil {
		{
			size, err := m.AbilityCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbilityCategory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAbilityCategory(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbilityCategory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AbilityCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAbilityCategory(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAbilityCategory(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovAbilityCategory(uint64(l))
	}
	return n
}

func (m *GetAllAbilityCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllAbilityCategoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AbilityCategories) > 0 {
		for _, e := range m.AbilityCategories {
			l = e.Size()
			n += 1 + l + sovAbilityCategory(uint64(l))
		}
	}
	return n
}

func (m *GetAbilityCategoryBySlugRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovAbilityCategory(uint64(l))
	}
	return n
}

func (m *GetAbilityCategoryBySlugResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityCategory != nil {
		l = m.AbilityCategory.Size()
		n += 1 + l + sovAbilityCategory(uint64(l))
	}
	return n
}

func sovAbilityCategory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbilityCategory(x uint64) (n int) {
	return sovAbilityCategory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AbilityCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbilityCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbilityCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbilityCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbilityCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAbilityCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbilityCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAbilityCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAbilityCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAbilityCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAbilityCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbilityCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAbilityCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAbilityCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityCategories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbilityCategories = append(m.AbilityCategories, &AbilityCategory{})
			if err := m.AbilityCategories[len(m.AbilityCategories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbilityCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbilityCategoryBySlugRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbilityCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbilityCategoryBySlugRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbilityCategoryBySlugRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbilityCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbilityCategoryBySlugResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbilityCategory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbilityCategoryBySlugResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbilityCategoryBySlugResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbilityCategory == nil {
				m.AbilityCategory = &AbilityCategory{}
			}
			if err := m.AbilityCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbilityCategory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbilityCategory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbilityCategory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbilityCategory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbilityCategory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbilityCategory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbilityCategory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbilityCategory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbilityCategory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbilityCategory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbilityCategory = fmt.Errorf("proto: unexpected end of group")
)
