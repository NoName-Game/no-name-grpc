// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/achievement.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Achievement struct {
	ID                    uint32               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                  string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug                  string               `protobuf:"bytes,3,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Quantity              int64                `protobuf:"varint,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	GoldReward            int32                `protobuf:"varint,5,opt,name=GoldReward,proto3" json:"GoldReward,omitempty"`
	DiamondReward         int32                `protobuf:"varint,6,opt,name=DiamondReward,proto3" json:"DiamondReward,omitempty"`
	ExperienceReward      int32                `protobuf:"varint,7,opt,name=ExperienceReward,proto3" json:"ExperienceReward,omitempty"`
	AchievementCategoryID uint32               `protobuf:"varint,8,opt,name=AchievementCategoryID,proto3" json:"AchievementCategoryID,omitempty"`
	AchievementCategory   *AchievementCategory `protobuf:"bytes,9,opt,name=AchievementCategory,proto3" json:"AchievementCategory,omitempty"`
}

func (m *Achievement) Reset()         { *m = Achievement{} }
func (m *Achievement) String() string { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()    {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{0}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Achievement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Achievement) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Achievement) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Achievement) GetGoldReward() int32 {
	if m != nil {
		return m.GoldReward
	}
	return 0
}

func (m *Achievement) GetDiamondReward() int32 {
	if m != nil {
		return m.DiamondReward
	}
	return 0
}

func (m *Achievement) GetExperienceReward() int32 {
	if m != nil {
		return m.ExperienceReward
	}
	return 0
}

func (m *Achievement) GetAchievementCategoryID() uint32 {
	if m != nil {
		return m.AchievementCategoryID
	}
	return 0
}

func (m *Achievement) GetAchievementCategory() *AchievementCategory {
	if m != nil {
		return m.AchievementCategory
	}
	return nil
}

// GetAllAchievement
type GetAllAchievementRequest struct {
}

func (m *GetAllAchievementRequest) Reset()         { *m = GetAllAchievementRequest{} }
func (m *GetAllAchievementRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllAchievementRequest) ProtoMessage()    {}
func (*GetAllAchievementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{1}
}
func (m *GetAllAchievementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAchievementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAchievementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAchievementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAchievementRequest.Merge(m, src)
}
func (m *GetAllAchievementRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAchievementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAchievementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAchievementRequest proto.InternalMessageInfo

type GetAllAchievementResponse struct {
	Achievements []*Achievement `protobuf:"bytes,1,rep,name=Achievements,proto3" json:"Achievements,omitempty"`
}

func (m *GetAllAchievementResponse) Reset()         { *m = GetAllAchievementResponse{} }
func (m *GetAllAchievementResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllAchievementResponse) ProtoMessage()    {}
func (*GetAllAchievementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{2}
}
func (m *GetAllAchievementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAchievementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAchievementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAchievementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAchievementResponse.Merge(m, src)
}
func (m *GetAllAchievementResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAchievementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAchievementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAchievementResponse proto.InternalMessageInfo

func (m *GetAllAchievementResponse) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

// GetAchievementByID
type GetAchievementByIDRequest struct {
	AchievementID uint32 `protobuf:"varint,1,opt,name=AchievementID,proto3" json:"AchievementID,omitempty"`
}

func (m *GetAchievementByIDRequest) Reset()         { *m = GetAchievementByIDRequest{} }
func (m *GetAchievementByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetAchievementByIDRequest) ProtoMessage()    {}
func (*GetAchievementByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{3}
}
func (m *GetAchievementByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAchievementByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAchievementByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAchievementByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAchievementByIDRequest.Merge(m, src)
}
func (m *GetAchievementByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAchievementByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAchievementByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAchievementByIDRequest proto.InternalMessageInfo

func (m *GetAchievementByIDRequest) GetAchievementID() uint32 {
	if m != nil {
		return m.AchievementID
	}
	return 0
}

type GetAchievementByIDResponse struct {
	Achievement *Achievement `protobuf:"bytes,1,opt,name=Achievement,proto3" json:"Achievement,omitempty"`
}

func (m *GetAchievementByIDResponse) Reset()         { *m = GetAchievementByIDResponse{} }
func (m *GetAchievementByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetAchievementByIDResponse) ProtoMessage()    {}
func (*GetAchievementByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{4}
}
func (m *GetAchievementByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAchievementByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAchievementByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAchievementByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAchievementByIDResponse.Merge(m, src)
}
func (m *GetAchievementByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAchievementByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAchievementByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAchievementByIDResponse proto.InternalMessageInfo

func (m *GetAchievementByIDResponse) GetAchievement() *Achievement {
	if m != nil {
		return m.Achievement
	}
	return nil
}

// GetAchievementsByCategoryID
type GetAchievementsByCategoryIDRequest struct {
	CategoryID uint32 `protobuf:"varint,1,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
}

func (m *GetAchievementsByCategoryIDRequest) Reset()         { *m = GetAchievementsByCategoryIDRequest{} }
func (m *GetAchievementsByCategoryIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetAchievementsByCategoryIDRequest) ProtoMessage()    {}
func (*GetAchievementsByCategoryIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{5}
}
func (m *GetAchievementsByCategoryIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAchievementsByCategoryIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAchievementsByCategoryIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAchievementsByCategoryIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAchievementsByCategoryIDRequest.Merge(m, src)
}
func (m *GetAchievementsByCategoryIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAchievementsByCategoryIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAchievementsByCategoryIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAchievementsByCategoryIDRequest proto.InternalMessageInfo

func (m *GetAchievementsByCategoryIDRequest) GetCategoryID() uint32 {
	if m != nil {
		return m.CategoryID
	}
	return 0
}

type GetAchievementsByCategoryIDResponse struct {
	Achievements []*Achievement `protobuf:"bytes,1,rep,name=Achievements,proto3" json:"Achievements,omitempty"`
}

func (m *GetAchievementsByCategoryIDResponse) Reset()         { *m = GetAchievementsByCategoryIDResponse{} }
func (m *GetAchievementsByCategoryIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetAchievementsByCategoryIDResponse) ProtoMessage()    {}
func (*GetAchievementsByCategoryIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{6}
}
func (m *GetAchievementsByCategoryIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAchievementsByCategoryIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAchievementsByCategoryIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAchievementsByCategoryIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAchievementsByCategoryIDResponse.Merge(m, src)
}
func (m *GetAchievementsByCategoryIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAchievementsByCategoryIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAchievementsByCategoryIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAchievementsByCategoryIDResponse proto.InternalMessageInfo

func (m *GetAchievementsByCategoryIDResponse) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

// GetAchievementForPlayerByCategory
type GetAchievementForPlayerByCategoryRequest struct {
	PlayerID              uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	AchievementCategoryID uint32 `protobuf:"varint,2,opt,name=AchievementCategoryID,proto3" json:"AchievementCategoryID,omitempty"`
}

func (m *GetAchievementForPlayerByCategoryRequest) Reset() {
	*m = GetAchievementForPlayerByCategoryRequest{}
}
func (m *GetAchievementForPlayerByCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetAchievementForPlayerByCategoryRequest) ProtoMessage()    {}
func (*GetAchievementForPlayerByCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{7}
}
func (m *GetAchievementForPlayerByCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAchievementForPlayerByCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAchievementForPlayerByCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAchievementForPlayerByCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAchievementForPlayerByCategoryRequest.Merge(m, src)
}
func (m *GetAchievementForPlayerByCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAchievementForPlayerByCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAchievementForPlayerByCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAchievementForPlayerByCategoryRequest proto.InternalMessageInfo

func (m *GetAchievementForPlayerByCategoryRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GetAchievementForPlayerByCategoryRequest) GetAchievementCategoryID() uint32 {
	if m != nil {
		return m.AchievementCategoryID
	}
	return 0
}

type GetAchievementForPlayerByCategoryResponse struct {
	Achievement *Achievement `protobuf:"bytes,1,opt,name=Achievement,proto3" json:"Achievement,omitempty"`
}

func (m *GetAchievementForPlayerByCategoryResponse) Reset() {
	*m = GetAchievementForPlayerByCategoryResponse{}
}
func (m *GetAchievementForPlayerByCategoryResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetAchievementForPlayerByCategoryResponse) ProtoMessage() {}
func (*GetAchievementForPlayerByCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{8}
}
func (m *GetAchievementForPlayerByCategoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAchievementForPlayerByCategoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAchievementForPlayerByCategoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAchievementForPlayerByCategoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAchievementForPlayerByCategoryResponse.Merge(m, src)
}
func (m *GetAchievementForPlayerByCategoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAchievementForPlayerByCategoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAchievementForPlayerByCategoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAchievementForPlayerByCategoryResponse proto.InternalMessageInfo

func (m *GetAchievementForPlayerByCategoryResponse) GetAchievement() *Achievement {
	if m != nil {
		return m.Achievement
	}
	return nil
}

// CheckIfPlayerHaveAchievement
type CheckIfPlayerHaveAchievementRequest struct {
	PlayerID      uint32 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	AchievementID uint32 `protobuf:"varint,2,opt,name=AchievementID,proto3" json:"AchievementID,omitempty"`
}

func (m *CheckIfPlayerHaveAchievementRequest) Reset()         { *m = CheckIfPlayerHaveAchievementRequest{} }
func (m *CheckIfPlayerHaveAchievementRequest) String() string { return proto.CompactTextString(m) }
func (*CheckIfPlayerHaveAchievementRequest) ProtoMessage()    {}
func (*CheckIfPlayerHaveAchievementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{9}
}
func (m *CheckIfPlayerHaveAchievementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIfPlayerHaveAchievementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIfPlayerHaveAchievementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIfPlayerHaveAchievementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIfPlayerHaveAchievementRequest.Merge(m, src)
}
func (m *CheckIfPlayerHaveAchievementRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckIfPlayerHaveAchievementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIfPlayerHaveAchievementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIfPlayerHaveAchievementRequest proto.InternalMessageInfo

func (m *CheckIfPlayerHaveAchievementRequest) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *CheckIfPlayerHaveAchievementRequest) GetAchievementID() uint32 {
	if m != nil {
		return m.AchievementID
	}
	return 0
}

type CheckIfPlayerHaveAchievementResponse struct {
	HaveAchievement bool         `protobuf:"varint,1,opt,name=haveAchievement,proto3" json:"haveAchievement,omitempty"`
	Achievement     *Achievement `protobuf:"bytes,2,opt,name=Achievement,proto3" json:"Achievement,omitempty"`
}

func (m *CheckIfPlayerHaveAchievementResponse) Reset()         { *m = CheckIfPlayerHaveAchievementResponse{} }
func (m *CheckIfPlayerHaveAchievementResponse) String() string { return proto.CompactTextString(m) }
func (*CheckIfPlayerHaveAchievementResponse) ProtoMessage()    {}
func (*CheckIfPlayerHaveAchievementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4732ecd86297bb9, []int{10}
}
func (m *CheckIfPlayerHaveAchievementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIfPlayerHaveAchievementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIfPlayerHaveAchievementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIfPlayerHaveAchievementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIfPlayerHaveAchievementResponse.Merge(m, src)
}
func (m *CheckIfPlayerHaveAchievementResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckIfPlayerHaveAchievementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIfPlayerHaveAchievementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIfPlayerHaveAchievementResponse proto.InternalMessageInfo

func (m *CheckIfPlayerHaveAchievementResponse) GetHaveAchievement() bool {
	if m != nil {
		return m.HaveAchievement
	}
	return false
}

func (m *CheckIfPlayerHaveAchievementResponse) GetAchievement() *Achievement {
	if m != nil {
		return m.Achievement
	}
	return nil
}

func init() {
	proto.RegisterType((*Achievement)(nil), "achievement.Achievement")
	proto.RegisterType((*GetAllAchievementRequest)(nil), "achievement.GetAllAchievementRequest")
	proto.RegisterType((*GetAllAchievementResponse)(nil), "achievement.GetAllAchievementResponse")
	proto.RegisterType((*GetAchievementByIDRequest)(nil), "achievement.GetAchievementByIDRequest")
	proto.RegisterType((*GetAchievementByIDResponse)(nil), "achievement.GetAchievementByIDResponse")
	proto.RegisterType((*GetAchievementsByCategoryIDRequest)(nil), "achievement.GetAchievementsByCategoryIDRequest")
	proto.RegisterType((*GetAchievementsByCategoryIDResponse)(nil), "achievement.GetAchievementsByCategoryIDResponse")
	proto.RegisterType((*GetAchievementForPlayerByCategoryRequest)(nil), "achievement.GetAchievementForPlayerByCategoryRequest")
	proto.RegisterType((*GetAchievementForPlayerByCategoryResponse)(nil), "achievement.GetAchievementForPlayerByCategoryResponse")
	proto.RegisterType((*CheckIfPlayerHaveAchievementRequest)(nil), "achievement.CheckIfPlayerHaveAchievementRequest")
	proto.RegisterType((*CheckIfPlayerHaveAchievementResponse)(nil), "achievement.CheckIfPlayerHaveAchievementResponse")
}

func init() { proto.RegisterFile("proto/achievement.proto", fileDescriptor_d4732ecd86297bb9) }

var fileDescriptor_d4732ecd86297bb9 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x3a, 0x69, 0x49, 0x27, 0x14, 0xd0, 0x22, 0xc4, 0xe2, 0xc3, 0xca, 0xda, 0xf6, 0xe0,
	0x72, 0x08, 0x52, 0xe1, 0x04, 0x5c, 0x92, 0x1a, 0x8a, 0x2f, 0x08, 0x96, 0x0b, 0x1f, 0x07, 0xe4,
	0xba, 0x43, 0x12, 0xe1, 0xd8, 0xc1, 0x76, 0x0a, 0x96, 0xf8, 0x09, 0x1c, 0xf8, 0x59, 0x1c, 0x7b,
	0xe4, 0x88, 0x12, 0x89, 0xdf, 0x81, 0x62, 0x3b, 0xc9, 0xba, 0x59, 0x2c, 0x90, 0x7a, 0xdb, 0x7d,
	0xef, 0x79, 0xe6, 0xbd, 0x9d, 0x91, 0xe1, 0xf6, 0x24, 0x8e, 0xd2, 0xe8, 0x9e, 0xe7, 0x0f, 0x47,
	0x78, 0x86, 0x63, 0x0c, 0xd3, 0x6e, 0x8e, 0xd0, 0x8e, 0x02, 0x99, 0xd6, 0x86, 0xea, 0xbd, 0xef,
	0xa5, 0x38, 0x88, 0xe2, 0xac, 0x90, 0x8b, 0xdf, 0x06, 0x74, 0x7a, 0x6b, 0x9a, 0x5e, 0x03, 0xc3,
	0x75, 0x18, 0xb1, 0x88, 0xbd, 0x2b, 0x0d, 0xd7, 0xa1, 0x14, 0x5a, 0xcf, 0xbd, 0x31, 0x32, 0xc3,
	0x22, 0xf6, 0x8e, 0xcc, 0xcf, 0x0b, 0xec, 0x55, 0x30, 0x1d, 0xb0, 0x66, 0x81, 0x2d, 0xce, 0xd4,
	0x84, 0xf6, 0xcb, 0xa9, 0x17, 0xa6, 0xa3, 0x34, 0x63, 0x2d, 0x8b, 0xd8, 0x4d, 0xb9, 0xba, 0x53,
	0x0e, 0x70, 0x1c, 0x05, 0xa7, 0x12, 0x3f, 0x7b, 0xf1, 0x29, 0xdb, 0xb2, 0x88, 0xbd, 0x25, 0x15,
	0x84, 0xee, 0xc3, 0xae, 0x33, 0xf2, 0xc6, 0x51, 0xb8, 0x94, 0x6c, 0xe7, 0x92, 0x2a, 0x48, 0xef,
	0xc2, 0x8d, 0x27, 0x5f, 0x26, 0x18, 0x8f, 0x30, 0xf4, 0xb1, 0x14, 0x5e, 0xc9, 0x85, 0x1b, 0x38,
	0x7d, 0x00, 0xb7, 0x94, 0x50, 0x47, 0x65, 0x64, 0xd7, 0x61, 0xed, 0x3c, 0x98, 0x9e, 0xa4, 0xef,
	0xe0, 0xa6, 0x86, 0x60, 0x3b, 0x16, 0xb1, 0x3b, 0x87, 0x07, 0x5d, 0xed, 0x2b, 0x6a, 0x3e, 0x90,
	0xba, 0x2a, 0xc2, 0x04, 0x76, 0x8c, 0x69, 0x2f, 0x08, 0x14, 0x52, 0xe2, 0xa7, 0x29, 0x26, 0xa9,
	0x78, 0x03, 0x77, 0x34, 0x5c, 0x32, 0x89, 0xc2, 0x04, 0xe9, 0x63, 0xb8, 0xaa, 0xc0, 0x09, 0x23,
	0x56, 0xd3, 0xee, 0x1c, 0x32, 0xd5, 0x8e, 0xea, 0x42, 0x56, 0xd4, 0xa2, 0x57, 0x94, 0x5e, 0x43,
	0xfd, 0xcc, 0x75, 0xca, 0xbe, 0x8b, 0x87, 0x57, 0x98, 0xd5, 0xdc, 0xab, 0xa0, 0x78, 0x0d, 0xa6,
	0xae, 0x44, 0x69, 0xef, 0x61, 0x65, 0x7f, 0xf2, 0x0a, 0x75, 0xee, 0x54, 0xb1, 0x70, 0x40, 0x54,
	0x2b, 0x27, 0xfd, 0x6c, 0x3d, 0x8f, 0xa5, 0x4b, 0x0e, 0xa0, 0x4c, 0xb0, 0xb0, 0xa8, 0x20, 0xc2,
	0x87, 0xbd, 0xda, 0x2a, 0x97, 0xf2, 0x8e, 0x5f, 0xc1, 0xae, 0x36, 0x79, 0x1a, 0xc5, 0x2f, 0x02,
	0x2f, 0xc3, 0x78, 0xdd, 0x6c, 0x69, 0xd8, 0x84, 0x76, 0x41, 0xad, 0xec, 0xae, 0xee, 0x7f, 0xdf,
	0x4c, 0xa3, 0x66, 0x33, 0xc5, 0x00, 0x0e, 0xfe, 0xa1, 0xfb, 0x25, 0x4c, 0x64, 0x00, 0x7b, 0x47,
	0x43, 0xf4, 0x3f, 0xba, 0x1f, 0x8a, 0xf2, 0xcf, 0xbc, 0x33, 0xdc, 0x5c, 0xd8, 0xda, 0x84, 0x1b,
	0x4b, 0x65, 0xe8, 0x96, 0xea, 0x1b, 0x81, 0xfd, 0xfa, 0x4e, 0x65, 0x1a, 0x1b, 0xae, 0x0f, 0xab,
	0x54, 0xde, 0xb1, 0x2d, 0x2f, 0xc2, 0x17, 0x73, 0x1b, 0xff, 0x91, 0xbb, 0xcf, 0x7f, 0xcc, 0x38,
	0x39, 0x9f, 0x71, 0xf2, 0x6b, 0xc6, 0xc9, 0xf7, 0x39, 0x6f, 0x9c, 0xcf, 0x79, 0xe3, 0xe7, 0x9c,
	0x37, 0xde, 0xb6, 0xba, 0x8f, 0x26, 0x27, 0x27, 0xdb, 0xf9, 0xdf, 0xf2, 0xfe, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x92, 0x1a, 0xdc, 0xc8, 0x77, 0x05, 0x00, 0x00,
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AchievementCategory != nil {
		{
			size, err := m.AchievementCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAchievement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.AchievementCategoryID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.AchievementCategoryID))
		i--
		dAtA[i] = 0x40
	}
	if m.ExperienceReward != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.ExperienceReward))
		i--
		dAtA[i] = 0x38
	}
	if m.DiamondReward != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.DiamondReward))
		i--
		dAtA[i] = 0x30
	}
	if m.GoldReward != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.GoldReward))
		i--
		dAtA[i] = 0x28
	}
	if m.Quantity != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintAchievement(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAchievement(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllAchievementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAchievementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAchievementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllAchievementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAchievementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAchievementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAchievement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAchievementByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAchievementByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAchievementByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AchievementID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.AchievementID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAchievementByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAchievementByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAchievementByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Achievement != nil {
		{
			size, err := m.Achievement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAchievement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAchievementsByCategoryIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAchievementsByCategoryIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAchievementsByCategoryIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CategoryID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CategoryID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAchievementsByCategoryIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAchievementsByCategoryIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAchievementsByCategoryIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAchievement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAchievementForPlayerByCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAchievementForPlayerByCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAchievementForPlayerByCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AchievementCategoryID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.AchievementCategoryID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAchievementForPlayerByCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAchievementForPlayerByCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAchievementForPlayerByCategoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Achievement != nil {
		{
			size, err := m.Achievement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAchievement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckIfPlayerHaveAchievementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIfPlayerHaveAchievementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIfPlayerHaveAchievementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AchievementID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.AchievementID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckIfPlayerHaveAchievementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIfPlayerHaveAchievementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIfPlayerHaveAchievementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Achievement != nil {
		{
			size, err := m.Achievement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAchievement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HaveAchievement {
		i--
		if m.HaveAchievement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAchievement(dAtA []byte, offset int, v uint64) int {
	offset -= sovAchievement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAchievement(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAchievement(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovAchievement(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovAchievement(uint64(m.Quantity))
	}
	if m.GoldReward != 0 {
		n += 1 + sovAchievement(uint64(m.GoldReward))
	}
	if m.DiamondReward != 0 {
		n += 1 + sovAchievement(uint64(m.DiamondReward))
	}
	if m.ExperienceReward != 0 {
		n += 1 + sovAchievement(uint64(m.ExperienceReward))
	}
	if m.AchievementCategoryID != 0 {
		n += 1 + sovAchievement(uint64(m.AchievementCategoryID))
	}
	if m.AchievementCategory != nil {
		l = m.AchievementCategory.Size()
		n += 1 + l + sovAchievement(uint64(l))
	}
	return n
}

func (m *GetAllAchievementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllAchievementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovAchievement(uint64(l))
		}
	}
	return n
}

func (m *GetAchievementByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AchievementID != 0 {
		n += 1 + sovAchievement(uint64(m.AchievementID))
	}
	return n
}

func (m *GetAchievementByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Achievement != nil {
		l = m.Achievement.Size()
		n += 1 + l + sovAchievement(uint64(l))
	}
	return n
}

func (m *GetAchievementsByCategoryIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CategoryID != 0 {
		n += 1 + sovAchievement(uint64(m.CategoryID))
	}
	return n
}

func (m *GetAchievementsByCategoryIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovAchievement(uint64(l))
		}
	}
	return n
}

func (m *GetAchievementForPlayerByCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAchievement(uint64(m.PlayerID))
	}
	if m.AchievementCategoryID != 0 {
		n += 1 + sovAchievement(uint64(m.AchievementCategoryID))
	}
	return n
}

func (m *GetAchievementForPlayerByCategoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Achievement != nil {
		l = m.Achievement.Size()
		n += 1 + l + sovAchievement(uint64(l))
	}
	return n
}

func (m *CheckIfPlayerHaveAchievementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovAchievement(uint64(m.PlayerID))
	}
	if m.AchievementID != 0 {
		n += 1 + sovAchievement(uint64(m.AchievementID))
	}
	return n
}

func (m *CheckIfPlayerHaveAchievementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HaveAchievement {
		n += 2
	}
	if m.Achievement != nil {
		l = m.Achievement.Size()
		n += 1 + l + sovAchievement(uint64(l))
	}
	return n
}

func sovAchievement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAchievement(x uint64) (n int) {
	return sovAchievement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldReward", wireType)
			}
			m.GoldReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldReward |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondReward", wireType)
			}
			m.DiamondReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiamondReward |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperienceReward", wireType)
			}
			m.ExperienceReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExperienceReward |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementCategoryID", wireType)
			}
			m.AchievementCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AchievementCategory == nil {
				m.AchievementCategory = &AchievementCategory{}
			}
			if err := m.AchievementCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAchievementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAchievementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAchievementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAchievementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAchievementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAchievementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAchievementByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementID", wireType)
			}
			m.AchievementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAchievementByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Achievement == nil {
				m.Achievement = &Achievement{}
			}
			if err := m.Achievement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAchievementsByCategoryIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementsByCategoryIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementsByCategoryIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryID", wireType)
			}
			m.CategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAchievementsByCategoryIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementsByCategoryIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementsByCategoryIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAchievementForPlayerByCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementForPlayerByCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementForPlayerByCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementCategoryID", wireType)
			}
			m.AchievementCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementCategoryID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAchievementForPlayerByCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementForPlayerByCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementForPlayerByCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Achievement == nil {
				m.Achievement = &Achievement{}
			}
			if err := m.Achievement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIfPlayerHaveAchievementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAchievementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAchievementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementID", wireType)
			}
			m.AchievementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIfPlayerHaveAchievementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAchievementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIfPlayerHaveAchievementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveAchievement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveAchievement = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Achievement == nil {
				m.Achievement = &Achievement{}
			}
			if err := m.Achievement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchievement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAchievement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAchievement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAchievement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAchievement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchievement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAchievement = fmt.Errorf("proto: unexpected end of group")
)
