// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/rarity.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Rarity struct {
	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug        string `protobuf:"bytes,3,opt,name=Slug,proto3" json:"Slug,omitempty"`
	LevelToEuip int32  `protobuf:"varint,4,opt,name=LevelToEuip,proto3" json:"LevelToEuip,omitempty"`
}

func (m *Rarity) Reset()         { *m = Rarity{} }
func (m *Rarity) String() string { return proto.CompactTextString(m) }
func (*Rarity) ProtoMessage()    {}
func (*Rarity) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9f0e6277ebd392, []int{0}
}
func (m *Rarity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rarity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rarity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rarity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rarity.Merge(m, src)
}
func (m *Rarity) XXX_Size() int {
	return m.Size()
}
func (m *Rarity) XXX_DiscardUnknown() {
	xxx_messageInfo_Rarity.DiscardUnknown(m)
}

var xxx_messageInfo_Rarity proto.InternalMessageInfo

func (m *Rarity) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Rarity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rarity) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Rarity) GetLevelToEuip() int32 {
	if m != nil {
		return m.LevelToEuip
	}
	return 0
}

// GetAllRarities
type GetAllRaritiesRequest struct {
}

func (m *GetAllRaritiesRequest) Reset()         { *m = GetAllRaritiesRequest{} }
func (m *GetAllRaritiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRaritiesRequest) ProtoMessage()    {}
func (*GetAllRaritiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9f0e6277ebd392, []int{1}
}
func (m *GetAllRaritiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRaritiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRaritiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllRaritiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRaritiesRequest.Merge(m, src)
}
func (m *GetAllRaritiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRaritiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRaritiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRaritiesRequest proto.InternalMessageInfo

type GetAllRaritiesResponse struct {
	Rarities []*Rarity `protobuf:"bytes,1,rep,name=Rarities,proto3" json:"Rarities,omitempty"`
}

func (m *GetAllRaritiesResponse) Reset()         { *m = GetAllRaritiesResponse{} }
func (m *GetAllRaritiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllRaritiesResponse) ProtoMessage()    {}
func (*GetAllRaritiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9f0e6277ebd392, []int{2}
}
func (m *GetAllRaritiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRaritiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRaritiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllRaritiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRaritiesResponse.Merge(m, src)
}
func (m *GetAllRaritiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRaritiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRaritiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRaritiesResponse proto.InternalMessageInfo

func (m *GetAllRaritiesResponse) GetRarities() []*Rarity {
	if m != nil {
		return m.Rarities
	}
	return nil
}

// GetAllCraftableRarities
type GetAllCraftableRaritiesRequest struct {
}

func (m *GetAllCraftableRaritiesRequest) Reset()         { *m = GetAllCraftableRaritiesRequest{} }
func (m *GetAllCraftableRaritiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllCraftableRaritiesRequest) ProtoMessage()    {}
func (*GetAllCraftableRaritiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9f0e6277ebd392, []int{3}
}
func (m *GetAllCraftableRaritiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCraftableRaritiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCraftableRaritiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCraftableRaritiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCraftableRaritiesRequest.Merge(m, src)
}
func (m *GetAllCraftableRaritiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCraftableRaritiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCraftableRaritiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCraftableRaritiesRequest proto.InternalMessageInfo

type GetAllCraftableRaritiesResponse struct {
	Rarities []*Rarity `protobuf:"bytes,1,rep,name=Rarities,proto3" json:"Rarities,omitempty"`
}

func (m *GetAllCraftableRaritiesResponse) Reset()         { *m = GetAllCraftableRaritiesResponse{} }
func (m *GetAllCraftableRaritiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllCraftableRaritiesResponse) ProtoMessage()    {}
func (*GetAllCraftableRaritiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9f0e6277ebd392, []int{4}
}
func (m *GetAllCraftableRaritiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCraftableRaritiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCraftableRaritiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCraftableRaritiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCraftableRaritiesResponse.Merge(m, src)
}
func (m *GetAllCraftableRaritiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCraftableRaritiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCraftableRaritiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCraftableRaritiesResponse proto.InternalMessageInfo

func (m *GetAllCraftableRaritiesResponse) GetRarities() []*Rarity {
	if m != nil {
		return m.Rarities
	}
	return nil
}

// GetRarityByID
type GetRarityByIDRequest struct {
	RarityID uint32 `protobuf:"varint,1,opt,name=RarityID,proto3" json:"RarityID,omitempty"`
}

func (m *GetRarityByIDRequest) Reset()         { *m = GetRarityByIDRequest{} }
func (m *GetRarityByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetRarityByIDRequest) ProtoMessage()    {}
func (*GetRarityByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9f0e6277ebd392, []int{5}
}
func (m *GetRarityByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRarityByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRarityByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRarityByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRarityByIDRequest.Merge(m, src)
}
func (m *GetRarityByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRarityByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRarityByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRarityByIDRequest proto.InternalMessageInfo

func (m *GetRarityByIDRequest) GetRarityID() uint32 {
	if m != nil {
		return m.RarityID
	}
	return 0
}

type GetRarityByIDResponse struct {
	Rarity *Rarity `protobuf:"bytes,1,opt,name=Rarity,proto3" json:"Rarity,omitempty"`
}

func (m *GetRarityByIDResponse) Reset()         { *m = GetRarityByIDResponse{} }
func (m *GetRarityByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetRarityByIDResponse) ProtoMessage()    {}
func (*GetRarityByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d9f0e6277ebd392, []int{6}
}
func (m *GetRarityByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRarityByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRarityByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRarityByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRarityByIDResponse.Merge(m, src)
}
func (m *GetRarityByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRarityByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRarityByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRarityByIDResponse proto.InternalMessageInfo

func (m *GetRarityByIDResponse) GetRarity() *Rarity {
	if m != nil {
		return m.Rarity
	}
	return nil
}

func init() {
	proto.RegisterType((*Rarity)(nil), "rarity.Rarity")
	proto.RegisterType((*GetAllRaritiesRequest)(nil), "rarity.GetAllRaritiesRequest")
	proto.RegisterType((*GetAllRaritiesResponse)(nil), "rarity.GetAllRaritiesResponse")
	proto.RegisterType((*GetAllCraftableRaritiesRequest)(nil), "rarity.GetAllCraftableRaritiesRequest")
	proto.RegisterType((*GetAllCraftableRaritiesResponse)(nil), "rarity.GetAllCraftableRaritiesResponse")
	proto.RegisterType((*GetRarityByIDRequest)(nil), "rarity.GetRarityByIDRequest")
	proto.RegisterType((*GetRarityByIDResponse)(nil), "rarity.GetRarityByIDResponse")
}

func init() { proto.RegisterFile("proto/rarity.proto", fileDescriptor_3d9f0e6277ebd392) }

var fileDescriptor_3d9f0e6277ebd392 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4a, 0x2c, 0xca, 0x2c, 0xa9, 0xd4, 0x03, 0x73, 0x84, 0xd8, 0x20, 0x3c, 0xa5,
	0x24, 0x2e, 0xb6, 0x20, 0x30, 0x4b, 0x88, 0x8f, 0x8b, 0xc9, 0xd3, 0x45, 0x82, 0x51, 0x81, 0x51,
	0x83, 0x37, 0x88, 0xc9, 0xd3, 0x45, 0x48, 0x88, 0x8b, 0xc5, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x49,
	0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x06, 0x89, 0x05, 0xe7, 0x94, 0xa6, 0x4b, 0x30, 0x43, 0xc4,
	0x40, 0x6c, 0x21, 0x05, 0x2e, 0x6e, 0x9f, 0xd4, 0xb2, 0xd4, 0x9c, 0x90, 0x7c, 0xd7, 0xd2, 0xcc,
	0x02, 0x09, 0x16, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x64, 0x21, 0x25, 0x71, 0x2e, 0x51, 0xf7, 0xd4,
	0x12, 0xc7, 0x9c, 0x1c, 0xb0, 0x4d, 0x99, 0xa9, 0xc5, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x4a, 0x2e, 0x5c, 0x62, 0xe8, 0x12, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x5a, 0x5c, 0x1c,
	0x30, 0x31, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x3e, 0x3d, 0xa8, 0xfb, 0x21, 0xce, 0x0d,
	0x82, 0xcb, 0x2b, 0x29, 0x70, 0xc9, 0x41, 0x4c, 0x71, 0x2e, 0x4a, 0x4c, 0x2b, 0x49, 0x4c, 0xca,
	0x49, 0x45, 0xb7, 0xc7, 0x97, 0x4b, 0x1e, 0xa7, 0x0a, 0x32, 0x2c, 0x34, 0xe2, 0x12, 0x71, 0x4f,
	0x2d, 0x81, 0x08, 0x3b, 0x55, 0x7a, 0xba, 0x40, 0xad, 0x11, 0x92, 0x82, 0x9a, 0x51, 0x09, 0x0f,
	0x47, 0x38, 0x5f, 0xc9, 0x1e, 0x1c, 0x06, 0xc8, 0x7a, 0xa0, 0x16, 0xab, 0xc1, 0x22, 0x00, 0xac,
	0x05, 0xd3, 0x5a, 0xa8, 0xac, 0x93, 0xdc, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31,
	0x44, 0xb1, 0xe8, 0x59, 0x17, 0x24, 0x25, 0xb1, 0x81, 0xe3, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x06, 0xb9, 0x7c, 0xdf, 0xed, 0x01, 0x00, 0x00,
}

func (m *Rarity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rarity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rarity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LevelToEuip != 0 {
		i = encodeVarintRarity(dAtA, i, uint64(m.LevelToEuip))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintRarity(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRarity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintRarity(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllRaritiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRaritiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllRaritiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllRaritiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRaritiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllRaritiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rarities) > 0 {
		for iNdEx := len(m.Rarities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rarities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRarity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllCraftableRaritiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCraftableRaritiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCraftableRaritiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllCraftableRaritiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCraftableRaritiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCraftableRaritiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rarities) > 0 {
		for iNdEx := len(m.Rarities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rarities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRarity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRarityByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRarityByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRarityByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RarityID != 0 {
		i = encodeVarintRarity(dAtA, i, uint64(m.RarityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRarityByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRarityByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRarityByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rarity != nil {
		{
			size, err := m.Rarity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRarity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRarity(dAtA []byte, offset int, v uint64) int {
	offset -= sovRarity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rarity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovRarity(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRarity(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovRarity(uint64(l))
	}
	if m.LevelToEuip != 0 {
		n += 1 + sovRarity(uint64(m.LevelToEuip))
	}
	return n
}

func (m *GetAllRaritiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllRaritiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rarities) > 0 {
		for _, e := range m.Rarities {
			l = e.Size()
			n += 1 + l + sovRarity(uint64(l))
		}
	}
	return n
}

func (m *GetAllCraftableRaritiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllCraftableRaritiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rarities) > 0 {
		for _, e := range m.Rarities {
			l = e.Size()
			n += 1 + l + sovRarity(uint64(l))
		}
	}
	return n
}

func (m *GetRarityByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RarityID != 0 {
		n += 1 + sovRarity(uint64(m.RarityID))
	}
	return n
}

func (m *GetRarityByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rarity != nil {
		l = m.Rarity.Size()
		n += 1 + l + sovRarity(uint64(l))
	}
	return n
}

func sovRarity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRarity(x uint64) (n int) {
	return sovRarity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rarity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rarity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rarity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRarity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRarity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRarity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRarity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelToEuip", wireType)
			}
			m.LevelToEuip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelToEuip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRarity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRaritiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRaritiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRaritiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRarity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRaritiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRaritiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRaritiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRarity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRarity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rarities = append(m.Rarities, &Rarity{})
			if err := m.Rarities[len(m.Rarities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRarity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllCraftableRaritiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCraftableRaritiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCraftableRaritiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRarity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllCraftableRaritiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCraftableRaritiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCraftableRaritiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRarity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRarity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rarities = append(m.Rarities, &Rarity{})
			if err := m.Rarities[len(m.Rarities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRarity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRarityByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRarityByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRarityByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RarityID", wireType)
			}
			m.RarityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RarityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRarity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRarityByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRarityByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRarityByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRarity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRarity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rarity == nil {
				m.Rarity = &Rarity{}
			}
			if err := m.Rarity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRarity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRarity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRarity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRarity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRarity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRarity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRarity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRarity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRarity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRarity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRarity = fmt.Errorf("proto: unexpected end of group")
)
