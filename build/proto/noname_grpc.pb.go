// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoNameClient is the client API for NoName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoNameClient interface {
	// Armor
	GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error)
	GetArmorByName(ctx context.Context, in *GetArmorByNameRequest, opts ...grpc.CallOption) (*GetArmorByNameResponse, error)
	UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error)
	GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error)
	GetPlayerArmorsByCategoryID(ctx context.Context, in *GetPlayerArmorsByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorsByCategoryIDResponse, error)
	GetPlayerArmorsEquipped(ctx context.Context, in *GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*GetPlayerArmorsEquippedResponse, error)
	GetPlayerArmorEquippedByCategoryID(ctx context.Context, in *GetPlayerArmorEquippedByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorEquippedByCategoryIDResponse, error)
	// ArmorCategory
	GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error)
	GetArmorCategoryBySlug(ctx context.Context, in *GetArmorCategoryBySlugRequest, opts ...grpc.CallOption) (*GetArmorCategoryBySlugResponse, error)
	// Weapon
	GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error)
	GetWeaponByName(ctx context.Context, in *GetWeaponByNameRequest, opts ...grpc.CallOption) (*GetWeaponByNameResponse, error)
	UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponResponse, error)
	GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error)
	// Player
	GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error)
	GetPlayerStats(ctx context.Context, in *GetPlayerStatsRequest, opts ...grpc.CallOption) (*GetPlayerStatsResponse, error)
	GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error)
	GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error)
	ManagePlayerInventory(ctx context.Context, in *ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*ManagePlayerInventoryResponse, error)
	PlayerEndTutorial(ctx context.Context, in *PlayerEndTutorialRequest, opts ...grpc.CallOption) (*PlayerEndTutorialResponse, error)
	GetPlayerExperience(ctx context.Context, in *GetPlayerExperienceRequest, opts ...grpc.CallOption) (*GetPlayerExperienceResponse, error)
	// PlayerPosition
	CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(ctx context.Context, in *CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*CountPlayerVisitedCurrentPlanetResponse, error)
	// Rests
	GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error)
	EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error)
	// SignIn
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(ctx context.Context, in *GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(ctx context.Context, in *GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(ctx context.Context, in *GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(ctx context.Context, in *CreatePlayerStateRequest, opts ...grpc.CallOption) (*CreatePlayerStateResponse, error)
	UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateRequest, opts ...grpc.CallOption) (*UpdatePlayerStateResponse, error)
	DeletePlayerState(ctx context.Context, in *DeletePlayerStateRequest, opts ...grpc.CallOption) (*DeletePlayerStateResponse, error)
	DeletePlayerStateByController(ctx context.Context, in *DeletePlayerStateByControllerRequest, opts ...grpc.CallOption) (*DeletePlayerStateByControllerResponse, error)
	// Enemy
	GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error)
	HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error)
	GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error)
	HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error)
	TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error)
	// Titan Event
	GetAllEvent(ctx context.Context, in *GetAllEventRequest, opts ...grpc.CallOption) (*GetAllEventResponse, error)
	GetEventByID(ctx context.Context, in *GetTitanEventByIDRequest, opts ...grpc.CallOption) (*GetTitanEventByIDResponse, error)
	GetEventChoiceByID(ctx context.Context, in *GetEventChoiceByIDRequest, opts ...grpc.CallOption) (*GetEventChoiceByIDResponse, error)
	GetRandomEvent(ctx context.Context, in *GetRandomEventRequest, opts ...grpc.CallOption) (*GetRandomEventResponse, error)
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	// Titan Damage
	GetTitanDamageByTitanID(ctx context.Context, in *GetTitanDamageByTitanIDRequest, opts ...grpc.CallOption) (*GetTitanDamageByTitanIDResponse, error)
	// Language
	GetLanguageBySlug(ctx context.Context, in *GetLanguageBySlugRequest, opts ...grpc.CallOption) (*GetLanguageBySlugResponse, error)
	GetLanguageByName(ctx context.Context, in *GetLanguageByNameRequest, opts ...grpc.CallOption) (*GetLanguageByNameResponse, error)
	GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error)
	// NPC - Banck
	BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error)
	BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error)
	GetPlanetByName(ctx context.Context, in *GetPlanetByNameRequest, opts ...grpc.CallOption) (*GetPlanetByNameResponse, error)
	GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error)
	GetExpansionInfo(ctx context.Context, in *GetExpansionInfoRequest, opts ...grpc.CallOption) (*GetExpansionInfoResponse, error)
	GetSafePlanets(ctx context.Context, in *GetSafePlanetsRequest, opts ...grpc.CallOption) (*GetSafePlanetsResponse, error)
	// Map
	GetMapByID(ctx context.Context, in *GetMapByIDRequest, opts ...grpc.CallOption) (*GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error)
	GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error)
	// Item
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error)
	UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error)
	StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error)
	EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error)
	GetShipTravelInfo(ctx context.Context, in *GetShipTravelInfoRequest, opts ...grpc.CallOption) (*GetShipTravelInfoResponse, error)
	EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error)
	GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// Tresure
	DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error)
	// Mission
	GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error)
	CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error)
	GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error)
	// Expansion
	GetTeletrasportSafePlanetList(ctx context.Context, in *GetTeletrasportSafePlanetListRequest, opts ...grpc.CallOption) (*GetTeletrasportSafePlanetListResponse, error)
	EndTeletrasportSafePlanet(ctx context.Context, in *EndTeletrasportSafePlanetRequest, opts ...grpc.CallOption) (*EndTeletrasportSafePlanetResponse, error)
	// Exploration
	ExplorationStart(ctx context.Context, in *ExplorationStartRequest, opts ...grpc.CallOption) (*ExplorationStartResponse, error)
	ExplorationContinue(ctx context.Context, in *ExplorationContinueRequest, opts ...grpc.CallOption) (*ExplorationContinueResponse, error)
	ExplorationEnd(ctx context.Context, in *ExplorationEndRequest, opts ...grpc.CallOption) (*ExplorationEndResponse, error)
	ExplorationCheck(ctx context.Context, in *ExplorationCheckRequest, opts ...grpc.CallOption) (*ExplorationCheckResponse, error)
	// Exploration Category
	GetAllExplorationCategories(ctx context.Context, in *GetAllExplorationCategoriesRequest, opts ...grpc.CallOption) (*GetAllExplorationCategoriesResponse, error)
	// Conquerors
	GetConquerorsByPlanetID(ctx context.Context, in *GetConquerorsByPlanetIDRequest, opts ...grpc.CallOption) (*GetConquerorsByPlanetIDResponse, error)
	GetCurrentConquerorByPlanetID(ctx context.Context, in *GetCurrentConquerorByPlanetIDRequest, opts ...grpc.CallOption) (*GetCurrentConquerorByPlanetIDResponse, error)
	// Safeplanet - Crafter
	CrafterStart(ctx context.Context, in *CrafterStartRequest, opts ...grpc.CallOption) (*CrafterStartResponse, error)
	CrafterEnd(ctx context.Context, in *CrafterEndRequest, opts ...grpc.CallOption) (*CrafterEndResponse, error)
	CrafterCheck(ctx context.Context, in *CrafterCheckRequest, opts ...grpc.CallOption) (*CrafterCheckResponse, error)
}

type noNameClient struct {
	cc grpc.ClientConnInterface
}

func NewNoNameClient(cc grpc.ClientConnInterface) NoNameClient {
	return &noNameClient{cc}
}

func (c *noNameClient) GetArmorByID(ctx context.Context, in *GetArmorByIDRequest, opts ...grpc.CallOption) (*GetArmorByIDResponse, error) {
	out := new(GetArmorByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetArmorByName(ctx context.Context, in *GetArmorByNameRequest, opts ...grpc.CallOption) (*GetArmorByNameResponse, error) {
	out := new(GetArmorByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateArmor(ctx context.Context, in *UpdateArmorRequest, opts ...grpc.CallOption) (*UpdateArmorResponse, error) {
	out := new(UpdateArmorResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmors(ctx context.Context, in *GetPlayerArmorsRequest, opts ...grpc.CallOption) (*GetPlayerArmorsResponse, error) {
	out := new(GetPlayerArmorsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorsByCategoryID(ctx context.Context, in *GetPlayerArmorsByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorsByCategoryIDResponse, error) {
	out := new(GetPlayerArmorsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorsEquipped(ctx context.Context, in *GetPlayerArmorsEquippedRequest, opts ...grpc.CallOption) (*GetPlayerArmorsEquippedResponse, error) {
	out := new(GetPlayerArmorsEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorsEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerArmorEquippedByCategoryID(ctx context.Context, in *GetPlayerArmorEquippedByCategoryIDRequest, opts ...grpc.CallOption) (*GetPlayerArmorEquippedByCategoryIDResponse, error) {
	out := new(GetPlayerArmorEquippedByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerArmorEquippedByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllArmorCategory(ctx context.Context, in *GetAllArmorCategoryRequest, opts ...grpc.CallOption) (*GetAllArmorCategoryResponse, error) {
	out := new(GetAllArmorCategoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllArmorCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetArmorCategoryBySlug(ctx context.Context, in *GetArmorCategoryBySlugRequest, opts ...grpc.CallOption) (*GetArmorCategoryBySlugResponse, error) {
	out := new(GetArmorCategoryBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetArmorCategoryBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetWeaponByID(ctx context.Context, in *GetWeaponByIDRequest, opts ...grpc.CallOption) (*GetWeaponByIDResponse, error) {
	out := new(GetWeaponByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetWeaponByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetWeaponByName(ctx context.Context, in *GetWeaponByNameRequest, opts ...grpc.CallOption) (*GetWeaponByNameResponse, error) {
	out := new(GetWeaponByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetWeaponByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponResponse, error) {
	out := new(UpdateWeaponResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeapons(ctx context.Context, in *GetPlayerWeaponsRequest, opts ...grpc.CallOption) (*GetPlayerWeaponsResponse, error) {
	out := new(GetPlayerWeaponsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeapons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerWeaponEquipped(ctx context.Context, in *GetPlayerWeaponEquippedRequest, opts ...grpc.CallOption) (*GetPlayerWeaponEquippedResponse, error) {
	out := new(GetPlayerWeaponEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerWeaponEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByID(ctx context.Context, in *GetPlayerByIDRequest, opts ...grpc.CallOption) (*GetPlayerByIDResponse, error) {
	out := new(GetPlayerByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerByUsername(ctx context.Context, in *GetPlayerByUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error) {
	out := new(GetPlayerByUsernameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStats(ctx context.Context, in *GetPlayerStatsRequest, opts ...grpc.CallOption) (*GetPlayerStatsResponse, error) {
	out := new(GetPlayerStatsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerResources(ctx context.Context, in *GetPlayerResourcesRequest, opts ...grpc.CallOption) (*GetPlayerResourcesResponse, error) {
	out := new(GetPlayerResourcesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerItems(ctx context.Context, in *GetPlayerItemsRequest, opts ...grpc.CallOption) (*GetPlayerItemsResponse, error) {
	out := new(GetPlayerItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerEconomy(ctx context.Context, in *GetPlayerEconomyRequest, opts ...grpc.CallOption) (*GetPlayerEconomyResponse, error) {
	out := new(GetPlayerEconomyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerEconomy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ManagePlayerInventory(ctx context.Context, in *ManagePlayerInventoryRequest, opts ...grpc.CallOption) (*ManagePlayerInventoryResponse, error) {
	out := new(ManagePlayerInventoryResponse)
	err := c.cc.Invoke(ctx, "/NoName/ManagePlayerInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) PlayerEndTutorial(ctx context.Context, in *PlayerEndTutorialRequest, opts ...grpc.CallOption) (*PlayerEndTutorialResponse, error) {
	out := new(PlayerEndTutorialResponse)
	err := c.cc.Invoke(ctx, "/NoName/PlayerEndTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerExperience(ctx context.Context, in *GetPlayerExperienceRequest, opts ...grpc.CallOption) (*GetPlayerExperienceResponse, error) {
	out := new(GetPlayerExperienceResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerPosition(ctx context.Context, in *CreatePlayerPositionRequest, opts ...grpc.CallOption) (*CreatePlayerPositionResponse, error) {
	out := new(CreatePlayerPositionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerCurrentPlanet(ctx context.Context, in *GetPlayerCurrentPlanetRequest, opts ...grpc.CallOption) (*GetPlayerCurrentPlanetResponse, error) {
	out := new(GetPlayerCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlanetVisited(ctx context.Context, in *CountPlanetVisitedRequest, opts ...grpc.CallOption) (*CountPlanetVisitedResponse, error) {
	out := new(CountPlanetVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlanetVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountSystemVisited(ctx context.Context, in *CountSystemVisitedRequest, opts ...grpc.CallOption) (*CountSystemVisitedResponse, error) {
	out := new(CountSystemVisitedResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountSystemVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CountPlayerVisitedCurrentPlanet(ctx context.Context, in *CountPlayerVisitedCurrentPlanetRequest, opts ...grpc.CallOption) (*CountPlayerVisitedCurrentPlanetResponse, error) {
	out := new(CountPlayerVisitedCurrentPlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/CountPlayerVisitedCurrentPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRestsInfo(ctx context.Context, in *GetRestsInfoRequest, opts ...grpc.CallOption) (*GetRestsInfoResponse, error) {
	out := new(GetRestsInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRestsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndPlayerRest(ctx context.Context, in *EndPlayerRestRequest, opts ...grpc.CallOption) (*EndPlayerRestResponse, error) {
	out := new(EndPlayerRestResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndPlayerRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/NoName/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateByID(ctx context.Context, in *GetPlayerStateByIDRequest, opts ...grpc.CallOption) (*GetPlayerStateByIDResponse, error) {
	out := new(GetPlayerStateByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetActivePlayerStates(ctx context.Context, in *GetActivePlayerStatesRequest, opts ...grpc.CallOption) (*GetActivePlayerStatesResponse, error) {
	out := new(GetActivePlayerStatesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetActivePlayerStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerStateToNotify(ctx context.Context, in *GetPlayerStateToNotifyRequest, opts ...grpc.CallOption) (*GetPlayerStateToNotifyResponse, error) {
	out := new(GetPlayerStateToNotifyResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerStateToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreatePlayerState(ctx context.Context, in *CreatePlayerStateRequest, opts ...grpc.CallOption) (*CreatePlayerStateResponse, error) {
	out := new(CreatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UpdatePlayerState(ctx context.Context, in *UpdatePlayerStateRequest, opts ...grpc.CallOption) (*UpdatePlayerStateResponse, error) {
	out := new(UpdatePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/UpdatePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeletePlayerState(ctx context.Context, in *DeletePlayerStateRequest, opts ...grpc.CallOption) (*DeletePlayerStateResponse, error) {
	out := new(DeletePlayerStateResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeletePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DeletePlayerStateByController(ctx context.Context, in *DeletePlayerStateByControllerRequest, opts ...grpc.CallOption) (*DeletePlayerStateByControllerResponse, error) {
	out := new(DeletePlayerStateByControllerResponse)
	err := c.cc.Invoke(ctx, "/NoName/DeletePlayerStateByController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetEnemyByID(ctx context.Context, in *GetEnemyByIDRequest, opts ...grpc.CallOption) (*GetEnemyByIDResponse, error) {
	out := new(GetEnemyByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetEnemyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitEnemy(ctx context.Context, in *HitEnemyRequest, opts ...grpc.CallOption) (*HitEnemyResponse, error) {
	out := new(HitEnemyResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByID(ctx context.Context, in *GetTitanByIDRequest, opts ...grpc.CallOption) (*GetTitanByIDResponse, error) {
	out := new(GetTitanByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByName(ctx context.Context, in *GetTitanByNameRequest, opts ...grpc.CallOption) (*GetTitanByNameResponse, error) {
	out := new(GetTitanByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanByPlanetID(ctx context.Context, in *GetTitanByPlanetIDRequest, opts ...grpc.CallOption) (*GetTitanByPlanetIDResponse, error) {
	out := new(GetTitanByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) HitTitan(ctx context.Context, in *HitTitanRequest, opts ...grpc.CallOption) (*HitTitanResponse, error) {
	out := new(HitTitanResponse)
	err := c.cc.Invoke(ctx, "/NoName/HitTitan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) TitanDiscovered(ctx context.Context, in *TitanDiscoveredRequest, opts ...grpc.CallOption) (*TitanDiscoveredResponse, error) {
	out := new(TitanDiscoveredResponse)
	err := c.cc.Invoke(ctx, "/NoName/TitanDiscovered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllEvent(ctx context.Context, in *GetAllEventRequest, opts ...grpc.CallOption) (*GetAllEventResponse, error) {
	out := new(GetAllEventResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetEventByID(ctx context.Context, in *GetTitanEventByIDRequest, opts ...grpc.CallOption) (*GetTitanEventByIDResponse, error) {
	out := new(GetTitanEventByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetEventByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetEventChoiceByID(ctx context.Context, in *GetEventChoiceByIDRequest, opts ...grpc.CallOption) (*GetEventChoiceByIDResponse, error) {
	out := new(GetEventChoiceByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetEventChoiceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetRandomEvent(ctx context.Context, in *GetRandomEventRequest, opts ...grpc.CallOption) (*GetRandomEventResponse, error) {
	out := new(GetRandomEventResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetRandomEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, "/NoName/SubmitAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTitanDamageByTitanID(ctx context.Context, in *GetTitanDamageByTitanIDRequest, opts ...grpc.CallOption) (*GetTitanDamageByTitanIDResponse, error) {
	out := new(GetTitanDamageByTitanIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTitanDamageByTitanID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetLanguageBySlug(ctx context.Context, in *GetLanguageBySlugRequest, opts ...grpc.CallOption) (*GetLanguageBySlugResponse, error) {
	out := new(GetLanguageBySlugResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetLanguageBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetLanguageByName(ctx context.Context, in *GetLanguageByNameRequest, opts ...grpc.CallOption) (*GetLanguageByNameResponse, error) {
	out := new(GetLanguageByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetLanguageByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error) {
	out := new(GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllNPC(ctx context.Context, in *GetAllNPCRequest, opts ...grpc.CallOption) (*GetAllNPCResponse, error) {
	out := new(GetAllNPCResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllNPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankDeposit(ctx context.Context, in *BankDepositRequest, opts ...grpc.CallOption) (*BankDepositResponse, error) {
	out := new(BankDepositResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) BankWithdraw(ctx context.Context, in *BankWithdrawRequest, opts ...grpc.CallOption) (*BankWithdrawResponse, error) {
	out := new(BankWithdrawResponse)
	err := c.cc.Invoke(ctx, "/NoName/BankWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByID(ctx context.Context, in *GetPlanetByIDRequest, opts ...grpc.CallOption) (*GetPlanetByIDResponse, error) {
	out := new(GetPlanetByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByName(ctx context.Context, in *GetPlanetByNameRequest, opts ...grpc.CallOption) (*GetPlanetByNameResponse, error) {
	out := new(GetPlanetByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByCoordinate(ctx context.Context, in *GetPlanetByCoordinateRequest, opts ...grpc.CallOption) (*GetPlanetByCoordinateResponse, error) {
	out := new(GetPlanetByCoordinateResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlanetByMapID(ctx context.Context, in *GetPlanetByMapIDRequest, opts ...grpc.CallOption) (*GetPlanetByMapIDResponse, error) {
	out := new(GetPlanetByMapIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlanetByMapID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetExpansionInfo(ctx context.Context, in *GetExpansionInfoRequest, opts ...grpc.CallOption) (*GetExpansionInfoResponse, error) {
	out := new(GetExpansionInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetExpansionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetSafePlanets(ctx context.Context, in *GetSafePlanetsRequest, opts ...grpc.CallOption) (*GetSafePlanetsResponse, error) {
	out := new(GetSafePlanetsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetSafePlanets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMapByID(ctx context.Context, in *GetMapByIDRequest, opts ...grpc.CallOption) (*GetMapByIDResponse, error) {
	out := new(GetMapByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByID(ctx context.Context, in *GetResourceByIDRequest, opts ...grpc.CallOption) (*GetResourceByIDResponse, error) {
	out := new(GetResourceByIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetResourceByName(ctx context.Context, in *GetResourceByNameRequest, opts ...grpc.CallOption) (*GetResourceByNameResponse, error) {
	out := new(GetResourceByNameResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetResourceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetItemsByCategoryID(ctx context.Context, in *GetItemsByCategoryIDRequest, opts ...grpc.CallOption) (*GetItemsByCategoryIDResponse, error) {
	out := new(GetItemsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetItemsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error) {
	out := new(UseItemResponse)
	err := c.cc.Invoke(ctx, "/NoName/UseItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllItemCategories(ctx context.Context, in *GetAllItemCategoriesRequest, opts ...grpc.CallOption) (*GetAllItemCategoriesResponse, error) {
	out := new(GetAllItemCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllItemCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipRepairInfo(ctx context.Context, in *GetShipRepairInfoRequest, opts ...grpc.CallOption) (*GetShipRepairInfoResponse, error) {
	out := new(GetShipRepairInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipRepairInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) StartShipRepair(ctx context.Context, in *StartShipRepairRequest, opts ...grpc.CallOption) (*StartShipRepairResponse, error) {
	out := new(StartShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/StartShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipRepair(ctx context.Context, in *EndShipRepairRequest, opts ...grpc.CallOption) (*EndShipRepairResponse, error) {
	out := new(EndShipRepairResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetShipTravelInfo(ctx context.Context, in *GetShipTravelInfoRequest, opts ...grpc.CallOption) (*GetShipTravelInfoResponse, error) {
	out := new(GetShipTravelInfoResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetShipTravelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndShipTravel(ctx context.Context, in *EndShipTravelRequest, opts ...grpc.CallOption) (*EndShipTravelResponse, error) {
	out := new(EndShipTravelResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndShipTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShips(ctx context.Context, in *GetPlayerShipsRequest, opts ...grpc.CallOption) (*GetPlayerShipsResponse, error) {
	out := new(GetPlayerShipsResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetPlayerShipEquipped(ctx context.Context, in *GetPlayerShipEquippedRequest, opts ...grpc.CallOption) (*GetPlayerShipEquippedResponse, error) {
	out := new(GetPlayerShipEquippedResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetPlayerShipEquipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) DropTresure(ctx context.Context, in *DropTresureRequest, opts ...grpc.CallOption) (*DropTresureResponse, error) {
	out := new(DropTresureResponse)
	err := c.cc.Invoke(ctx, "/NoName/DropTresure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error) {
	out := new(GetMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CheckMission(ctx context.Context, in *CheckMissionRequest, opts ...grpc.CallOption) (*CheckMissionResponse, error) {
	out := new(CheckMissionResponse)
	err := c.cc.Invoke(ctx, "/NoName/CheckMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetMissionReward(ctx context.Context, in *GetMissionRewardRequest, opts ...grpc.CallOption) (*GetMissionRewardResponse, error) {
	out := new(GetMissionRewardResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetMissionReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetTeletrasportSafePlanetList(ctx context.Context, in *GetTeletrasportSafePlanetListRequest, opts ...grpc.CallOption) (*GetTeletrasportSafePlanetListResponse, error) {
	out := new(GetTeletrasportSafePlanetListResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetTeletrasportSafePlanetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) EndTeletrasportSafePlanet(ctx context.Context, in *EndTeletrasportSafePlanetRequest, opts ...grpc.CallOption) (*EndTeletrasportSafePlanetResponse, error) {
	out := new(EndTeletrasportSafePlanetResponse)
	err := c.cc.Invoke(ctx, "/NoName/EndTeletrasportSafePlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationStart(ctx context.Context, in *ExplorationStartRequest, opts ...grpc.CallOption) (*ExplorationStartResponse, error) {
	out := new(ExplorationStartResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationContinue(ctx context.Context, in *ExplorationContinueRequest, opts ...grpc.CallOption) (*ExplorationContinueResponse, error) {
	out := new(ExplorationContinueResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationContinue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationEnd(ctx context.Context, in *ExplorationEndRequest, opts ...grpc.CallOption) (*ExplorationEndResponse, error) {
	out := new(ExplorationEndResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) ExplorationCheck(ctx context.Context, in *ExplorationCheckRequest, opts ...grpc.CallOption) (*ExplorationCheckResponse, error) {
	out := new(ExplorationCheckResponse)
	err := c.cc.Invoke(ctx, "/NoName/ExplorationCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetAllExplorationCategories(ctx context.Context, in *GetAllExplorationCategoriesRequest, opts ...grpc.CallOption) (*GetAllExplorationCategoriesResponse, error) {
	out := new(GetAllExplorationCategoriesResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetAllExplorationCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetConquerorsByPlanetID(ctx context.Context, in *GetConquerorsByPlanetIDRequest, opts ...grpc.CallOption) (*GetConquerorsByPlanetIDResponse, error) {
	out := new(GetConquerorsByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetConquerorsByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) GetCurrentConquerorByPlanetID(ctx context.Context, in *GetCurrentConquerorByPlanetIDRequest, opts ...grpc.CallOption) (*GetCurrentConquerorByPlanetIDResponse, error) {
	out := new(GetCurrentConquerorByPlanetIDResponse)
	err := c.cc.Invoke(ctx, "/NoName/GetCurrentConquerorByPlanetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterStart(ctx context.Context, in *CrafterStartRequest, opts ...grpc.CallOption) (*CrafterStartResponse, error) {
	out := new(CrafterStartResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterEnd(ctx context.Context, in *CrafterEndRequest, opts ...grpc.CallOption) (*CrafterEndResponse, error) {
	out := new(CrafterEndResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noNameClient) CrafterCheck(ctx context.Context, in *CrafterCheckRequest, opts ...grpc.CallOption) (*CrafterCheckResponse, error) {
	out := new(CrafterCheckResponse)
	err := c.cc.Invoke(ctx, "/NoName/CrafterCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoNameServer is the server API for NoName service.
// All implementations must embed UnimplementedNoNameServer
// for forward compatibility
type NoNameServer interface {
	// Armor
	GetArmorByID(context.Context, *GetArmorByIDRequest) (*GetArmorByIDResponse, error)
	GetArmorByName(context.Context, *GetArmorByNameRequest) (*GetArmorByNameResponse, error)
	UpdateArmor(context.Context, *UpdateArmorRequest) (*UpdateArmorResponse, error)
	GetPlayerArmors(context.Context, *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error)
	GetPlayerArmorsByCategoryID(context.Context, *GetPlayerArmorsByCategoryIDRequest) (*GetPlayerArmorsByCategoryIDResponse, error)
	GetPlayerArmorsEquipped(context.Context, *GetPlayerArmorsEquippedRequest) (*GetPlayerArmorsEquippedResponse, error)
	GetPlayerArmorEquippedByCategoryID(context.Context, *GetPlayerArmorEquippedByCategoryIDRequest) (*GetPlayerArmorEquippedByCategoryIDResponse, error)
	// ArmorCategory
	GetAllArmorCategory(context.Context, *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error)
	GetArmorCategoryBySlug(context.Context, *GetArmorCategoryBySlugRequest) (*GetArmorCategoryBySlugResponse, error)
	// Weapon
	GetWeaponByID(context.Context, *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error)
	GetWeaponByName(context.Context, *GetWeaponByNameRequest) (*GetWeaponByNameResponse, error)
	UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponResponse, error)
	GetPlayerWeapons(context.Context, *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error)
	GetPlayerWeaponEquipped(context.Context, *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error)
	// Player
	GetPlayerByID(context.Context, *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error)
	GetPlayerByUsername(context.Context, *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error)
	GetPlayerStats(context.Context, *GetPlayerStatsRequest) (*GetPlayerStatsResponse, error)
	GetPlayerResources(context.Context, *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error)
	GetPlayerItems(context.Context, *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error)
	GetPlayerEconomy(context.Context, *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error)
	ManagePlayerInventory(context.Context, *ManagePlayerInventoryRequest) (*ManagePlayerInventoryResponse, error)
	PlayerEndTutorial(context.Context, *PlayerEndTutorialRequest) (*PlayerEndTutorialResponse, error)
	GetPlayerExperience(context.Context, *GetPlayerExperienceRequest) (*GetPlayerExperienceResponse, error)
	// PlayerPosition
	CreatePlayerPosition(context.Context, *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error)
	GetPlayerCurrentPlanet(context.Context, *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error)
	CountPlanetVisited(context.Context, *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error)
	CountSystemVisited(context.Context, *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error)
	CountPlayerVisitedCurrentPlanet(context.Context, *CountPlayerVisitedCurrentPlanetRequest) (*CountPlayerVisitedCurrentPlanetResponse, error)
	// Rests
	GetRestsInfo(context.Context, *GetRestsInfoRequest) (*GetRestsInfoResponse, error)
	EndPlayerRest(context.Context, *EndPlayerRestRequest) (*EndPlayerRestResponse, error)
	// SignIn
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// PlayerState
	GetPlayerStateByID(context.Context, *GetPlayerStateByIDRequest) (*GetPlayerStateByIDResponse, error)
	GetActivePlayerStates(context.Context, *GetActivePlayerStatesRequest) (*GetActivePlayerStatesResponse, error)
	GetPlayerStateToNotify(context.Context, *GetPlayerStateToNotifyRequest) (*GetPlayerStateToNotifyResponse, error)
	CreatePlayerState(context.Context, *CreatePlayerStateRequest) (*CreatePlayerStateResponse, error)
	UpdatePlayerState(context.Context, *UpdatePlayerStateRequest) (*UpdatePlayerStateResponse, error)
	DeletePlayerState(context.Context, *DeletePlayerStateRequest) (*DeletePlayerStateResponse, error)
	DeletePlayerStateByController(context.Context, *DeletePlayerStateByControllerRequest) (*DeletePlayerStateByControllerResponse, error)
	// Enemy
	GetEnemyByID(context.Context, *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error)
	HitEnemy(context.Context, *HitEnemyRequest) (*HitEnemyResponse, error)
	// Titan
	GetTitanByID(context.Context, *GetTitanByIDRequest) (*GetTitanByIDResponse, error)
	GetTitanByName(context.Context, *GetTitanByNameRequest) (*GetTitanByNameResponse, error)
	GetTitanByPlanetID(context.Context, *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error)
	HitTitan(context.Context, *HitTitanRequest) (*HitTitanResponse, error)
	TitanDiscovered(context.Context, *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error)
	// Titan Event
	GetAllEvent(context.Context, *GetAllEventRequest) (*GetAllEventResponse, error)
	GetEventByID(context.Context, *GetTitanEventByIDRequest) (*GetTitanEventByIDResponse, error)
	GetEventChoiceByID(context.Context, *GetEventChoiceByIDRequest) (*GetEventChoiceByIDResponse, error)
	GetRandomEvent(context.Context, *GetRandomEventRequest) (*GetRandomEventResponse, error)
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	// Titan Damage
	GetTitanDamageByTitanID(context.Context, *GetTitanDamageByTitanIDRequest) (*GetTitanDamageByTitanIDResponse, error)
	// Language
	GetLanguageBySlug(context.Context, *GetLanguageBySlugRequest) (*GetLanguageBySlugResponse, error)
	GetLanguageByName(context.Context, *GetLanguageByNameRequest) (*GetLanguageByNameResponse, error)
	GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error)
	// NPC
	GetAllNPC(context.Context, *GetAllNPCRequest) (*GetAllNPCResponse, error)
	// NPC - Banck
	BankDeposit(context.Context, *BankDepositRequest) (*BankDepositResponse, error)
	BankWithdraw(context.Context, *BankWithdrawRequest) (*BankWithdrawResponse, error)
	// Planet
	GetPlanetByID(context.Context, *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error)
	GetPlanetByName(context.Context, *GetPlanetByNameRequest) (*GetPlanetByNameResponse, error)
	GetPlanetByCoordinate(context.Context, *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error)
	GetPlanetByMapID(context.Context, *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error)
	GetExpansionInfo(context.Context, *GetExpansionInfoRequest) (*GetExpansionInfoResponse, error)
	GetSafePlanets(context.Context, *GetSafePlanetsRequest) (*GetSafePlanetsResponse, error)
	// Map
	GetMapByID(context.Context, *GetMapByIDRequest) (*GetMapByIDResponse, error)
	// Resouce
	GetResourceByID(context.Context, *GetResourceByIDRequest) (*GetResourceByIDResponse, error)
	GetResourceByName(context.Context, *GetResourceByNameRequest) (*GetResourceByNameResponse, error)
	// Item
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	GetItemsByCategoryID(context.Context, *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error)
	UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error)
	// ItemCateogory
	GetAllItemCategories(context.Context, *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error)
	// Ship
	GetShipRepairInfo(context.Context, *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error)
	StartShipRepair(context.Context, *StartShipRepairRequest) (*StartShipRepairResponse, error)
	EndShipRepair(context.Context, *EndShipRepairRequest) (*EndShipRepairResponse, error)
	GetShipTravelInfo(context.Context, *GetShipTravelInfoRequest) (*GetShipTravelInfoResponse, error)
	EndShipTravel(context.Context, *EndShipTravelRequest) (*EndShipTravelResponse, error)
	GetPlayerShips(context.Context, *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error)
	GetPlayerShipEquipped(context.Context, *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error)
	// Transaction
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// Tresure
	DropTresure(context.Context, *DropTresureRequest) (*DropTresureResponse, error)
	// Mission
	GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error)
	CheckMission(context.Context, *CheckMissionRequest) (*CheckMissionResponse, error)
	GetMissionReward(context.Context, *GetMissionRewardRequest) (*GetMissionRewardResponse, error)
	// Expansion
	GetTeletrasportSafePlanetList(context.Context, *GetTeletrasportSafePlanetListRequest) (*GetTeletrasportSafePlanetListResponse, error)
	EndTeletrasportSafePlanet(context.Context, *EndTeletrasportSafePlanetRequest) (*EndTeletrasportSafePlanetResponse, error)
	// Exploration
	ExplorationStart(context.Context, *ExplorationStartRequest) (*ExplorationStartResponse, error)
	ExplorationContinue(context.Context, *ExplorationContinueRequest) (*ExplorationContinueResponse, error)
	ExplorationEnd(context.Context, *ExplorationEndRequest) (*ExplorationEndResponse, error)
	ExplorationCheck(context.Context, *ExplorationCheckRequest) (*ExplorationCheckResponse, error)
	// Exploration Category
	GetAllExplorationCategories(context.Context, *GetAllExplorationCategoriesRequest) (*GetAllExplorationCategoriesResponse, error)
	// Conquerors
	GetConquerorsByPlanetID(context.Context, *GetConquerorsByPlanetIDRequest) (*GetConquerorsByPlanetIDResponse, error)
	GetCurrentConquerorByPlanetID(context.Context, *GetCurrentConquerorByPlanetIDRequest) (*GetCurrentConquerorByPlanetIDResponse, error)
	// Safeplanet - Crafter
	CrafterStart(context.Context, *CrafterStartRequest) (*CrafterStartResponse, error)
	CrafterEnd(context.Context, *CrafterEndRequest) (*CrafterEndResponse, error)
	CrafterCheck(context.Context, *CrafterCheckRequest) (*CrafterCheckResponse, error)
	mustEmbedUnimplementedNoNameServer()
}

// UnimplementedNoNameServer must be embedded to have forward compatible implementations.
type UnimplementedNoNameServer struct {
}

func (*UnimplementedNoNameServer) GetArmorByID(context.Context, *GetArmorByIDRequest) (*GetArmorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByID not implemented")
}
func (*UnimplementedNoNameServer) GetArmorByName(context.Context, *GetArmorByNameRequest) (*GetArmorByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateArmor(context.Context, *UpdateArmorRequest) (*UpdateArmorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArmor not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmors(context.Context, *GetPlayerArmorsRequest) (*GetPlayerArmorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmors not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorsByCategoryID(context.Context, *GetPlayerArmorsByCategoryIDRequest) (*GetPlayerArmorsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorsEquipped(context.Context, *GetPlayerArmorsEquippedRequest) (*GetPlayerArmorsEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorsEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerArmorEquippedByCategoryID(context.Context, *GetPlayerArmorEquippedByCategoryIDRequest) (*GetPlayerArmorEquippedByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerArmorEquippedByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) GetAllArmorCategory(context.Context, *GetAllArmorCategoryRequest) (*GetAllArmorCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArmorCategory not implemented")
}
func (*UnimplementedNoNameServer) GetArmorCategoryBySlug(context.Context, *GetArmorCategoryBySlugRequest) (*GetArmorCategoryBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmorCategoryBySlug not implemented")
}
func (*UnimplementedNoNameServer) GetWeaponByID(context.Context, *GetWeaponByIDRequest) (*GetWeaponByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByID not implemented")
}
func (*UnimplementedNoNameServer) GetWeaponByName(context.Context, *GetWeaponByNameRequest) (*GetWeaponByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByName not implemented")
}
func (*UnimplementedNoNameServer) UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeapon not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeapons(context.Context, *GetPlayerWeaponsRequest) (*GetPlayerWeaponsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeapons not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerWeaponEquipped(context.Context, *GetPlayerWeaponEquippedRequest) (*GetPlayerWeaponEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWeaponEquipped not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByID(context.Context, *GetPlayerByIDRequest) (*GetPlayerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerByUsername(context.Context, *GetPlayerByUsernameRequest) (*GetPlayerByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByUsername not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStats(context.Context, *GetPlayerStatsRequest) (*GetPlayerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStats not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerResources(context.Context, *GetPlayerResourcesRequest) (*GetPlayerResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerResources not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerItems(context.Context, *GetPlayerItemsRequest) (*GetPlayerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItems not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerEconomy(context.Context, *GetPlayerEconomyRequest) (*GetPlayerEconomyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEconomy not implemented")
}
func (*UnimplementedNoNameServer) ManagePlayerInventory(context.Context, *ManagePlayerInventoryRequest) (*ManagePlayerInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagePlayerInventory not implemented")
}
func (*UnimplementedNoNameServer) PlayerEndTutorial(context.Context, *PlayerEndTutorialRequest) (*PlayerEndTutorialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerEndTutorial not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerExperience(context.Context, *GetPlayerExperienceRequest) (*GetPlayerExperienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerExperience not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerPosition(context.Context, *CreatePlayerPositionRequest) (*CreatePlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerPosition not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerCurrentPlanet(context.Context, *GetPlayerCurrentPlanetRequest) (*GetPlayerCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) CountPlanetVisited(context.Context, *CountPlanetVisitedRequest) (*CountPlanetVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlanetVisited not implemented")
}
func (*UnimplementedNoNameServer) CountSystemVisited(context.Context, *CountSystemVisitedRequest) (*CountSystemVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSystemVisited not implemented")
}
func (*UnimplementedNoNameServer) CountPlayerVisitedCurrentPlanet(context.Context, *CountPlayerVisitedCurrentPlanetRequest) (*CountPlayerVisitedCurrentPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPlayerVisitedCurrentPlanet not implemented")
}
func (*UnimplementedNoNameServer) GetRestsInfo(context.Context, *GetRestsInfoRequest) (*GetRestsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestsInfo not implemented")
}
func (*UnimplementedNoNameServer) EndPlayerRest(context.Context, *EndPlayerRestRequest) (*EndPlayerRestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPlayerRest not implemented")
}
func (*UnimplementedNoNameServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateByID(context.Context, *GetPlayerStateByIDRequest) (*GetPlayerStateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateByID not implemented")
}
func (*UnimplementedNoNameServer) GetActivePlayerStates(context.Context, *GetActivePlayerStatesRequest) (*GetActivePlayerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlayerStates not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerStateToNotify(context.Context, *GetPlayerStateToNotifyRequest) (*GetPlayerStateToNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStateToNotify not implemented")
}
func (*UnimplementedNoNameServer) CreatePlayerState(context.Context, *CreatePlayerStateRequest) (*CreatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) UpdatePlayerState(context.Context, *UpdatePlayerStateRequest) (*UpdatePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerState not implemented")
}
func (*UnimplementedNoNameServer) DeletePlayerState(context.Context, *DeletePlayerStateRequest) (*DeletePlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerState not implemented")
}
func (*UnimplementedNoNameServer) DeletePlayerStateByController(context.Context, *DeletePlayerStateByControllerRequest) (*DeletePlayerStateByControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerStateByController not implemented")
}
func (*UnimplementedNoNameServer) GetEnemyByID(context.Context, *GetEnemyByIDRequest) (*GetEnemyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemyByID not implemented")
}
func (*UnimplementedNoNameServer) HitEnemy(context.Context, *HitEnemyRequest) (*HitEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitEnemy not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByID(context.Context, *GetTitanByIDRequest) (*GetTitanByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByID not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByName(context.Context, *GetTitanByNameRequest) (*GetTitanByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByName not implemented")
}
func (*UnimplementedNoNameServer) GetTitanByPlanetID(context.Context, *GetTitanByPlanetIDRequest) (*GetTitanByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) HitTitan(context.Context, *HitTitanRequest) (*HitTitanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitTitan not implemented")
}
func (*UnimplementedNoNameServer) TitanDiscovered(context.Context, *TitanDiscoveredRequest) (*TitanDiscoveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitanDiscovered not implemented")
}
func (*UnimplementedNoNameServer) GetAllEvent(context.Context, *GetAllEventRequest) (*GetAllEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvent not implemented")
}
func (*UnimplementedNoNameServer) GetEventByID(context.Context, *GetTitanEventByIDRequest) (*GetTitanEventByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByID not implemented")
}
func (*UnimplementedNoNameServer) GetEventChoiceByID(context.Context, *GetEventChoiceByIDRequest) (*GetEventChoiceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventChoiceByID not implemented")
}
func (*UnimplementedNoNameServer) GetRandomEvent(context.Context, *GetRandomEventRequest) (*GetRandomEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomEvent not implemented")
}
func (*UnimplementedNoNameServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (*UnimplementedNoNameServer) GetTitanDamageByTitanID(context.Context, *GetTitanDamageByTitanIDRequest) (*GetTitanDamageByTitanIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitanDamageByTitanID not implemented")
}
func (*UnimplementedNoNameServer) GetLanguageBySlug(context.Context, *GetLanguageBySlugRequest) (*GetLanguageBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageBySlug not implemented")
}
func (*UnimplementedNoNameServer) GetLanguageByName(context.Context, *GetLanguageByNameRequest) (*GetLanguageByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (*UnimplementedNoNameServer) GetAllNPC(context.Context, *GetAllNPCRequest) (*GetAllNPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNPC not implemented")
}
func (*UnimplementedNoNameServer) BankDeposit(context.Context, *BankDepositRequest) (*BankDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankDeposit not implemented")
}
func (*UnimplementedNoNameServer) BankWithdraw(context.Context, *BankWithdrawRequest) (*BankWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankWithdraw not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByID(context.Context, *GetPlanetByIDRequest) (*GetPlanetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByID not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByName(context.Context, *GetPlanetByNameRequest) (*GetPlanetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByName not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByCoordinate(context.Context, *GetPlanetByCoordinateRequest) (*GetPlanetByCoordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByCoordinate not implemented")
}
func (*UnimplementedNoNameServer) GetPlanetByMapID(context.Context, *GetPlanetByMapIDRequest) (*GetPlanetByMapIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetByMapID not implemented")
}
func (*UnimplementedNoNameServer) GetExpansionInfo(context.Context, *GetExpansionInfoRequest) (*GetExpansionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpansionInfo not implemented")
}
func (*UnimplementedNoNameServer) GetSafePlanets(context.Context, *GetSafePlanetsRequest) (*GetSafePlanetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSafePlanets not implemented")
}
func (*UnimplementedNoNameServer) GetMapByID(context.Context, *GetMapByIDRequest) (*GetMapByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByID(context.Context, *GetResourceByIDRequest) (*GetResourceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByID not implemented")
}
func (*UnimplementedNoNameServer) GetResourceByName(context.Context, *GetResourceByNameRequest) (*GetResourceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByName not implemented")
}
func (*UnimplementedNoNameServer) GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (*UnimplementedNoNameServer) GetItemsByCategoryID(context.Context, *GetItemsByCategoryIDRequest) (*GetItemsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByCategoryID not implemented")
}
func (*UnimplementedNoNameServer) UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (*UnimplementedNoNameServer) GetAllItemCategories(context.Context, *GetAllItemCategoriesRequest) (*GetAllItemCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemCategories not implemented")
}
func (*UnimplementedNoNameServer) GetShipRepairInfo(context.Context, *GetShipRepairInfoRequest) (*GetShipRepairInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipRepairInfo not implemented")
}
func (*UnimplementedNoNameServer) StartShipRepair(context.Context, *StartShipRepairRequest) (*StartShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartShipRepair not implemented")
}
func (*UnimplementedNoNameServer) EndShipRepair(context.Context, *EndShipRepairRequest) (*EndShipRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipRepair not implemented")
}
func (*UnimplementedNoNameServer) GetShipTravelInfo(context.Context, *GetShipTravelInfoRequest) (*GetShipTravelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipTravelInfo not implemented")
}
func (*UnimplementedNoNameServer) EndShipTravel(context.Context, *EndShipTravelRequest) (*EndShipTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndShipTravel not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShips(context.Context, *GetPlayerShipsRequest) (*GetPlayerShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShips not implemented")
}
func (*UnimplementedNoNameServer) GetPlayerShipEquipped(context.Context, *GetPlayerShipEquippedRequest) (*GetPlayerShipEquippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerShipEquipped not implemented")
}
func (*UnimplementedNoNameServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedNoNameServer) DropTresure(context.Context, *DropTresureRequest) (*DropTresureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTresure not implemented")
}
func (*UnimplementedNoNameServer) GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (*UnimplementedNoNameServer) CheckMission(context.Context, *CheckMissionRequest) (*CheckMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMission not implemented")
}
func (*UnimplementedNoNameServer) GetMissionReward(context.Context, *GetMissionRewardRequest) (*GetMissionRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionReward not implemented")
}
func (*UnimplementedNoNameServer) GetTeletrasportSafePlanetList(context.Context, *GetTeletrasportSafePlanetListRequest) (*GetTeletrasportSafePlanetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeletrasportSafePlanetList not implemented")
}
func (*UnimplementedNoNameServer) EndTeletrasportSafePlanet(context.Context, *EndTeletrasportSafePlanetRequest) (*EndTeletrasportSafePlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTeletrasportSafePlanet not implemented")
}
func (*UnimplementedNoNameServer) ExplorationStart(context.Context, *ExplorationStartRequest) (*ExplorationStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationStart not implemented")
}
func (*UnimplementedNoNameServer) ExplorationContinue(context.Context, *ExplorationContinueRequest) (*ExplorationContinueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationContinue not implemented")
}
func (*UnimplementedNoNameServer) ExplorationEnd(context.Context, *ExplorationEndRequest) (*ExplorationEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationEnd not implemented")
}
func (*UnimplementedNoNameServer) ExplorationCheck(context.Context, *ExplorationCheckRequest) (*ExplorationCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplorationCheck not implemented")
}
func (*UnimplementedNoNameServer) GetAllExplorationCategories(context.Context, *GetAllExplorationCategoriesRequest) (*GetAllExplorationCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExplorationCategories not implemented")
}
func (*UnimplementedNoNameServer) GetConquerorsByPlanetID(context.Context, *GetConquerorsByPlanetIDRequest) (*GetConquerorsByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConquerorsByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) GetCurrentConquerorByPlanetID(context.Context, *GetCurrentConquerorByPlanetIDRequest) (*GetCurrentConquerorByPlanetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentConquerorByPlanetID not implemented")
}
func (*UnimplementedNoNameServer) CrafterStart(context.Context, *CrafterStartRequest) (*CrafterStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterStart not implemented")
}
func (*UnimplementedNoNameServer) CrafterEnd(context.Context, *CrafterEndRequest) (*CrafterEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterEnd not implemented")
}
func (*UnimplementedNoNameServer) CrafterCheck(context.Context, *CrafterCheckRequest) (*CrafterCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrafterCheck not implemented")
}
func (*UnimplementedNoNameServer) mustEmbedUnimplementedNoNameServer() {}

func RegisterNoNameServer(s *grpc.Server, srv NoNameServer) {
	s.RegisterService(&_NoName_serviceDesc, srv)
}

func _NoName_GetArmorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByID(ctx, req.(*GetArmorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetArmorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorByName(ctx, req.(*GetArmorByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArmorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateArmor(ctx, req.(*UpdateArmorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmors(ctx, req.(*GetPlayerArmorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorsByCategoryID(ctx, req.(*GetPlayerArmorsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorsEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorsEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorsEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorsEquipped(ctx, req.(*GetPlayerArmorsEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerArmorEquippedByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerArmorEquippedByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerArmorEquippedByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerArmorEquippedByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerArmorEquippedByCategoryID(ctx, req.(*GetPlayerArmorEquippedByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllArmorCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllArmorCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllArmorCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllArmorCategory(ctx, req.(*GetAllArmorCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetArmorCategoryBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmorCategoryBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetArmorCategoryBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetArmorCategoryBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetArmorCategoryBySlug(ctx, req.(*GetArmorCategoryBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetWeaponByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetWeaponByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetWeaponByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetWeaponByID(ctx, req.(*GetWeaponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetWeaponByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetWeaponByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetWeaponByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetWeaponByName(ctx, req.(*GetWeaponByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdateWeapon(ctx, req.(*UpdateWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeapons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeapons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeapons(ctx, req.(*GetPlayerWeaponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerWeaponEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWeaponEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerWeaponEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerWeaponEquipped(ctx, req.(*GetPlayerWeaponEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByID(ctx, req.(*GetPlayerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerByUsername(ctx, req.(*GetPlayerByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStats(ctx, req.(*GetPlayerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerResources(ctx, req.(*GetPlayerResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerItems(ctx, req.(*GetPlayerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerEconomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEconomyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerEconomy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerEconomy(ctx, req.(*GetPlayerEconomyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ManagePlayerInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagePlayerInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ManagePlayerInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ManagePlayerInventory(ctx, req.(*ManagePlayerInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_PlayerEndTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerEndTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).PlayerEndTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/PlayerEndTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).PlayerEndTutorial(ctx, req.(*PlayerEndTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerExperience(ctx, req.(*GetPlayerExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerPosition(ctx, req.(*CreatePlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerCurrentPlanet(ctx, req.(*GetPlayerCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlanetVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlanetVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlanetVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlanetVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlanetVisited(ctx, req.(*CountPlanetVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountSystemVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSystemVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountSystemVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountSystemVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountSystemVisited(ctx, req.(*CountSystemVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CountPlayerVisitedCurrentPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlayerVisitedCurrentPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CountPlayerVisitedCurrentPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CountPlayerVisitedCurrentPlanet(ctx, req.(*CountPlayerVisitedCurrentPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRestsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRestsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRestsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRestsInfo(ctx, req.(*GetRestsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndPlayerRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPlayerRestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndPlayerRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndPlayerRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndPlayerRest(ctx, req.(*EndPlayerRestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateByID(ctx, req.(*GetPlayerStateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetActivePlayerStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePlayerStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetActivePlayerStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetActivePlayerStates(ctx, req.(*GetActivePlayerStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerStateToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStateToNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerStateToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerStateToNotify(ctx, req.(*GetPlayerStateToNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreatePlayerState(ctx, req.(*CreatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UpdatePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UpdatePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UpdatePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UpdatePlayerState(ctx, req.(*UpdatePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeletePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeletePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeletePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeletePlayerState(ctx, req.(*DeletePlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DeletePlayerStateByController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerStateByControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DeletePlayerStateByController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DeletePlayerStateByController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DeletePlayerStateByController(ctx, req.(*DeletePlayerStateByControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetEnemyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnemyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetEnemyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetEnemyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetEnemyByID(ctx, req.(*GetEnemyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitEnemy(ctx, req.(*HitEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByID(ctx, req.(*GetTitanByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByName(ctx, req.(*GetTitanByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanByPlanetID(ctx, req.(*GetTitanByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_HitTitan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitTitanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).HitTitan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/HitTitan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).HitTitan(ctx, req.(*HitTitanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_TitanDiscovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitanDiscoveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).TitanDiscovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/TitanDiscovered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).TitanDiscovered(ctx, req.(*TitanDiscoveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllEvent(ctx, req.(*GetAllEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetEventByID(ctx, req.(*GetTitanEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetEventChoiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventChoiceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetEventChoiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetEventChoiceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetEventChoiceByID(ctx, req.(*GetEventChoiceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetRandomEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetRandomEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetRandomEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetRandomEvent(ctx, req.(*GetRandomEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/SubmitAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTitanDamageByTitanID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitanDamageByTitanIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTitanDamageByTitanID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTitanDamageByTitanID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTitanDamageByTitanID(ctx, req.(*GetTitanDamageByTitanIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetLanguageBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetLanguageBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetLanguageBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetLanguageBySlug(ctx, req.(*GetLanguageBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetLanguageByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetLanguageByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetLanguageByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetLanguageByName(ctx, req.(*GetLanguageByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllLanguages(ctx, req.(*GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllNPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllNPC(ctx, req.(*GetAllNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankDeposit(ctx, req.(*BankDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_BankWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).BankWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/BankWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).BankWithdraw(ctx, req.(*BankWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByID(ctx, req.(*GetPlanetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByName(ctx, req.(*GetPlanetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByCoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByCoordinate(ctx, req.(*GetPlanetByCoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlanetByMapID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetByMapIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlanetByMapID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlanetByMapID(ctx, req.(*GetPlanetByMapIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetExpansionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpansionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetExpansionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetExpansionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetExpansionInfo(ctx, req.(*GetExpansionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetSafePlanets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSafePlanetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetSafePlanets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetSafePlanets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetSafePlanets(ctx, req.(*GetSafePlanetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMapByID(ctx, req.(*GetMapByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByID(ctx, req.(*GetResourceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetResourceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetResourceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetResourceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetResourceByName(ctx, req.(*GetResourceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetItemsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetItemsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetItemsByCategoryID(ctx, req.(*GetItemsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/UseItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).UseItem(ctx, req.(*UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllItemCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllItemCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllItemCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllItemCategories(ctx, req.(*GetAllItemCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipRepairInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipRepairInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipRepairInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipRepairInfo(ctx, req.(*GetShipRepairInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_StartShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).StartShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/StartShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).StartShipRepair(ctx, req.(*StartShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipRepair(ctx, req.(*EndShipRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetShipTravelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipTravelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetShipTravelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetShipTravelInfo(ctx, req.(*GetShipTravelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndShipTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndShipTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndShipTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndShipTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndShipTravel(ctx, req.(*EndShipTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShips(ctx, req.(*GetPlayerShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetPlayerShipEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerShipEquippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetPlayerShipEquipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetPlayerShipEquipped(ctx, req.(*GetPlayerShipEquippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_DropTresure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTresureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).DropTresure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/DropTresure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).DropTresure(ctx, req.(*DropTresureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMission(ctx, req.(*GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CheckMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CheckMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CheckMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CheckMission(ctx, req.(*CheckMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetMissionReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetMissionReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetMissionReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetMissionReward(ctx, req.(*GetMissionRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetTeletrasportSafePlanetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeletrasportSafePlanetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetTeletrasportSafePlanetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetTeletrasportSafePlanetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetTeletrasportSafePlanetList(ctx, req.(*GetTeletrasportSafePlanetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_EndTeletrasportSafePlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTeletrasportSafePlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).EndTeletrasportSafePlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/EndTeletrasportSafePlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).EndTeletrasportSafePlanet(ctx, req.(*EndTeletrasportSafePlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationStart(ctx, req.(*ExplorationStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationContinueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationContinue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationContinue(ctx, req.(*ExplorationContinueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationEnd(ctx, req.(*ExplorationEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_ExplorationCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).ExplorationCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/ExplorationCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).ExplorationCheck(ctx, req.(*ExplorationCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetAllExplorationCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllExplorationCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetAllExplorationCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetAllExplorationCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetAllExplorationCategories(ctx, req.(*GetAllExplorationCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetConquerorsByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConquerorsByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetConquerorsByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetConquerorsByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetConquerorsByPlanetID(ctx, req.(*GetConquerorsByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_GetCurrentConquerorByPlanetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentConquerorByPlanetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).GetCurrentConquerorByPlanetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/GetCurrentConquerorByPlanetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).GetCurrentConquerorByPlanetID(ctx, req.(*GetCurrentConquerorByPlanetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterStart(ctx, req.(*CrafterStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterEnd(ctx, req.(*CrafterEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoName_CrafterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrafterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoNameServer).CrafterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoName/CrafterCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoNameServer).CrafterCheck(ctx, req.(*CrafterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NoName",
	HandlerType: (*NoNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArmorByID",
			Handler:    _NoName_GetArmorByID_Handler,
		},
		{
			MethodName: "GetArmorByName",
			Handler:    _NoName_GetArmorByName_Handler,
		},
		{
			MethodName: "UpdateArmor",
			Handler:    _NoName_UpdateArmor_Handler,
		},
		{
			MethodName: "GetPlayerArmors",
			Handler:    _NoName_GetPlayerArmors_Handler,
		},
		{
			MethodName: "GetPlayerArmorsByCategoryID",
			Handler:    _NoName_GetPlayerArmorsByCategoryID_Handler,
		},
		{
			MethodName: "GetPlayerArmorsEquipped",
			Handler:    _NoName_GetPlayerArmorsEquipped_Handler,
		},
		{
			MethodName: "GetPlayerArmorEquippedByCategoryID",
			Handler:    _NoName_GetPlayerArmorEquippedByCategoryID_Handler,
		},
		{
			MethodName: "GetAllArmorCategory",
			Handler:    _NoName_GetAllArmorCategory_Handler,
		},
		{
			MethodName: "GetArmorCategoryBySlug",
			Handler:    _NoName_GetArmorCategoryBySlug_Handler,
		},
		{
			MethodName: "GetWeaponByID",
			Handler:    _NoName_GetWeaponByID_Handler,
		},
		{
			MethodName: "GetWeaponByName",
			Handler:    _NoName_GetWeaponByName_Handler,
		},
		{
			MethodName: "UpdateWeapon",
			Handler:    _NoName_UpdateWeapon_Handler,
		},
		{
			MethodName: "GetPlayerWeapons",
			Handler:    _NoName_GetPlayerWeapons_Handler,
		},
		{
			MethodName: "GetPlayerWeaponEquipped",
			Handler:    _NoName_GetPlayerWeaponEquipped_Handler,
		},
		{
			MethodName: "GetPlayerByID",
			Handler:    _NoName_GetPlayerByID_Handler,
		},
		{
			MethodName: "GetPlayerByUsername",
			Handler:    _NoName_GetPlayerByUsername_Handler,
		},
		{
			MethodName: "GetPlayerStats",
			Handler:    _NoName_GetPlayerStats_Handler,
		},
		{
			MethodName: "GetPlayerResources",
			Handler:    _NoName_GetPlayerResources_Handler,
		},
		{
			MethodName: "GetPlayerItems",
			Handler:    _NoName_GetPlayerItems_Handler,
		},
		{
			MethodName: "GetPlayerEconomy",
			Handler:    _NoName_GetPlayerEconomy_Handler,
		},
		{
			MethodName: "ManagePlayerInventory",
			Handler:    _NoName_ManagePlayerInventory_Handler,
		},
		{
			MethodName: "PlayerEndTutorial",
			Handler:    _NoName_PlayerEndTutorial_Handler,
		},
		{
			MethodName: "GetPlayerExperience",
			Handler:    _NoName_GetPlayerExperience_Handler,
		},
		{
			MethodName: "CreatePlayerPosition",
			Handler:    _NoName_CreatePlayerPosition_Handler,
		},
		{
			MethodName: "GetPlayerCurrentPlanet",
			Handler:    _NoName_GetPlayerCurrentPlanet_Handler,
		},
		{
			MethodName: "CountPlanetVisited",
			Handler:    _NoName_CountPlanetVisited_Handler,
		},
		{
			MethodName: "CountSystemVisited",
			Handler:    _NoName_CountSystemVisited_Handler,
		},
		{
			MethodName: "CountPlayerVisitedCurrentPlanet",
			Handler:    _NoName_CountPlayerVisitedCurrentPlanet_Handler,
		},
		{
			MethodName: "GetRestsInfo",
			Handler:    _NoName_GetRestsInfo_Handler,
		},
		{
			MethodName: "EndPlayerRest",
			Handler:    _NoName_EndPlayerRest_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _NoName_SignIn_Handler,
		},
		{
			MethodName: "GetPlayerStateByID",
			Handler:    _NoName_GetPlayerStateByID_Handler,
		},
		{
			MethodName: "GetActivePlayerStates",
			Handler:    _NoName_GetActivePlayerStates_Handler,
		},
		{
			MethodName: "GetPlayerStateToNotify",
			Handler:    _NoName_GetPlayerStateToNotify_Handler,
		},
		{
			MethodName: "CreatePlayerState",
			Handler:    _NoName_CreatePlayerState_Handler,
		},
		{
			MethodName: "UpdatePlayerState",
			Handler:    _NoName_UpdatePlayerState_Handler,
		},
		{
			MethodName: "DeletePlayerState",
			Handler:    _NoName_DeletePlayerState_Handler,
		},
		{
			MethodName: "DeletePlayerStateByController",
			Handler:    _NoName_DeletePlayerStateByController_Handler,
		},
		{
			MethodName: "GetEnemyByID",
			Handler:    _NoName_GetEnemyByID_Handler,
		},
		{
			MethodName: "HitEnemy",
			Handler:    _NoName_HitEnemy_Handler,
		},
		{
			MethodName: "GetTitanByID",
			Handler:    _NoName_GetTitanByID_Handler,
		},
		{
			MethodName: "GetTitanByName",
			Handler:    _NoName_GetTitanByName_Handler,
		},
		{
			MethodName: "GetTitanByPlanetID",
			Handler:    _NoName_GetTitanByPlanetID_Handler,
		},
		{
			MethodName: "HitTitan",
			Handler:    _NoName_HitTitan_Handler,
		},
		{
			MethodName: "TitanDiscovered",
			Handler:    _NoName_TitanDiscovered_Handler,
		},
		{
			MethodName: "GetAllEvent",
			Handler:    _NoName_GetAllEvent_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _NoName_GetEventByID_Handler,
		},
		{
			MethodName: "GetEventChoiceByID",
			Handler:    _NoName_GetEventChoiceByID_Handler,
		},
		{
			MethodName: "GetRandomEvent",
			Handler:    _NoName_GetRandomEvent_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _NoName_SubmitAnswer_Handler,
		},
		{
			MethodName: "GetTitanDamageByTitanID",
			Handler:    _NoName_GetTitanDamageByTitanID_Handler,
		},
		{
			MethodName: "GetLanguageBySlug",
			Handler:    _NoName_GetLanguageBySlug_Handler,
		},
		{
			MethodName: "GetLanguageByName",
			Handler:    _NoName_GetLanguageByName_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _NoName_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetAllNPC",
			Handler:    _NoName_GetAllNPC_Handler,
		},
		{
			MethodName: "BankDeposit",
			Handler:    _NoName_BankDeposit_Handler,
		},
		{
			MethodName: "BankWithdraw",
			Handler:    _NoName_BankWithdraw_Handler,
		},
		{
			MethodName: "GetPlanetByID",
			Handler:    _NoName_GetPlanetByID_Handler,
		},
		{
			MethodName: "GetPlanetByName",
			Handler:    _NoName_GetPlanetByName_Handler,
		},
		{
			MethodName: "GetPlanetByCoordinate",
			Handler:    _NoName_GetPlanetByCoordinate_Handler,
		},
		{
			MethodName: "GetPlanetByMapID",
			Handler:    _NoName_GetPlanetByMapID_Handler,
		},
		{
			MethodName: "GetExpansionInfo",
			Handler:    _NoName_GetExpansionInfo_Handler,
		},
		{
			MethodName: "GetSafePlanets",
			Handler:    _NoName_GetSafePlanets_Handler,
		},
		{
			MethodName: "GetMapByID",
			Handler:    _NoName_GetMapByID_Handler,
		},
		{
			MethodName: "GetResourceByID",
			Handler:    _NoName_GetResourceByID_Handler,
		},
		{
			MethodName: "GetResourceByName",
			Handler:    _NoName_GetResourceByName_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _NoName_GetAllItems_Handler,
		},
		{
			MethodName: "GetItemsByCategoryID",
			Handler:    _NoName_GetItemsByCategoryID_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _NoName_UseItem_Handler,
		},
		{
			MethodName: "GetAllItemCategories",
			Handler:    _NoName_GetAllItemCategories_Handler,
		},
		{
			MethodName: "GetShipRepairInfo",
			Handler:    _NoName_GetShipRepairInfo_Handler,
		},
		{
			MethodName: "StartShipRepair",
			Handler:    _NoName_StartShipRepair_Handler,
		},
		{
			MethodName: "EndShipRepair",
			Handler:    _NoName_EndShipRepair_Handler,
		},
		{
			MethodName: "GetShipTravelInfo",
			Handler:    _NoName_GetShipTravelInfo_Handler,
		},
		{
			MethodName: "EndShipTravel",
			Handler:    _NoName_EndShipTravel_Handler,
		},
		{
			MethodName: "GetPlayerShips",
			Handler:    _NoName_GetPlayerShips_Handler,
		},
		{
			MethodName: "GetPlayerShipEquipped",
			Handler:    _NoName_GetPlayerShipEquipped_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _NoName_CreateTransaction_Handler,
		},
		{
			MethodName: "DropTresure",
			Handler:    _NoName_DropTresure_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _NoName_GetMission_Handler,
		},
		{
			MethodName: "CheckMission",
			Handler:    _NoName_CheckMission_Handler,
		},
		{
			MethodName: "GetMissionReward",
			Handler:    _NoName_GetMissionReward_Handler,
		},
		{
			MethodName: "GetTeletrasportSafePlanetList",
			Handler:    _NoName_GetTeletrasportSafePlanetList_Handler,
		},
		{
			MethodName: "EndTeletrasportSafePlanet",
			Handler:    _NoName_EndTeletrasportSafePlanet_Handler,
		},
		{
			MethodName: "ExplorationStart",
			Handler:    _NoName_ExplorationStart_Handler,
		},
		{
			MethodName: "ExplorationContinue",
			Handler:    _NoName_ExplorationContinue_Handler,
		},
		{
			MethodName: "ExplorationEnd",
			Handler:    _NoName_ExplorationEnd_Handler,
		},
		{
			MethodName: "ExplorationCheck",
			Handler:    _NoName_ExplorationCheck_Handler,
		},
		{
			MethodName: "GetAllExplorationCategories",
			Handler:    _NoName_GetAllExplorationCategories_Handler,
		},
		{
			MethodName: "GetConquerorsByPlanetID",
			Handler:    _NoName_GetConquerorsByPlanetID_Handler,
		},
		{
			MethodName: "GetCurrentConquerorByPlanetID",
			Handler:    _NoName_GetCurrentConquerorByPlanetID_Handler,
		},
		{
			MethodName: "CrafterStart",
			Handler:    _NoName_CrafterStart_Handler,
		},
		{
			MethodName: "CrafterEnd",
			Handler:    _NoName_CrafterEnd_Handler,
		},
		{
			MethodName: "CrafterCheck",
			Handler:    _NoName_CrafterCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/noname.proto",
}
